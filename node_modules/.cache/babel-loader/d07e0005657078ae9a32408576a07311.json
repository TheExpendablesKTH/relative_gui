{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst LogLevel_1 = require(\"./LogLevel\");\n/**\n * MultiLogger writes logs to multiple other loggers\n */\n\n\nclass MultiLogger {\n  constructor(...loggers) {\n    this._loggers = loggers;\n  }\n\n  info(msg) {\n    for (const logger of this._loggers) {\n      logger.info(msg);\n    }\n  }\n\n  warn(msg) {\n    for (const logger of this._loggers) {\n      logger.warn(msg);\n    }\n  }\n\n  error(msg) {\n    for (const logger of this._loggers) {\n      logger.error(msg);\n    }\n  }\n\n  debug(debugFunction) {\n    let message;\n    let memoized;\n\n    if (typeof debugFunction === 'string') {\n      memoized = debugFunction;\n    } else if (debugFunction) {\n      memoized = () => {\n        if (!message) {\n          message = debugFunction();\n        }\n\n        return message;\n      };\n    } else {\n      memoized = '' + debugFunction;\n    }\n\n    for (const logger of this._loggers) {\n      logger.debug(memoized);\n    }\n  }\n\n  setLogLevel(level) {\n    for (const logger of this._loggers) {\n      logger.setLogLevel(level);\n    }\n  }\n\n  getLogLevel() {\n    for (const logger of this._loggers) {\n      return logger.getLogLevel();\n    }\n\n    return LogLevel_1.default.OFF;\n  }\n\n}\n\nexports.default = MultiLogger;","map":{"version":3,"sources":["../../src/logger/MultiLogger.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAGA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;AAEG;;;AACH,MAAqB,WAArB,CAAgC;AAG9B,EAAA,WAAA,CAAY,GAAG,OAAf,EAAgC;AAC9B,SAAK,QAAL,GAAgB,OAAhB;AACD;;AAED,EAAA,IAAI,CAAC,GAAD,EAAY;AACd,SAAK,MAAM,MAAX,IAAqB,KAAK,QAA1B,EAAoC;AAClC,MAAA,MAAM,CAAC,IAAP,CAAY,GAAZ;AACD;AACF;;AAED,EAAA,IAAI,CAAC,GAAD,EAAY;AACd,SAAK,MAAM,MAAX,IAAqB,KAAK,QAA1B,EAAoC;AAClC,MAAA,MAAM,CAAC,IAAP,CAAY,GAAZ;AACD;AACF;;AAED,EAAA,KAAK,CAAC,GAAD,EAAY;AACf,SAAK,MAAM,MAAX,IAAqB,KAAK,QAA1B,EAAoC;AAClC,MAAA,MAAM,CAAC,KAAP,CAAa,GAAb;AACD;AACF;;AAED,EAAA,KAAK,CAAC,aAAD,EAAuC;AAC1C,QAAI,OAAJ;AACA,QAAI,QAAJ;;AACA,QAAI,OAAO,aAAP,KAAyB,QAA7B,EAAuC;AACrC,MAAA,QAAQ,GAAG,aAAX;AACD,KAFD,MAEO,IAAI,aAAJ,EAAmB;AACxB,MAAA,QAAQ,GAAG,MAAK;AACd,YAAI,CAAC,OAAL,EAAc;AACZ,UAAA,OAAO,GAAG,aAAa,EAAvB;AACD;;AACD,eAAO,OAAP;AACD,OALD;AAMD,KAPM,MAOA;AACL,MAAA,QAAQ,GAAG,KAAK,aAAhB;AACD;;AAED,SAAK,MAAM,MAAX,IAAqB,KAAK,QAA1B,EAAoC;AAClC,MAAA,MAAM,CAAC,KAAP,CAAa,QAAb;AACD;AACF;;AAED,EAAA,WAAW,CAAC,KAAD,EAAgB;AACzB,SAAK,MAAM,MAAX,IAAqB,KAAK,QAA1B,EAAoC;AAClC,MAAA,MAAM,CAAC,WAAP,CAAmB,KAAnB;AACD;AACF;;AAED,EAAA,WAAW,GAAA;AACT,SAAK,MAAM,MAAX,IAAqB,KAAK,QAA1B,EAAoC;AAClC,aAAO,MAAM,CAAC,WAAP,EAAP;AACD;;AACD,WAAO,UAAA,CAAA,OAAA,CAAS,GAAhB;AACD;;AAzD6B;;AAAhC,OAAA,CAAA,OAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst LogLevel_1 = require(\"./LogLevel\");\n/**\n * MultiLogger writes logs to multiple other loggers\n */\nclass MultiLogger {\n    constructor(...loggers) {\n        this._loggers = loggers;\n    }\n    info(msg) {\n        for (const logger of this._loggers) {\n            logger.info(msg);\n        }\n    }\n    warn(msg) {\n        for (const logger of this._loggers) {\n            logger.warn(msg);\n        }\n    }\n    error(msg) {\n        for (const logger of this._loggers) {\n            logger.error(msg);\n        }\n    }\n    debug(debugFunction) {\n        let message;\n        let memoized;\n        if (typeof debugFunction === 'string') {\n            memoized = debugFunction;\n        }\n        else if (debugFunction) {\n            memoized = () => {\n                if (!message) {\n                    message = debugFunction();\n                }\n                return message;\n            };\n        }\n        else {\n            memoized = '' + debugFunction;\n        }\n        for (const logger of this._loggers) {\n            logger.debug(memoized);\n        }\n    }\n    setLogLevel(level) {\n        for (const logger of this._loggers) {\n            logger.setLogLevel(level);\n        }\n    }\n    getLogLevel() {\n        for (const logger of this._loggers) {\n            return logger.getLogLevel();\n        }\n        return LogLevel_1.default.OFF;\n    }\n}\nexports.default = MultiLogger;\n//# sourceMappingURL=MultiLogger.js.map"]},"metadata":{},"sourceType":"script"}