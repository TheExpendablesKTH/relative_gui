{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\n\nconst MeetingSessionTURNCredentials_1 = require(\"../meetingsession/MeetingSessionTURNCredentials\");\n\nconst DefaultModality_1 = require(\"../modality/DefaultModality\");\n\nconst Versioning_1 = require(\"../versioning/Versioning\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[ReceiveTURNCredentialsTask]] asynchronously retrieves TURN credentials.\n */\n\n\nclass ReceiveTURNCredentialsTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'ReceiveTURNCredentialsTask';\n    this.url = context.meetingSessionConfiguration.urls.turnControlURL;\n    this.meetingId = context.meetingSessionConfiguration.meetingId;\n    this.joinToken = context.meetingSessionConfiguration.credentials.joinToken;\n  }\n\n  cancel() {\n    // Just in case. The baseCancel behavior should prevent this.\n\n    /* istanbul ignore else */\n    if (this.cancelPromise) {\n      const error = new Error(`canceling ${this.name()}`);\n      this.cancelPromise(error);\n      delete this.cancelPromise;\n    }\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.context.turnCredentials) {\n        this.context.logger.info('TURN credentials available, skipping credentials fetch');\n        return;\n      }\n\n      this.context.logger.error('missing TURN credentials - falling back to fetch');\n\n      if (!this.url) {\n        this.context.logger.info('TURN control url not supplied, skipping credentials fetch');\n        return;\n      }\n\n      const options = {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'no-cache',\n        credentials: 'omit',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Chime-Auth-Token': '_aws_wt_session=' + new DefaultModality_1.default(this.joinToken).base()\n        },\n        redirect: 'follow',\n        referrer: 'no-referrer',\n        body: JSON.stringify({\n          meetingId: this.meetingId\n        })\n      };\n      this.context.logger.info(`requesting TURN credentials from ${this.url}`); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      const responseBodyJson = yield new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n        this.cancelPromise = error => {\n          reject(error);\n        };\n\n        try {\n          const responseBody = yield fetch(Versioning_1.default.urlWithVersion(this.url), options);\n          this.context.logger.info(`received TURN credentials`);\n\n          if (responseBody.status && responseBody.status === 403) {\n            reject(new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.TURNCredentialsForbidden}`));\n            return;\n          }\n\n          if (responseBody.status && responseBody.status === 404) {\n            reject(new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.MeetingEnded}`));\n            return;\n          }\n\n          resolve(yield responseBody.json());\n        } catch (error) {\n          reject(error);\n        } finally {\n          delete this.cancelPromise;\n        }\n      }));\n      this.context.turnCredentials = new MeetingSessionTURNCredentials_1.default();\n      this.context.turnCredentials.password = responseBodyJson.password;\n      this.context.turnCredentials.ttl = responseBodyJson.ttl;\n      this.context.turnCredentials.uris = responseBodyJson.uris.map(uri => {\n        return this.context.meetingSessionConfiguration.urls.urlRewriter(uri);\n      }).filter(uri => {\n        return !!uri;\n      });\n      this.context.turnCredentials.username = responseBodyJson.username;\n    });\n  }\n\n}\n\nexports.default = ReceiveTURNCredentialsTask;","map":{"version":3,"sources":["../../src/task/ReceiveTURNCredentialsTask.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAA,0BAAA,GAAA,OAAA,CAAA,4CAAA,CAAA;;AACA,MAAA,+BAAA,GAAA,OAAA,CAAA,iDAAA,CAAA;;AACA,MAAA,iBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;AAEG;;;AACH,MAAqB,0BAArB,SAAwD,UAAA,CAAA,OAAxD,CAAgE;AAQ9D,EAAA,WAAA,CAAoB,OAApB,EAAsD;AACpD,UAAM,OAAO,CAAC,MAAd;AADkB,SAAA,OAAA,GAAA,OAAA;AAPV,SAAA,QAAA,GAAW,4BAAX;AASR,SAAK,GAAL,GAAW,OAAO,CAAC,2BAAR,CAAoC,IAApC,CAAyC,cAApD;AACA,SAAK,SAAL,GAAiB,OAAO,CAAC,2BAAR,CAAoC,SAArD;AACA,SAAK,SAAL,GAAiB,OAAO,CAAC,2BAAR,CAAoC,WAApC,CAAgD,SAAjE;AACD;;AAED,EAAA,MAAM,GAAA;AACJ;;AACA;AACA,QAAI,KAAK,aAAT,EAAwB;AACtB,YAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,aAAa,KAAK,IAAL,EAAW,EAAlC,CAAd;AACA,WAAK,aAAL,CAAmB,KAAnB;AACA,aAAO,KAAK,aAAZ;AACD;AACF;;AAEK,EAAA,GAAG,GAAA;;AACP,UAAI,KAAK,OAAL,CAAa,eAAjB,EAAkC;AAChC,aAAK,OAAL,CAAa,MAAb,CAAoB,IAApB,CAAyB,wDAAzB;AACA;AACD;;AAED,WAAK,OAAL,CAAa,MAAb,CAAoB,KAApB,CAA0B,kDAA1B;;AAEA,UAAI,CAAC,KAAK,GAAV,EAAe;AACb,aAAK,OAAL,CAAa,MAAb,CAAoB,IAApB,CAAyB,2DAAzB;AACA;AACD;;AAED,YAAM,OAAO,GAAgB;AAC3B,QAAA,MAAM,EAAE,MADmB;AAE3B,QAAA,IAAI,EAAE,MAFqB;AAG3B,QAAA,KAAK,EAAE,UAHoB;AAI3B,QAAA,WAAW,EAAE,MAJc;AAK3B,QAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEP,gCAAsB,qBAAqB,IAAI,iBAAA,CAAA,OAAJ,CAAoB,KAAK,SAAzB,EAAoC,IAApC;AAFpC,SALkB;AAS3B,QAAA,QAAQ,EAAE,QATiB;AAU3B,QAAA,QAAQ,EAAE,aAViB;AAW3B,QAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe;AAAE,UAAA,SAAS,EAAE,KAAK;AAAlB,SAAf;AAXqB,OAA7B;AAcA,WAAK,OAAL,CAAa,MAAb,CAAoB,IAApB,CAAyB,oCAAoC,KAAK,GAAG,EAArE,E,CAEA;;AACA,YAAM,gBAAgB,GAAG,MAAM,IAAI,OAAJ,CAAiB,CAAO,OAAP,EAAgB,MAAhB,KAA0B,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACxE,aAAK,aAAL,GAAsB,KAAD,IAAiB;AACpC,UAAA,MAAM,CAAC,KAAD,CAAN;AACD,SAFD;;AAIA,YAAI;AACF,gBAAM,YAAY,GAAG,MAAM,KAAK,CAAC,YAAA,CAAA,OAAA,CAAW,cAAX,CAA0B,KAAK,GAA/B,CAAD,EAAsC,OAAtC,CAAhC;AACA,eAAK,OAAL,CAAa,MAAb,CAAoB,IAApB,CAAyB,2BAAzB;;AACA,cAAI,YAAY,CAAC,MAAb,IAAuB,YAAY,CAAC,MAAb,KAAwB,GAAnD,EAAwD;AACtD,YAAA,MAAM,CACJ,IAAI,KAAJ,CACE,aAAa,KAAK,IAAL,EAAW,oCACtB,0BAAA,CAAA,OAAA,CAAyB,wBAC3B,EAHF,CADI,CAAN;AAOA;AACD;;AACD,cAAI,YAAY,CAAC,MAAb,IAAuB,YAAY,CAAC,MAAb,KAAwB,GAAnD,EAAwD;AACtD,YAAA,MAAM,CACJ,IAAI,KAAJ,CACE,aAAa,KAAK,IAAL,EAAW,oCACtB,0BAAA,CAAA,OAAA,CAAyB,YAC3B,EAHF,CADI,CAAN;AAOA;AACD;;AACD,UAAA,OAAO,CAAC,MAAM,YAAY,CAAC,IAAb,EAAP,CAAP;AACD,SAxBD,CAwBE,OAAO,KAAP,EAAc;AACd,UAAA,MAAM,CAAC,KAAD,CAAN;AACD,SA1BD,SA0BU;AACR,iBAAO,KAAK,aAAZ;AACD;AACF,OAlCyE,CAA3C,CAA/B;AAoCA,WAAK,OAAL,CAAa,eAAb,GAA+B,IAAI,+BAAA,CAAA,OAAJ,EAA/B;AACA,WAAK,OAAL,CAAa,eAAb,CAA6B,QAA7B,GAAwC,gBAAgB,CAAC,QAAzD;AACA,WAAK,OAAL,CAAa,eAAb,CAA6B,GAA7B,GAAmC,gBAAgB,CAAC,GAApD;AACA,WAAK,OAAL,CAAa,eAAb,CAA6B,IAA7B,GAAoC,gBAAgB,CAAC,IAAjB,CACjC,GADiC,CAC5B,GAAD,IAAwB;AAC3B,eAAO,KAAK,OAAL,CAAa,2BAAb,CAAyC,IAAzC,CAA8C,WAA9C,CAA0D,GAA1D,CAAP;AACD,OAHiC,EAIjC,MAJiC,CAIzB,GAAD,IAAgB;AACtB,eAAO,CAAC,CAAC,GAAT;AACD,OANiC,CAApC;AAOA,WAAK,OAAL,CAAa,eAAb,CAA6B,QAA7B,GAAwC,gBAAgB,CAAC,QAAzD;AACD,K;AAAA;;AAtG6D;;AAAhE,OAAA,CAAA,OAAA,GAAA,0BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\nconst MeetingSessionTURNCredentials_1 = require(\"../meetingsession/MeetingSessionTURNCredentials\");\nconst DefaultModality_1 = require(\"../modality/DefaultModality\");\nconst Versioning_1 = require(\"../versioning/Versioning\");\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[ReceiveTURNCredentialsTask]] asynchronously retrieves TURN credentials.\n */\nclass ReceiveTURNCredentialsTask extends BaseTask_1.default {\n    constructor(context) {\n        super(context.logger);\n        this.context = context;\n        this.taskName = 'ReceiveTURNCredentialsTask';\n        this.url = context.meetingSessionConfiguration.urls.turnControlURL;\n        this.meetingId = context.meetingSessionConfiguration.meetingId;\n        this.joinToken = context.meetingSessionConfiguration.credentials.joinToken;\n    }\n    cancel() {\n        // Just in case. The baseCancel behavior should prevent this.\n        /* istanbul ignore else */\n        if (this.cancelPromise) {\n            const error = new Error(`canceling ${this.name()}`);\n            this.cancelPromise(error);\n            delete this.cancelPromise;\n        }\n    }\n    run() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.context.turnCredentials) {\n                this.context.logger.info('TURN credentials available, skipping credentials fetch');\n                return;\n            }\n            this.context.logger.error('missing TURN credentials - falling back to fetch');\n            if (!this.url) {\n                this.context.logger.info('TURN control url not supplied, skipping credentials fetch');\n                return;\n            }\n            const options = {\n                method: 'POST',\n                mode: 'cors',\n                cache: 'no-cache',\n                credentials: 'omit',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Chime-Auth-Token': '_aws_wt_session=' + new DefaultModality_1.default(this.joinToken).base(),\n                },\n                redirect: 'follow',\n                referrer: 'no-referrer',\n                body: JSON.stringify({ meetingId: this.meetingId }),\n            };\n            this.context.logger.info(`requesting TURN credentials from ${this.url}`);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const responseBodyJson = yield new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                this.cancelPromise = (error) => {\n                    reject(error);\n                };\n                try {\n                    const responseBody = yield fetch(Versioning_1.default.urlWithVersion(this.url), options);\n                    this.context.logger.info(`received TURN credentials`);\n                    if (responseBody.status && responseBody.status === 403) {\n                        reject(new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.TURNCredentialsForbidden}`));\n                        return;\n                    }\n                    if (responseBody.status && responseBody.status === 404) {\n                        reject(new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.MeetingEnded}`));\n                        return;\n                    }\n                    resolve(yield responseBody.json());\n                }\n                catch (error) {\n                    reject(error);\n                }\n                finally {\n                    delete this.cancelPromise;\n                }\n            }));\n            this.context.turnCredentials = new MeetingSessionTURNCredentials_1.default();\n            this.context.turnCredentials.password = responseBodyJson.password;\n            this.context.turnCredentials.ttl = responseBodyJson.ttl;\n            this.context.turnCredentials.uris = responseBodyJson.uris\n                .map((uri) => {\n                return this.context.meetingSessionConfiguration.urls.urlRewriter(uri);\n            })\n                .filter((uri) => {\n                return !!uri;\n            });\n            this.context.turnCredentials.username = responseBodyJson.username;\n        });\n    }\n}\nexports.default = ReceiveTURNCredentialsTask;\n//# sourceMappingURL=ReceiveTURNCredentialsTask.js.map"]},"metadata":{},"sourceType":"script"}