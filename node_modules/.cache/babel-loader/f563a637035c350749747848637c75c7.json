{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * [[MessagingSessionConfiguration]] contains the information necessary to start\n * a messaging session.\n */\n\n/* eslint  @typescript-eslint/no-explicit-any: 0, @typescript-eslint/explicit-module-boundary-types: 0 */\n\nclass MessagingSessionConfiguration {\n  /**\n   * Constructs a MessagingSessionConfiguration optionally with userArn, messaging session id, a messaging session\n   * endpoint URL, the chimeClient, and the AWSClient.\n   * The messaging session id is to uniquely identify this messaging session for the userArn.\n   * If messaging session id is passed in as null, it will be automatically generated.\n   */\n  constructor(userArn, messagingSessionId, endpointUrl, chimeClient, awsClient) {\n    this.userArn = userArn;\n    this.messagingSessionId = messagingSessionId;\n    this.endpointUrl = endpointUrl;\n    this.chimeClient = chimeClient;\n    this.awsClient = awsClient;\n    /**\n     * Maximum amount of time in milliseconds to allow for reconnecting.\n     */\n\n    this.reconnectTimeoutMs = 10 * 1000;\n    /**\n     * Fixed wait amount in milliseconds between reconnecting attempts.\n     */\n\n    this.reconnectFixedWaitMs = 0;\n    /**\n     * The short back off time in milliseconds between reconnecting attempts.\n     */\n\n    this.reconnectShortBackoffMs = 1 * 1000;\n    /**\n     * The short back off time in milliseconds between reconnecting attempts.\n     */\n\n    this.reconnectLongBackoffMs = 5 * 1000;\n\n    if (!this.messagingSessionId) {\n      this.messagingSessionId = this.generateSessionId();\n    }\n  }\n\n  generateSessionId() {\n    const num = new Uint32Array(1);\n    const randomNum = window.crypto.getRandomValues(num);\n    return randomNum[0].toString();\n  }\n\n}\n\nexports.default = MessagingSessionConfiguration;","map":{"version":3,"sources":["../../src/messagingsession/MessagingSessionConfiguration.ts"],"names":[],"mappings":"cAAA;AACA;;;;;AAEA;;;AAGG;;AACH;;AACA,MAAqB,6BAArB,CAAkD;AAqBhD;;;;;AAKG;AACH,EAAA,WAAA,CACS,OADT,EAES,kBAFT,EAGS,WAHT,EAIS,WAJT,EAKS,SALT,EAKuB;AAJd,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,kBAAA,GAAA,kBAAA;AACA,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,SAAA,GAAA,SAAA;AA/BT;;AAEG;;AACH,SAAA,kBAAA,GAA6B,KAAK,IAAlC;AAEA;;AAEG;;AACH,SAAA,oBAAA,GAA+B,CAA/B;AAEA;;AAEG;;AACH,SAAA,uBAAA,GAAkC,IAAI,IAAtC;AAEA;;AAEG;;AACH,SAAA,sBAAA,GAAiC,IAAI,IAArC;;AAeE,QAAI,CAAC,KAAK,kBAAV,EAA8B;AAC5B,WAAK,kBAAL,GAA0B,KAAK,iBAAL,EAA1B;AACD;AACF;;AAEO,EAAA,iBAAiB,GAAA;AACvB,UAAM,GAAG,GAAG,IAAI,WAAJ,CAAgB,CAAhB,CAAZ;AACA,UAAM,SAAS,GAAG,MAAM,CAAC,MAAP,CAAc,eAAd,CAA8B,GAA9B,CAAlB;AACA,WAAO,SAAS,CAAC,CAAD,CAAT,CAAa,QAAb,EAAP;AACD;;AA3C+C;;AAAlD,OAAA,CAAA,OAAA,GAAA,6BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * [[MessagingSessionConfiguration]] contains the information necessary to start\n * a messaging session.\n */\n/* eslint  @typescript-eslint/no-explicit-any: 0, @typescript-eslint/explicit-module-boundary-types: 0 */\nclass MessagingSessionConfiguration {\n    /**\n     * Constructs a MessagingSessionConfiguration optionally with userArn, messaging session id, a messaging session\n     * endpoint URL, the chimeClient, and the AWSClient.\n     * The messaging session id is to uniquely identify this messaging session for the userArn.\n     * If messaging session id is passed in as null, it will be automatically generated.\n     */\n    constructor(userArn, messagingSessionId, endpointUrl, chimeClient, awsClient) {\n        this.userArn = userArn;\n        this.messagingSessionId = messagingSessionId;\n        this.endpointUrl = endpointUrl;\n        this.chimeClient = chimeClient;\n        this.awsClient = awsClient;\n        /**\n         * Maximum amount of time in milliseconds to allow for reconnecting.\n         */\n        this.reconnectTimeoutMs = 10 * 1000;\n        /**\n         * Fixed wait amount in milliseconds between reconnecting attempts.\n         */\n        this.reconnectFixedWaitMs = 0;\n        /**\n         * The short back off time in milliseconds between reconnecting attempts.\n         */\n        this.reconnectShortBackoffMs = 1 * 1000;\n        /**\n         * The short back off time in milliseconds between reconnecting attempts.\n         */\n        this.reconnectLongBackoffMs = 5 * 1000;\n        if (!this.messagingSessionId) {\n            this.messagingSessionId = this.generateSessionId();\n        }\n    }\n    generateSessionId() {\n        const num = new Uint32Array(1);\n        const randomNum = window.crypto.getRandomValues(num);\n        return randomNum[0].toString();\n    }\n}\nexports.default = MessagingSessionConfiguration;\n//# sourceMappingURL=MessagingSessionConfiguration.js.map"]},"metadata":{},"sourceType":"script"}