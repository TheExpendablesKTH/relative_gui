{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst support_js_1 = require(\"./support.js\");\n\nconst types_js_1 = require(\"./types.js\");\n\nconst INDICES = {\n  ready: 0,\n  enabled: 1\n};\nconst STATES = {\n  disabled: 0,\n  enabled: 1,\n  stopped: 2\n};\n\nclass VoiceFocusWorkerBufferNode extends types_js_1.VoiceFocusAudioWorkletNode {\n  constructor(context, options) {\n    super(context, options.processor, options);\n    const {\n      modelURL,\n      resamplerURL,\n      worker,\n      fetchBehavior,\n      delegate\n    } = options;\n    this.delegate = delegate;\n    this.worker = worker;\n    this.worker.onmessage = this.onWorkerMessage.bind(this);\n    this.port.onmessage = this.onProcessorMessage.bind(this);\n    this.worker.postMessage({\n      message: 'init',\n      approach: 'sab',\n      frames: context.sampleRate === 16000 ? 160 : 480,\n      enabled: options.processorOptions.enabled,\n      model: modelURL\n    });\n    const message = support_js_1.supportsWASMPostMessage(globalThis) ? 'get-module' : 'get-module-buffer';\n    this.worker.postMessage({\n      message,\n      key: 'resampler',\n      fetchBehavior,\n      path: resamplerURL\n    });\n  }\n\n  enable() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.state) {\n        Atomics.store(this.state, INDICES.enabled, STATES.enabled);\n        Atomics.notify(this.state, INDICES.ready, 1);\n      } else {\n        this.worker.postMessage({\n          message: 'enable'\n        });\n      }\n    });\n  }\n\n  disable() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.state) {\n        Atomics.store(this.state, INDICES.enabled, STATES.disabled);\n        Atomics.notify(this.state, INDICES.ready, 1);\n      } else {\n        this.worker.postMessage({\n          message: 'disable'\n        });\n      }\n    });\n  }\n\n  stop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.state) {\n        Atomics.store(this.state, INDICES.enabled, STATES.stopped);\n        Atomics.notify(this.state, INDICES.ready, 1);\n      } else {\n        try {\n          this.worker.postMessage({\n            message: 'stop'\n          });\n        } catch (e) {}\n      }\n\n      this.disconnect();\n    });\n  }\n\n  onWorkerMessage(event) {\n    var _a;\n\n    const data = event.data;\n\n    switch (data.message) {\n      case 'ready':\n        if (!data.shared) {\n          throw new Error('No shared state.');\n        }\n\n        this.state = new Int32Array(data.shared.state);\n        this.port.postMessage(data);\n        break;\n\n      case 'stopped':\n        this.worker.terminate();\n        break;\n\n      case 'module-buffer':\n      case 'module':\n        this.port.postMessage(data);\n        break;\n\n      case 'cpu':\n        (_a = this.delegate) === null || _a === void 0 ? void 0 : _a.onCPUWarning();\n        break;\n\n      case 'processing':\n        this.port.postMessage(data);\n        break;\n\n      default:\n        return;\n    }\n  }\n\n  onProcessorMessage(event) {\n    var _a;\n\n    const data = event.data;\n\n    switch (data.message) {\n      case 'cpu':\n        (_a = this.delegate) === null || _a === void 0 ? void 0 : _a.onCPUWarning();\n        break;\n\n      case 'prepare-for-frames':\n        this.worker.postMessage(data);\n        break;\n\n      default:\n    }\n  }\n\n}\n\nexports.default = VoiceFocusWorkerBufferNode;","map":{"version":3,"sources":["/Users/torarvill/Documents/Pip/relative_gui/relative_ui/node_modules/amazon-chime-sdk-js/libs/voicefocus/worklet-worker-sab-node.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","support_js_1","require","types_js_1","INDICES","ready","enabled","STATES","disabled","stopped","VoiceFocusWorkerBufferNode","VoiceFocusAudioWorkletNode","constructor","context","options","processor","modelURL","resamplerURL","worker","fetchBehavior","delegate","onmessage","onWorkerMessage","bind","port","onProcessorMessage","postMessage","message","approach","frames","sampleRate","processorOptions","model","supportsWASMPostMessage","globalThis","key","path","enable","state","Atomics","store","notify","disable","stop","disconnect","event","_a","data","shared","Error","Int32Array","terminate","onCPUWarning","default"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst support_js_1 = require(\"./support.js\");\nconst types_js_1 = require(\"./types.js\");\nconst INDICES = {\n    ready: 0,\n    enabled: 1,\n};\nconst STATES = {\n    disabled: 0,\n    enabled: 1,\n    stopped: 2,\n};\nclass VoiceFocusWorkerBufferNode extends types_js_1.VoiceFocusAudioWorkletNode {\n    constructor(context, options) {\n        super(context, options.processor, options);\n        const { modelURL, resamplerURL, worker, fetchBehavior, delegate, } = options;\n        this.delegate = delegate;\n        this.worker = worker;\n        this.worker.onmessage = this.onWorkerMessage.bind(this);\n        this.port.onmessage = this.onProcessorMessage.bind(this);\n        this.worker.postMessage({\n            message: 'init',\n            approach: 'sab',\n            frames: context.sampleRate === 16000 ? 160 : 480,\n            enabled: options.processorOptions.enabled,\n            model: modelURL,\n        });\n        const message = support_js_1.supportsWASMPostMessage(globalThis) ? 'get-module' : 'get-module-buffer';\n        this.worker.postMessage({\n            message,\n            key: 'resampler',\n            fetchBehavior,\n            path: resamplerURL,\n        });\n    }\n    enable() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.state) {\n                Atomics.store(this.state, INDICES.enabled, STATES.enabled);\n                Atomics.notify(this.state, INDICES.ready, 1);\n            }\n            else {\n                this.worker.postMessage({ message: 'enable' });\n            }\n        });\n    }\n    disable() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.state) {\n                Atomics.store(this.state, INDICES.enabled, STATES.disabled);\n                Atomics.notify(this.state, INDICES.ready, 1);\n            }\n            else {\n                this.worker.postMessage({ message: 'disable' });\n            }\n        });\n    }\n    stop() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.state) {\n                Atomics.store(this.state, INDICES.enabled, STATES.stopped);\n                Atomics.notify(this.state, INDICES.ready, 1);\n            }\n            else {\n                try {\n                    this.worker.postMessage({ message: 'stop' });\n                }\n                catch (e) {\n                }\n            }\n            this.disconnect();\n        });\n    }\n    onWorkerMessage(event) {\n        var _a;\n        const data = event.data;\n        switch (data.message) {\n            case 'ready':\n                if (!data.shared) {\n                    throw new Error('No shared state.');\n                }\n                this.state = new Int32Array(data.shared.state);\n                this.port.postMessage(data);\n                break;\n            case 'stopped':\n                this.worker.terminate();\n                break;\n            case 'module-buffer':\n            case 'module':\n                this.port.postMessage(data);\n                break;\n            case 'cpu':\n                (_a = this.delegate) === null || _a === void 0 ? void 0 : _a.onCPUWarning();\n                break;\n            case 'processing':\n                this.port.postMessage(data);\n                break;\n            default:\n                return;\n        }\n    }\n    onProcessorMessage(event) {\n        var _a;\n        const data = event.data;\n        switch (data.message) {\n            case 'cpu':\n                (_a = this.delegate) === null || _a === void 0 ? void 0 : _a.onCPUWarning();\n                break;\n            case 'prepare-for-frames':\n                this.worker.postMessage(data);\n                break;\n            default:\n        }\n    }\n}\nexports.default = VoiceFocusWorkerBufferNode;\n"]},"metadata":{},"sourceType":"script"}