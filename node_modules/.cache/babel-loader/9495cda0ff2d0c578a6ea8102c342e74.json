{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * [[VideoTileState]] encapsulates the state of a [[VideoTile]]\n */\n\nclass VideoTileState {\n  constructor() {\n    /**\n     * The unique identifier for the [[VideoTile]] managed by [[VideoTileController]]. Each attendee can have at most one tileId.\n     */\n    this.tileId = null;\n    /**\n     * Indication of whether tile is associated with local video.\n     */\n\n    this.localTile = false;\n    /**\n     * Indication of whether the tile associated with the local attendee has started to play.\n     */\n\n    this.localTileStarted = false;\n    /**\n     * Indication of whether the tile has content-sharing video.\n     */\n\n    this.isContent = false;\n    /**\n     * Indication of whether the tile has active video stream.\n     */\n\n    this.active = false;\n    /**\n     * Indication of whether the tile has paused video stream.\n     */\n\n    this.paused = false;\n    /**\n     * Indication of whether the remote video is paused at publishing attendee. This field is not supported.\n     */\n\n    this.poorConnection = false;\n    /**\n     * The attendee id associated with the [[VideoTile]].\n     */\n\n    this.boundAttendeeId = null;\n    /**\n     * The user id associated with the [[VideoTile]].\n     */\n\n    this.boundExternalUserId = null;\n    /**\n     * The video stream bound with the [[VideoTile]].\n     */\n\n    this.boundVideoStream = null;\n    /**\n     * The HTMLVideoElement bound with the [[VideoTile]].\n     */\n\n    this.boundVideoElement = null;\n    /**\n     * The nameplate for the [[VideoTile]]. SDK users should use boundExternalUserId for user id instead of this field.\n     */\n\n    this.nameplate = null;\n    /**\n     * The intrinsic width of the video stream upon binding with the [[VideoTile]].\n     * Video stream intrinsic width could change and developers should use HTMLVideoElement listener for actual intrinsic width.\n     */\n\n    this.videoStreamContentWidth = null;\n    /**\n     * The intrinsic height of the video stream upon binding with the [[VideoTile]]\n     * Video stream intrinsic height could change and developers should use HTMLVideoElement listener for actual intrinsic height.\n     */\n\n    this.videoStreamContentHeight = null;\n    /**\n     * The CSS width in pixel of the HTMLVideoElement upon binding with the [[VideoTile]].\n     */\n\n    this.videoElementCSSWidthPixels = null;\n    /**\n     * The CSS height in pixel of the HTMLVideoElement upon binding with the [[VideoTile]].\n     */\n\n    this.videoElementCSSHeightPixels = null;\n    /**\n     * The device pixel ratio of the current display monitor.\n     */\n\n    this.devicePixelRatio = 0;\n    /**\n     * The physical width in pixel of the HTMLVideoElement upon binding with the [[VideoTile]].\n     */\n\n    this.videoElementPhysicalWidthPixels = null;\n    /**\n     * The physical height in pixel of the HTMLVideoElement upon binding with the [[VideoTile]].\n     */\n\n    this.videoElementPhysicalHeightPixels = null;\n    /**\n     * The unique identifier published by server to associate with bound video stream. It is defined in [[SignalingProtocol.proto]].\n     * Developers should avoid using this field directly.\n     */\n\n    this.streamId = null;\n  }\n\n  clone() {\n    const cloned = new VideoTileState();\n    cloned.tileId = this.tileId;\n    cloned.localTile = this.localTile;\n    cloned.isContent = this.isContent;\n    cloned.active = this.active;\n    cloned.paused = this.paused;\n    cloned.poorConnection = this.poorConnection;\n    cloned.boundAttendeeId = this.boundAttendeeId;\n    cloned.boundExternalUserId = this.boundExternalUserId;\n    cloned.boundVideoStream = this.boundVideoStream;\n    cloned.boundVideoElement = this.boundVideoElement;\n    cloned.nameplate = this.nameplate;\n    cloned.videoStreamContentWidth = this.videoStreamContentWidth;\n    cloned.videoStreamContentHeight = this.videoStreamContentHeight;\n    cloned.videoElementCSSWidthPixels = this.videoElementCSSWidthPixels;\n    cloned.videoElementCSSHeightPixels = this.videoElementCSSHeightPixels;\n    cloned.devicePixelRatio = this.devicePixelRatio;\n    cloned.videoElementPhysicalWidthPixels = this.videoElementPhysicalWidthPixels;\n    cloned.videoElementPhysicalHeightPixels = this.videoElementPhysicalHeightPixels;\n    cloned.streamId = this.streamId;\n    return cloned;\n  }\n\n}\n\nexports.default = VideoTileState;","map":{"version":3,"sources":["../../src/videotile/VideoTileState.ts"],"names":[],"mappings":"cAAA;AACA;;;;;AAEA;;AAEG;;AACH,MAAqB,cAArB,CAAmC;AAAnC,EAAA,WAAA,GAAA;AACE;;AAEG;AACH,SAAA,MAAA,GAAwB,IAAxB;AAEA;;AAEG;;AACH,SAAA,SAAA,GAAqB,KAArB;AAEA;;AAEG;;AACH,SAAA,gBAAA,GAA4B,KAA5B;AAEA;;AAEG;;AACH,SAAA,SAAA,GAAqB,KAArB;AAEA;;AAEG;;AACH,SAAA,MAAA,GAAkB,KAAlB;AAEA;;AAEG;;AACH,SAAA,MAAA,GAAkB,KAAlB;AAEA;;AAEG;;AACH,SAAA,cAAA,GAA0B,KAA1B;AAEA;;AAEG;;AACH,SAAA,eAAA,GAAiC,IAAjC;AAEA;;AAEG;;AACH,SAAA,mBAAA,GAAqC,IAArC;AAEA;;AAEG;;AACH,SAAA,gBAAA,GAAuC,IAAvC;AAEA;;AAEG;;AACH,SAAA,iBAAA,GAA6C,IAA7C;AAEA;;AAEG;;AACH,SAAA,SAAA,GAA2B,IAA3B;AAEA;;;AAGG;;AACH,SAAA,uBAAA,GAAyC,IAAzC;AAEA;;;AAGG;;AACH,SAAA,wBAAA,GAA0C,IAA1C;AAEA;;AAEG;;AACH,SAAA,0BAAA,GAA4C,IAA5C;AAEA;;AAEG;;AACH,SAAA,2BAAA,GAA6C,IAA7C;AAEA;;AAEG;;AACH,SAAA,gBAAA,GAA2B,CAA3B;AAEA;;AAEG;;AACH,SAAA,+BAAA,GAAiD,IAAjD;AAEA;;AAEG;;AACH,SAAA,gCAAA,GAAkD,IAAlD;AAEA;;;AAGG;;AACH,SAAA,QAAA,GAA0B,IAA1B;AAyBD;;AAvBC,EAAA,KAAK,GAAA;AACH,UAAM,MAAM,GAAG,IAAI,cAAJ,EAAf;AACA,IAAA,MAAM,CAAC,MAAP,GAAgB,KAAK,MAArB;AACA,IAAA,MAAM,CAAC,SAAP,GAAmB,KAAK,SAAxB;AACA,IAAA,MAAM,CAAC,SAAP,GAAmB,KAAK,SAAxB;AACA,IAAA,MAAM,CAAC,MAAP,GAAgB,KAAK,MAArB;AACA,IAAA,MAAM,CAAC,MAAP,GAAgB,KAAK,MAArB;AACA,IAAA,MAAM,CAAC,cAAP,GAAwB,KAAK,cAA7B;AACA,IAAA,MAAM,CAAC,eAAP,GAAyB,KAAK,eAA9B;AACA,IAAA,MAAM,CAAC,mBAAP,GAA6B,KAAK,mBAAlC;AACA,IAAA,MAAM,CAAC,gBAAP,GAA0B,KAAK,gBAA/B;AACA,IAAA,MAAM,CAAC,iBAAP,GAA2B,KAAK,iBAAhC;AACA,IAAA,MAAM,CAAC,SAAP,GAAmB,KAAK,SAAxB;AACA,IAAA,MAAM,CAAC,uBAAP,GAAiC,KAAK,uBAAtC;AACA,IAAA,MAAM,CAAC,wBAAP,GAAkC,KAAK,wBAAvC;AACA,IAAA,MAAM,CAAC,0BAAP,GAAoC,KAAK,0BAAzC;AACA,IAAA,MAAM,CAAC,2BAAP,GAAqC,KAAK,2BAA1C;AACA,IAAA,MAAM,CAAC,gBAAP,GAA0B,KAAK,gBAA/B;AACA,IAAA,MAAM,CAAC,+BAAP,GAAyC,KAAK,+BAA9C;AACA,IAAA,MAAM,CAAC,gCAAP,GAA0C,KAAK,gCAA/C;AACA,IAAA,MAAM,CAAC,QAAP,GAAkB,KAAK,QAAvB;AACA,WAAO,MAAP;AACD;;AA9HgC;;AAAnC,OAAA,CAAA,OAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * [[VideoTileState]] encapsulates the state of a [[VideoTile]]\n */\nclass VideoTileState {\n    constructor() {\n        /**\n         * The unique identifier for the [[VideoTile]] managed by [[VideoTileController]]. Each attendee can have at most one tileId.\n         */\n        this.tileId = null;\n        /**\n         * Indication of whether tile is associated with local video.\n         */\n        this.localTile = false;\n        /**\n         * Indication of whether the tile associated with the local attendee has started to play.\n         */\n        this.localTileStarted = false;\n        /**\n         * Indication of whether the tile has content-sharing video.\n         */\n        this.isContent = false;\n        /**\n         * Indication of whether the tile has active video stream.\n         */\n        this.active = false;\n        /**\n         * Indication of whether the tile has paused video stream.\n         */\n        this.paused = false;\n        /**\n         * Indication of whether the remote video is paused at publishing attendee. This field is not supported.\n         */\n        this.poorConnection = false;\n        /**\n         * The attendee id associated with the [[VideoTile]].\n         */\n        this.boundAttendeeId = null;\n        /**\n         * The user id associated with the [[VideoTile]].\n         */\n        this.boundExternalUserId = null;\n        /**\n         * The video stream bound with the [[VideoTile]].\n         */\n        this.boundVideoStream = null;\n        /**\n         * The HTMLVideoElement bound with the [[VideoTile]].\n         */\n        this.boundVideoElement = null;\n        /**\n         * The nameplate for the [[VideoTile]]. SDK users should use boundExternalUserId for user id instead of this field.\n         */\n        this.nameplate = null;\n        /**\n         * The intrinsic width of the video stream upon binding with the [[VideoTile]].\n         * Video stream intrinsic width could change and developers should use HTMLVideoElement listener for actual intrinsic width.\n         */\n        this.videoStreamContentWidth = null;\n        /**\n         * The intrinsic height of the video stream upon binding with the [[VideoTile]]\n         * Video stream intrinsic height could change and developers should use HTMLVideoElement listener for actual intrinsic height.\n         */\n        this.videoStreamContentHeight = null;\n        /**\n         * The CSS width in pixel of the HTMLVideoElement upon binding with the [[VideoTile]].\n         */\n        this.videoElementCSSWidthPixels = null;\n        /**\n         * The CSS height in pixel of the HTMLVideoElement upon binding with the [[VideoTile]].\n         */\n        this.videoElementCSSHeightPixels = null;\n        /**\n         * The device pixel ratio of the current display monitor.\n         */\n        this.devicePixelRatio = 0;\n        /**\n         * The physical width in pixel of the HTMLVideoElement upon binding with the [[VideoTile]].\n         */\n        this.videoElementPhysicalWidthPixels = null;\n        /**\n         * The physical height in pixel of the HTMLVideoElement upon binding with the [[VideoTile]].\n         */\n        this.videoElementPhysicalHeightPixels = null;\n        /**\n         * The unique identifier published by server to associate with bound video stream. It is defined in [[SignalingProtocol.proto]].\n         * Developers should avoid using this field directly.\n         */\n        this.streamId = null;\n    }\n    clone() {\n        const cloned = new VideoTileState();\n        cloned.tileId = this.tileId;\n        cloned.localTile = this.localTile;\n        cloned.isContent = this.isContent;\n        cloned.active = this.active;\n        cloned.paused = this.paused;\n        cloned.poorConnection = this.poorConnection;\n        cloned.boundAttendeeId = this.boundAttendeeId;\n        cloned.boundExternalUserId = this.boundExternalUserId;\n        cloned.boundVideoStream = this.boundVideoStream;\n        cloned.boundVideoElement = this.boundVideoElement;\n        cloned.nameplate = this.nameplate;\n        cloned.videoStreamContentWidth = this.videoStreamContentWidth;\n        cloned.videoStreamContentHeight = this.videoStreamContentHeight;\n        cloned.videoElementCSSWidthPixels = this.videoElementCSSWidthPixels;\n        cloned.videoElementCSSHeightPixels = this.videoElementCSSHeightPixels;\n        cloned.devicePixelRatio = this.devicePixelRatio;\n        cloned.videoElementPhysicalWidthPixels = this.videoElementPhysicalWidthPixels;\n        cloned.videoElementPhysicalHeightPixels = this.videoElementPhysicalHeightPixels;\n        cloned.streamId = this.streamId;\n        return cloned;\n    }\n}\nexports.default = VideoTileState;\n//# sourceMappingURL=VideoTileState.js.map"]},"metadata":{},"sourceType":"script"}