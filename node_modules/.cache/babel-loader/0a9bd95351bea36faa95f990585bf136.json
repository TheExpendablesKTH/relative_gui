{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass DefaultVolumeIndicatorAdapter {\n  constructor(logger, realtimeController, minVolumeDecibels, maxVolumeDecibels) {\n    this.logger = logger;\n    this.realtimeController = realtimeController;\n    this.minVolumeDecibels = minVolumeDecibels;\n    this.maxVolumeDecibels = maxVolumeDecibels;\n    this.streamIdToAttendeeId = {};\n    this.streamIdToExternalUserId = {};\n    this.warnedAboutMissingStreamIdMapping = {};\n    this.attendeeIdToStreamId = {};\n    this.sessionReconnected = false;\n  }\n\n  onReconnect() {\n    this.sessionReconnected = true;\n  }\n\n  sendRealtimeUpdatesForAudioStreamIdInfo(info) {\n    let streamIndex = 0;\n\n    for (const stream of info.streams) {\n      const hasAttendeeId = !!stream.attendeeId;\n      const hasExternalUserId = !!stream.externalUserId;\n      const hasMuted = stream.hasOwnProperty('muted');\n      const hasDropped = !!stream.dropped;\n\n      if (hasAttendeeId) {\n        if (!!this.attendeeIdToStreamId[stream.attendeeId] && this.attendeeIdToStreamId[stream.attendeeId] < stream.audioStreamId) {\n          delete this.attendeeIdToStreamId[stream.attendeeId];\n        }\n\n        this.streamIdToAttendeeId[stream.audioStreamId] = stream.attendeeId;\n        const externalUserId = hasExternalUserId ? stream.externalUserId : stream.attendeeId;\n        this.streamIdToExternalUserId[stream.audioStreamId] = externalUserId;\n        this.attendeeIdToStreamId[stream.attendeeId] = stream.audioStreamId;\n        this.realtimeController.realtimeSetAttendeeIdPresence(stream.attendeeId, true, externalUserId, false, {\n          attendeeIndex: streamIndex++,\n          attendeesInFrame: info.streams.length\n        });\n      }\n\n      if (hasMuted) {\n        const attendeeId = this.streamIdToAttendeeId[stream.audioStreamId];\n        const externalUserId = this.streamIdToExternalUserId[stream.audioStreamId];\n        this.realtimeController.realtimeUpdateVolumeIndicator(attendeeId, null, stream.muted, null, externalUserId);\n      }\n\n      if (!hasAttendeeId && !hasMuted) {\n        const attendeeId = this.streamIdToAttendeeId[stream.audioStreamId];\n\n        if (attendeeId) {\n          const externalUserId = this.streamIdToExternalUserId[stream.audioStreamId];\n          delete this.streamIdToAttendeeId[stream.audioStreamId];\n          delete this.streamIdToExternalUserId[stream.audioStreamId];\n          delete this.warnedAboutMissingStreamIdMapping[stream.audioStreamId];\n\n          if (this.attendeeIdToStreamId[attendeeId] === stream.audioStreamId) {\n            delete this.attendeeIdToStreamId[attendeeId];\n          }\n\n          let attendeeHasNewStreamId = false;\n\n          for (const otherStreamId of Object.keys(this.streamIdToAttendeeId)) {\n            const otherStreamIdNumber = parseInt(otherStreamId);\n\n            if (otherStreamIdNumber > stream.audioStreamId && this.streamIdToAttendeeId[otherStreamIdNumber] === attendeeId) {\n              attendeeHasNewStreamId = true;\n              break;\n            }\n          }\n\n          if (!attendeeHasNewStreamId) {\n            this.realtimeController.realtimeSetAttendeeIdPresence(attendeeId, false, externalUserId, hasDropped, {\n              attendeeIndex: streamIndex++,\n              attendeesInFrame: info.streams.length\n            });\n          }\n        }\n      }\n    }\n\n    if (this.sessionReconnected) {\n      this.cleanUpState(info);\n      this.sessionReconnected = false;\n    }\n  }\n\n  cleanUpState(info) {\n    const localAttendeeIds = Object.values(this.streamIdToAttendeeId);\n    const remoteAttendeeIds = info.streams.map(stream => stream.attendeeId);\n    const deletedAttendeeIds = localAttendeeIds.filter(id => {\n      return !remoteAttendeeIds.includes(id);\n    });\n\n    for (const [index, deletedAttendeeId] of deletedAttendeeIds.entries()) {\n      const streamId = this.attendeeIdToStreamId[deletedAttendeeId];\n      const externalUserId = this.streamIdToExternalUserId[streamId];\n      delete this.streamIdToAttendeeId[streamId];\n      delete this.streamIdToExternalUserId[streamId];\n      delete this.warnedAboutMissingStreamIdMapping[streamId];\n      delete this.attendeeIdToStreamId[deletedAttendeeId]; // The reconnect event does not have information whether the attendee is dropped/left.\n      // Defaulting to attendee leaving the meeting\n\n      this.realtimeController.realtimeSetAttendeeIdPresence(deletedAttendeeId, false, externalUserId, false, {\n        attendeeIndex: index,\n        attendeesInFrame: deletedAttendeeId.length\n      });\n    }\n  }\n\n  sendRealtimeUpdatesForAudioMetadata(metadata) {\n    let volumes = null;\n    let signalStrengths = null;\n\n    for (const state of metadata.attendeeStates) {\n      const attendeeId = this.attendeeIdForStreamId(state.audioStreamId);\n\n      if (state.hasOwnProperty('volume')) {\n        if (volumes === null) {\n          volumes = {};\n        }\n\n        if (attendeeId !== null) {\n          // @ts-ignore: TODO fix this protobufjs issue\n          volumes[attendeeId] = this.normalizedVolume(state);\n        }\n      }\n\n      if (state.hasOwnProperty('signalStrength')) {\n        if (signalStrengths === null) {\n          signalStrengths = {};\n        }\n\n        if (attendeeId !== null) {\n          // @ts-ignore: TODO fix this protobufjs issue\n          signalStrengths[attendeeId] = this.normalizedSignalStrength(state);\n        }\n      }\n    }\n\n    this.applyRealtimeUpdatesForAudioMetadata(volumes, signalStrengths);\n  }\n\n  normalizedVolume(state) {\n    const dBVolume = -state.volume;\n    const normalized = 1.0 - (dBVolume - this.maxVolumeDecibels) / (this.minVolumeDecibels - this.maxVolumeDecibels);\n    const clipped = Math.min(Math.max(normalized, 0.0), 1.0);\n    return clipped;\n  }\n\n  normalizedSignalStrength(state) {\n    const normalized = state.signalStrength / DefaultVolumeIndicatorAdapter.MAX_SIGNAL_STRENGTH_LEVELS;\n    const clipped = Math.min(Math.max(normalized, 0.0), 1.0);\n    return clipped;\n  }\n\n  applyRealtimeUpdatesForAudioMetadata(volumes, signalStrengths) {\n    for (const streamId in this.streamIdToAttendeeId) {\n      const attendeeId = this.streamIdToAttendeeId[streamId];\n      const externalUserId = this.streamIdToExternalUserId[streamId];\n      let volumeUpdate = null;\n      let signalStrengthUpdate = null;\n\n      if (volumes !== null) {\n        if (volumes.hasOwnProperty(attendeeId)) {\n          volumeUpdate = volumes[attendeeId];\n        } else {\n          volumeUpdate = DefaultVolumeIndicatorAdapter.IMPLICIT_VOLUME;\n        }\n      }\n\n      if (signalStrengths !== null) {\n        if (signalStrengths.hasOwnProperty(attendeeId)) {\n          signalStrengthUpdate = signalStrengths[attendeeId];\n        } else {\n          signalStrengthUpdate = DefaultVolumeIndicatorAdapter.IMPLICIT_SIGNAL_STRENGTH;\n        }\n      }\n\n      if (volumeUpdate !== null || signalStrengthUpdate !== null) {\n        this.realtimeController.realtimeUpdateVolumeIndicator(attendeeId, volumeUpdate, null, signalStrengthUpdate, externalUserId);\n      }\n    }\n  }\n\n  attendeeIdForStreamId(streamId) {\n    if (streamId === 0) {\n      return null;\n    }\n\n    const attendeeId = this.streamIdToAttendeeId[streamId];\n\n    if (attendeeId) {\n      return attendeeId;\n    }\n\n    if (!this.warnedAboutMissingStreamIdMapping[streamId]) {\n      this.warnedAboutMissingStreamIdMapping[streamId] = true;\n      this.logger.warn(`volume indicator stream id ${streamId} seen before being defined`);\n    }\n\n    return null;\n  }\n\n}\n\nexports.default = DefaultVolumeIndicatorAdapter;\nDefaultVolumeIndicatorAdapter.MAX_SIGNAL_STRENGTH_LEVELS = 2;\nDefaultVolumeIndicatorAdapter.IMPLICIT_VOLUME = 0;\nDefaultVolumeIndicatorAdapter.IMPLICIT_SIGNAL_STRENGTH = 1;","map":{"version":3,"sources":["../../src/volumeindicatoradapter/DefaultVolumeIndicatorAdapter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass DefaultVolumeIndicatorAdapter {\n    constructor(logger, realtimeController, minVolumeDecibels, maxVolumeDecibels) {\n        this.logger = logger;\n        this.realtimeController = realtimeController;\n        this.minVolumeDecibels = minVolumeDecibels;\n        this.maxVolumeDecibels = maxVolumeDecibels;\n        this.streamIdToAttendeeId = {};\n        this.streamIdToExternalUserId = {};\n        this.warnedAboutMissingStreamIdMapping = {};\n        this.attendeeIdToStreamId = {};\n        this.sessionReconnected = false;\n    }\n    onReconnect() {\n        this.sessionReconnected = true;\n    }\n    sendRealtimeUpdatesForAudioStreamIdInfo(info) {\n        let streamIndex = 0;\n        for (const stream of info.streams) {\n            const hasAttendeeId = !!stream.attendeeId;\n            const hasExternalUserId = !!stream.externalUserId;\n            const hasMuted = stream.hasOwnProperty('muted');\n            const hasDropped = !!stream.dropped;\n            if (hasAttendeeId) {\n                if (!!this.attendeeIdToStreamId[stream.attendeeId] &&\n                    this.attendeeIdToStreamId[stream.attendeeId] < stream.audioStreamId) {\n                    delete this.attendeeIdToStreamId[stream.attendeeId];\n                }\n                this.streamIdToAttendeeId[stream.audioStreamId] = stream.attendeeId;\n                const externalUserId = hasExternalUserId ? stream.externalUserId : stream.attendeeId;\n                this.streamIdToExternalUserId[stream.audioStreamId] = externalUserId;\n                this.attendeeIdToStreamId[stream.attendeeId] = stream.audioStreamId;\n                this.realtimeController.realtimeSetAttendeeIdPresence(stream.attendeeId, true, externalUserId, false, { attendeeIndex: streamIndex++, attendeesInFrame: info.streams.length });\n            }\n            if (hasMuted) {\n                const attendeeId = this.streamIdToAttendeeId[stream.audioStreamId];\n                const externalUserId = this.streamIdToExternalUserId[stream.audioStreamId];\n                this.realtimeController.realtimeUpdateVolumeIndicator(attendeeId, null, stream.muted, null, externalUserId);\n            }\n            if (!hasAttendeeId && !hasMuted) {\n                const attendeeId = this.streamIdToAttendeeId[stream.audioStreamId];\n                if (attendeeId) {\n                    const externalUserId = this.streamIdToExternalUserId[stream.audioStreamId];\n                    delete this.streamIdToAttendeeId[stream.audioStreamId];\n                    delete this.streamIdToExternalUserId[stream.audioStreamId];\n                    delete this.warnedAboutMissingStreamIdMapping[stream.audioStreamId];\n                    if (this.attendeeIdToStreamId[attendeeId] === stream.audioStreamId) {\n                        delete this.attendeeIdToStreamId[attendeeId];\n                    }\n                    let attendeeHasNewStreamId = false;\n                    for (const otherStreamId of Object.keys(this.streamIdToAttendeeId)) {\n                        const otherStreamIdNumber = parseInt(otherStreamId);\n                        if (otherStreamIdNumber > stream.audioStreamId &&\n                            this.streamIdToAttendeeId[otherStreamIdNumber] === attendeeId) {\n                            attendeeHasNewStreamId = true;\n                            break;\n                        }\n                    }\n                    if (!attendeeHasNewStreamId) {\n                        this.realtimeController.realtimeSetAttendeeIdPresence(attendeeId, false, externalUserId, hasDropped, { attendeeIndex: streamIndex++, attendeesInFrame: info.streams.length });\n                    }\n                }\n            }\n        }\n        if (this.sessionReconnected) {\n            this.cleanUpState(info);\n            this.sessionReconnected = false;\n        }\n    }\n    cleanUpState(info) {\n        const localAttendeeIds = Object.values(this.streamIdToAttendeeId);\n        const remoteAttendeeIds = info.streams.map(stream => stream.attendeeId);\n        const deletedAttendeeIds = localAttendeeIds.filter(id => {\n            return !remoteAttendeeIds.includes(id);\n        });\n        for (const [index, deletedAttendeeId] of deletedAttendeeIds.entries()) {\n            const streamId = this.attendeeIdToStreamId[deletedAttendeeId];\n            const externalUserId = this.streamIdToExternalUserId[streamId];\n            delete this.streamIdToAttendeeId[streamId];\n            delete this.streamIdToExternalUserId[streamId];\n            delete this.warnedAboutMissingStreamIdMapping[streamId];\n            delete this.attendeeIdToStreamId[deletedAttendeeId];\n            // The reconnect event does not have information whether the attendee is dropped/left.\n            // Defaulting to attendee leaving the meeting\n            this.realtimeController.realtimeSetAttendeeIdPresence(deletedAttendeeId, false, externalUserId, false, { attendeeIndex: index, attendeesInFrame: deletedAttendeeId.length });\n        }\n    }\n    sendRealtimeUpdatesForAudioMetadata(metadata) {\n        let volumes = null;\n        let signalStrengths = null;\n        for (const state of metadata.attendeeStates) {\n            const attendeeId = this.attendeeIdForStreamId(state.audioStreamId);\n            if (state.hasOwnProperty('volume')) {\n                if (volumes === null) {\n                    volumes = {};\n                }\n                if (attendeeId !== null) {\n                    // @ts-ignore: TODO fix this protobufjs issue\n                    volumes[attendeeId] = this.normalizedVolume(state);\n                }\n            }\n            if (state.hasOwnProperty('signalStrength')) {\n                if (signalStrengths === null) {\n                    signalStrengths = {};\n                }\n                if (attendeeId !== null) {\n                    // @ts-ignore: TODO fix this protobufjs issue\n                    signalStrengths[attendeeId] = this.normalizedSignalStrength(state);\n                }\n            }\n        }\n        this.applyRealtimeUpdatesForAudioMetadata(volumes, signalStrengths);\n    }\n    normalizedVolume(state) {\n        const dBVolume = -state.volume;\n        const normalized = 1.0 - (dBVolume - this.maxVolumeDecibels) / (this.minVolumeDecibels - this.maxVolumeDecibels);\n        const clipped = Math.min(Math.max(normalized, 0.0), 1.0);\n        return clipped;\n    }\n    normalizedSignalStrength(state) {\n        const normalized = state.signalStrength / DefaultVolumeIndicatorAdapter.MAX_SIGNAL_STRENGTH_LEVELS;\n        const clipped = Math.min(Math.max(normalized, 0.0), 1.0);\n        return clipped;\n    }\n    applyRealtimeUpdatesForAudioMetadata(volumes, signalStrengths) {\n        for (const streamId in this.streamIdToAttendeeId) {\n            const attendeeId = this.streamIdToAttendeeId[streamId];\n            const externalUserId = this.streamIdToExternalUserId[streamId];\n            let volumeUpdate = null;\n            let signalStrengthUpdate = null;\n            if (volumes !== null) {\n                if (volumes.hasOwnProperty(attendeeId)) {\n                    volumeUpdate = volumes[attendeeId];\n                }\n                else {\n                    volumeUpdate = DefaultVolumeIndicatorAdapter.IMPLICIT_VOLUME;\n                }\n            }\n            if (signalStrengths !== null) {\n                if (signalStrengths.hasOwnProperty(attendeeId)) {\n                    signalStrengthUpdate = signalStrengths[attendeeId];\n                }\n                else {\n                    signalStrengthUpdate = DefaultVolumeIndicatorAdapter.IMPLICIT_SIGNAL_STRENGTH;\n                }\n            }\n            if (volumeUpdate !== null || signalStrengthUpdate !== null) {\n                this.realtimeController.realtimeUpdateVolumeIndicator(attendeeId, volumeUpdate, null, signalStrengthUpdate, externalUserId);\n            }\n        }\n    }\n    attendeeIdForStreamId(streamId) {\n        if (streamId === 0) {\n            return null;\n        }\n        const attendeeId = this.streamIdToAttendeeId[streamId];\n        if (attendeeId) {\n            return attendeeId;\n        }\n        if (!this.warnedAboutMissingStreamIdMapping[streamId]) {\n            this.warnedAboutMissingStreamIdMapping[streamId] = true;\n            this.logger.warn(`volume indicator stream id ${streamId} seen before being defined`);\n        }\n        return null;\n    }\n}\nexports.default = DefaultVolumeIndicatorAdapter;\nDefaultVolumeIndicatorAdapter.MAX_SIGNAL_STRENGTH_LEVELS = 2;\nDefaultVolumeIndicatorAdapter.IMPLICIT_VOLUME = 0;\nDefaultVolumeIndicatorAdapter.IMPLICIT_SIGNAL_STRENGTH = 1;\n//# sourceMappingURL=DefaultVolumeIndicatorAdapter.js.map"]},"metadata":{},"sourceType":"script"}