{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[SetLocalDescriptionTask]] asynchronously calls [[setLocalDescription]] on peer connection.\n */\n\n\nclass SetLocalDescriptionTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'SetLocalDescriptionTask';\n  }\n\n  cancel() {\n    // Just in case. The baseCancel behavior should prevent this.\n\n    /* istanbul ignore else */\n    if (this.cancelPromise) {\n      const error = new Error(`canceling ${this.name()}`);\n      this.cancelPromise(error);\n      delete this.cancelPromise;\n    }\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const peer = this.context.peer;\n      const sdpOffer = this.context.sdpOfferInit;\n      this.logger.debug(() => {\n        return `local description is >>>${sdpOffer.sdp}<<<`;\n      });\n      yield new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n        this.cancelPromise = error => {\n          reject(error);\n        };\n\n        try {\n          yield peer.setLocalDescription(sdpOffer);\n          resolve();\n        } catch (error) {\n          reject(error);\n        } finally {\n          delete this.cancelPromise;\n        }\n      }));\n      this.context.logger.info('set local description');\n    });\n  }\n\n}\n\nexports.default = SetLocalDescriptionTask;","map":{"version":3,"sources":["../../src/task/SetLocalDescriptionTask.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;AAEG;;;AACH,MAAqB,uBAArB,SAAqD,UAAA,CAAA,OAArD,CAA6D;AAK3D,EAAA,WAAA,CAAoB,OAApB,EAAsD;AACpD,UAAM,OAAO,CAAC,MAAd;AADkB,SAAA,OAAA,GAAA,OAAA;AAJV,SAAA,QAAA,GAAW,yBAAX;AAMT;;AAED,EAAA,MAAM,GAAA;AACJ;;AACA;AACA,QAAI,KAAK,aAAT,EAAwB;AACtB,YAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,aAAa,KAAK,IAAL,EAAW,EAAlC,CAAd;AACA,WAAK,aAAL,CAAmB,KAAnB;AACA,aAAO,KAAK,aAAZ;AACD;AACF;;AAEK,EAAA,GAAG,GAAA;;AACP,YAAM,IAAI,GAAG,KAAK,OAAL,CAAa,IAA1B;AACA,YAAM,QAAQ,GAAG,KAAK,OAAL,CAAa,YAA9B;AACA,WAAK,MAAL,CAAY,KAAZ,CAAkB,MAAK;AACrB,eAAO,2BAA2B,QAAQ,CAAC,GAAG,KAA9C;AACD,OAFD;AAIA,YAAM,IAAI,OAAJ,CAAkB,CAAO,OAAP,EAAgB,MAAhB,KAA0B,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAChD,aAAK,aAAL,GAAsB,KAAD,IAAiB;AACpC,UAAA,MAAM,CAAC,KAAD,CAAN;AACD,SAFD;;AAIA,YAAI;AACF,gBAAM,IAAI,CAAC,mBAAL,CAAyB,QAAzB,CAAN;AACA,UAAA,OAAO;AACR,SAHD,CAGE,OAAO,KAAP,EAAc;AACd,UAAA,MAAM,CAAC,KAAD,CAAN;AACD,SALD,SAKU;AACR,iBAAO,KAAK,aAAZ;AACD;AACF,OAbiD,CAA5C,CAAN;AAeA,WAAK,OAAL,CAAa,MAAb,CAAoB,IAApB,CAAyB,uBAAzB;AACD,K;AAAA;;AA1C0D;;AAA7D,OAAA,CAAA,OAAA,GAAA,uBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[SetLocalDescriptionTask]] asynchronously calls [[setLocalDescription]] on peer connection.\n */\nclass SetLocalDescriptionTask extends BaseTask_1.default {\n    constructor(context) {\n        super(context.logger);\n        this.context = context;\n        this.taskName = 'SetLocalDescriptionTask';\n    }\n    cancel() {\n        // Just in case. The baseCancel behavior should prevent this.\n        /* istanbul ignore else */\n        if (this.cancelPromise) {\n            const error = new Error(`canceling ${this.name()}`);\n            this.cancelPromise(error);\n            delete this.cancelPromise;\n        }\n    }\n    run() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const peer = this.context.peer;\n            const sdpOffer = this.context.sdpOfferInit;\n            this.logger.debug(() => {\n                return `local description is >>>${sdpOffer.sdp}<<<`;\n            });\n            yield new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                this.cancelPromise = (error) => {\n                    reject(error);\n                };\n                try {\n                    yield peer.setLocalDescription(sdpOffer);\n                    resolve();\n                }\n                catch (error) {\n                    reject(error);\n                }\n                finally {\n                    delete this.cancelPromise;\n                }\n            }));\n            this.context.logger.info('set local description');\n        });\n    }\n}\nexports.default = SetLocalDescriptionTask;\n//# sourceMappingURL=SetLocalDescriptionTask.js.map"]},"metadata":{},"sourceType":"script"}