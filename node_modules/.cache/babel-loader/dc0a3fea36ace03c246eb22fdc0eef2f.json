{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ClientMetricReportDirection_1 = require(\"../clientmetricreport/ClientMetricReportDirection\");\n\nconst ClientMetricReportMediaType_1 = require(\"../clientmetricreport/ClientMetricReportMediaType\");\n\nconst DefaultClientMetricReport_1 = require(\"../clientmetricreport/DefaultClientMetricReport\");\n\nconst StreamMetricReport_1 = require(\"../clientmetricreport/StreamMetricReport\");\n\nconst Maybe_1 = require(\"../maybe/Maybe\");\n\nconst MeetingSessionLifecycleEvent_1 = require(\"../meetingsession/MeetingSessionLifecycleEvent\");\n\nconst MeetingSessionLifecycleEventCondition_1 = require(\"../meetingsession/MeetingSessionLifecycleEventCondition\");\n\nconst IntervalScheduler_1 = require(\"../scheduler/IntervalScheduler\");\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nconst AudioLogEvent_1 = require(\"./AudioLogEvent\");\n\nconst VideoLogEvent_1 = require(\"./VideoLogEvent\");\n\nclass DefaultStatsCollector {\n  constructor(audioVideoController, logger, browserBehavior, interval = DefaultStatsCollector.INTERVAL_MS) {\n    this.audioVideoController = audioVideoController;\n    this.logger = logger;\n    this.browserBehavior = browserBehavior;\n    this.interval = interval;\n    this.intervalScheduler = null; // TODO: Implement metricsAddTime() and metricsLogEvent().\n\n    this.metricsAddTime = (_name, _duration, _attributes) => {};\n\n    this.metricsLogEvent = (_name, _attributes) => {};\n  } // TODO: Update toAttribute() and toSuffix() methods to convert raw data to a required type.\n\n\n  toAttribute(str) {\n    return this.toSuffix(str).substring(1);\n  }\n\n  toSuffix(str) {\n    if (str.toLowerCase() === str) {\n      // e.g. lower_case -> _lower_case\n      return `_${str}`;\n    } else if (str.toUpperCase() === str) {\n      // e.g. UPPER_CASE -> _upper_case\n      return `_${str.toLowerCase()}`;\n    } else {\n      // e.g. CamelCaseWithCAPS -> _camel_case_with_caps\n      return str.replace(/([A-Z][a-z]+)/g, function ($1) {\n        return `_${$1}`;\n      }).replace(/([A-Z][A-Z]+)/g, function ($1) {\n        return `_${$1}`;\n      }).toLowerCase();\n    }\n  }\n\n  logLatency(eventName, timeMs, attributes) {\n    const event = this.toSuffix(eventName);\n    this.logEventTime('meeting' + event, timeMs, attributes);\n  }\n\n  logStateTimeout(stateName, attributes) {\n    const state = this.toSuffix(stateName);\n    this.logEvent('meeting_session_state_timeout', Object.assign(Object.assign({}, attributes), {\n      state: `state${state}`\n    }));\n  }\n\n  logAudioEvent(eventName, attributes) {\n    const event = 'audio' + this.toSuffix(AudioLogEvent_1.default[eventName]);\n    this.logEvent(event, attributes);\n  }\n\n  logVideoEvent(eventName, attributes) {\n    const event = 'video' + this.toSuffix(VideoLogEvent_1.default[eventName]);\n    this.logEvent(event, attributes);\n  }\n\n  logEventTime(eventName, timeMs, attributes = {}) {\n    const finalAttributes = Object.assign(Object.assign({}, attributes), {\n      call_id: this.audioVideoController.configuration.meetingId,\n      client_type: DefaultStatsCollector.CLIENT_TYPE,\n      metric_type: 'latency'\n    });\n    this.logger.debug(() => {\n      return `[DefaultStatsCollector] ${eventName}: ${JSON.stringify(finalAttributes)}`;\n    });\n    this.metricsAddTime(eventName, timeMs, finalAttributes);\n  }\n\n  logMeetingSessionStatus(status) {\n    // TODO: Generate the status event name given the status code.\n    const statusEventName = `${status.statusCode()}`;\n    this.logEvent(statusEventName);\n    const statusAttribute = {\n      status: statusEventName,\n      status_code: `${status.statusCode()}`\n    };\n    this.logEvent('meeting_session_status', statusAttribute);\n\n    if (status.isTerminal()) {\n      this.logEvent('meeting_session_stopped', statusAttribute);\n    }\n\n    if (status.isAudioConnectionFailure()) {\n      this.logEvent('meeting_session_audio_failed', statusAttribute);\n    }\n\n    if (status.isFailure()) {\n      this.logEvent('meeting_session_failed', statusAttribute);\n    }\n  }\n\n  logLifecycleEvent(lifecycleEvent, condition) {\n    const attributes = {\n      lifecycle_event: `lifecycle${this.toSuffix(MeetingSessionLifecycleEvent_1.default[lifecycleEvent])}`,\n      lifecycle_event_code: `${lifecycleEvent}`,\n      lifecycle_event_condition: `condition${this.toSuffix(MeetingSessionLifecycleEventCondition_1.default[condition])}`,\n      lifecycle_event_condition_code: `${condition}`\n    };\n    this.logEvent('meeting_session_lifecycle', attributes);\n  }\n\n  logEvent(eventName, attributes = {}) {\n    const finalAttributes = Object.assign(Object.assign({}, attributes), {\n      call_id: this.audioVideoController.configuration.meetingId,\n      client_type: DefaultStatsCollector.CLIENT_TYPE\n    });\n    this.logger.debug(() => {\n      return `[DefaultStatsCollector] ${eventName}: ${JSON.stringify(finalAttributes)}`;\n    });\n    this.metricsLogEvent(eventName, finalAttributes);\n  }\n  /**\n   * WEBRTC METRICS COLLECTION.\n   */\n\n\n  start(signalingClient, videoStreamIndex, clientMetricReport) {\n    if (this.intervalScheduler) {\n      return false;\n    }\n\n    this.logger.info('Starting DefaultStatsCollector');\n    this.signalingClient = signalingClient;\n    this.videoStreamIndex = videoStreamIndex;\n\n    if (clientMetricReport) {\n      this.clientMetricReport = clientMetricReport;\n    } else {\n      this.clientMetricReport = new DefaultClientMetricReport_1.default(this.logger);\n    }\n\n    this.intervalScheduler = new IntervalScheduler_1.default(this.interval);\n    this.intervalScheduler.start(() => {\n      this.getStatsWrapper();\n    });\n    return true;\n  }\n\n  stop() {\n    this.logger.info('Stopping DefaultStatsCollector');\n\n    if (this.intervalScheduler) {\n      this.intervalScheduler.stop();\n    }\n\n    this.intervalScheduler = null;\n  }\n  /**\n   * Convert raw metrics to client metric report.\n   */\n\n\n  updateMetricValues(rawMetricReport, isStream) {\n    const metricReport = isStream ? this.clientMetricReport.streamMetricReports[Number(rawMetricReport.ssrc)] : this.clientMetricReport.globalMetricReport;\n    let metricMap;\n\n    if (isStream) {\n      metricMap = this.clientMetricReport.getMetricMap(metricReport.mediaType, metricReport.direction);\n    } else {\n      metricMap = this.clientMetricReport.getMetricMap();\n    }\n\n    for (const rawMetric in rawMetricReport) {\n      if (rawMetric in metricMap) {\n        metricReport.previousMetrics[rawMetric] = metricReport.currentMetrics[rawMetric];\n        metricReport.currentMetrics[rawMetric] = rawMetricReport[rawMetric];\n      }\n    }\n  }\n\n  processRawMetricReports(rawMetricReports) {\n    this.clientMetricReport.currentSsrcs = {};\n    const timeStamp = Date.now();\n\n    for (const rawMetricReport of rawMetricReports) {\n      const isStream = this.isStreamRawMetricReport(rawMetricReport.type);\n\n      if (isStream) {\n        if (!this.clientMetricReport.streamMetricReports[Number(rawMetricReport.ssrc)]) {\n          const streamMetricReport = new StreamMetricReport_1.default();\n          streamMetricReport.mediaType = this.getMediaType(rawMetricReport);\n          streamMetricReport.direction = this.getDirectionType(rawMetricReport);\n\n          if (!this.videoStreamIndex.allStreams().empty()) {\n            streamMetricReport.streamId = this.videoStreamIndex.streamIdForSSRC(Number(rawMetricReport.ssrc));\n          }\n\n          this.clientMetricReport.streamMetricReports[Number(rawMetricReport.ssrc)] = streamMetricReport;\n        }\n\n        this.clientMetricReport.currentSsrcs[Number(rawMetricReport.ssrc)] = 1;\n      }\n\n      this.updateMetricValues(rawMetricReport, isStream);\n    }\n\n    this.clientMetricReport.removeDestroyedSsrcs();\n    this.clientMetricReport.previousTimestampMs = this.clientMetricReport.currentTimestampMs;\n    this.clientMetricReport.currentTimestampMs = timeStamp;\n    this.clientMetricReport.print();\n  }\n  /**\n   * Protobuf packaging.\n   */\n\n\n  addMetricFrame(metricName, clientMetricFrame, metricSpec, ssrc) {\n    const type = metricSpec.type;\n    const transform = metricSpec.transform;\n    const sourceMetric = metricSpec.source;\n    const streamMetricFramesLength = clientMetricFrame.streamMetricFrames.length;\n    const latestStreamMetricFrame = clientMetricFrame.streamMetricFrames[streamMetricFramesLength - 1];\n\n    if (type) {\n      const metricFrame = SignalingProtocol_js_1.SdkMetric.create();\n      metricFrame.type = type;\n      metricFrame.value = sourceMetric ? transform(sourceMetric, ssrc) : transform(metricName, ssrc);\n      ssrc ? latestStreamMetricFrame.metrics.push(metricFrame) : clientMetricFrame.globalMetrics.push(metricFrame);\n    }\n  }\n\n  addGlobalMetricsToProtobuf(clientMetricFrame) {\n    const metricMap = this.clientMetricReport.getMetricMap();\n\n    for (const metricName in this.clientMetricReport.globalMetricReport.currentMetrics) {\n      this.addMetricFrame(metricName, clientMetricFrame, metricMap[metricName]);\n    }\n  }\n\n  addStreamMetricsToProtobuf(clientMetricFrame) {\n    for (const ssrc in this.clientMetricReport.streamMetricReports) {\n      const streamMetricReport = this.clientMetricReport.streamMetricReports[ssrc];\n      const streamMetricFrame = SignalingProtocol_js_1.SdkStreamMetricFrame.create();\n      streamMetricFrame.streamId = streamMetricReport.streamId;\n      streamMetricFrame.metrics = [];\n      clientMetricFrame.streamMetricFrames.push(streamMetricFrame);\n      const metricMap = this.clientMetricReport.getMetricMap(streamMetricReport.mediaType, streamMetricReport.direction);\n\n      for (const metricName in streamMetricReport.currentMetrics) {\n        this.addMetricFrame(metricName, clientMetricFrame, metricMap[metricName], Number(ssrc));\n      }\n    }\n  }\n\n  makeClientMetricProtobuf() {\n    const clientMetricFrame = SignalingProtocol_js_1.SdkClientMetricFrame.create();\n    clientMetricFrame.globalMetrics = [];\n    clientMetricFrame.streamMetricFrames = [];\n    this.addGlobalMetricsToProtobuf(clientMetricFrame);\n    this.addStreamMetricsToProtobuf(clientMetricFrame);\n    return clientMetricFrame;\n  }\n\n  sendClientMetricProtobuf(clientMetricFrame) {\n    this.signalingClient.sendClientMetrics(clientMetricFrame);\n  }\n  /**\n   * Helper functions.\n   */\n\n\n  isStreamRawMetricReport(type) {\n    return type === 'ssrc' || type === 'inbound-rtp' || type === 'outbound-rtp';\n  }\n\n  getMediaType(rawMetricReport) {\n    return rawMetricReport.mediaType === 'audio' ? ClientMetricReportMediaType_1.default.AUDIO : ClientMetricReportMediaType_1.default.VIDEO;\n  }\n\n  getDirectionType(rawMetricReport) {\n    return rawMetricReport.id.toLowerCase().indexOf('send') !== -1 || rawMetricReport.id.toLowerCase().indexOf('outbound') !== -1 ? ClientMetricReportDirection_1.default.UPSTREAM : ClientMetricReportDirection_1.default.DOWNSTREAM;\n  }\n  /**\n   * Metric report filter.\n   */\n\n\n  isValidChromeRawMetric(rawMetricReport) {\n    return this.browserBehavior.hasChromiumWebRTC() && (rawMetricReport.type === 'ssrc' || rawMetricReport.type === 'VideoBwe' || rawMetricReport.type === 'googCandidatePair' && rawMetricReport.googWritable === 'true' && rawMetricReport.googReadable === 'true');\n  }\n\n  isValidStandardRawMetric(rawMetricReport) {\n    const valid = rawMetricReport.type === 'inbound-rtp' || rawMetricReport.type === 'outbound-rtp' || rawMetricReport.type === 'candidate-pair' && rawMetricReport.state === 'succeeded';\n\n    if (this.browserBehavior.hasFirefoxWebRTC()) {\n      if (this.compareMajorVersion(DefaultStatsCollector.FIREFOX_UPDATED_GET_STATS_VERSION) === -1) {\n        return valid;\n      } else {\n        return valid && rawMetricReport.isRemote === false;\n      }\n    }\n\n    return valid;\n  }\n\n  isValidSsrc(rawMetricReport) {\n    let validSsrc = true;\n\n    if (this.isStreamRawMetricReport(rawMetricReport.type) && this.getDirectionType(rawMetricReport) === ClientMetricReportDirection_1.default.DOWNSTREAM && this.getMediaType(rawMetricReport) === ClientMetricReportMediaType_1.default.VIDEO) {\n      validSsrc = this.videoStreamIndex.streamIdForSSRC(Number(rawMetricReport.ssrc)) > 0;\n    }\n\n    return validSsrc;\n  }\n\n  isValidRawMetricReport(rawMetricReport) {\n    return (this.isValidChromeRawMetric(rawMetricReport) || this.isValidStandardRawMetric(rawMetricReport)) && this.isValidSsrc(rawMetricReport);\n  }\n\n  filterRawMetricReports(rawMetricReports) {\n    const filteredRawMetricReports = [];\n\n    for (const rawMetricReport of rawMetricReports) {\n      if (this.isValidRawMetricReport(rawMetricReport)) {\n        filteredRawMetricReports.push(rawMetricReport);\n      }\n    }\n\n    return filteredRawMetricReports;\n  }\n\n  handleRawMetricReports(rawMetricReports) {\n    const filteredRawMetricReports = this.filterRawMetricReports(rawMetricReports);\n    this.logger.debug(() => {\n      return `Filtered raw metrics : ${JSON.stringify(filteredRawMetricReports)}`;\n    });\n    this.processRawMetricReports(filteredRawMetricReports);\n    const clientMetricFrame = this.makeClientMetricProtobuf();\n    this.sendClientMetricProtobuf(clientMetricFrame);\n    this.audioVideoController.forEachObserver(observer => {\n      Maybe_1.default.of(observer.metricsDidReceive).map(f => f.bind(observer)(this.clientMetricReport.clone()));\n    });\n  }\n  /**\n   * Get raw webrtc metrics.\n   */\n\n\n  getStatsWrapper() {\n    if (!this.audioVideoController.rtcPeerConnection) {\n      return;\n    }\n\n    const rawMetricReports = [];\n\n    if (!this.browserBehavior.requiresPromiseBasedWebRTCGetStats()) {\n      // @ts-ignore\n      this.audioVideoController.rtcPeerConnection.getStats( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      res => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        res.result().forEach(report => {\n          const item = {};\n          report.names().forEach(name => {\n            item[name] = report.stat(name);\n          });\n          item.id = report.id;\n          item.type = report.type;\n          item.timestamp = report.timestamp;\n          rawMetricReports.push(item);\n        });\n        this.handleRawMetricReports(rawMetricReports);\n      }, // @ts-ignore\n      error => {\n        this.logger.error(error.message);\n      });\n    } else {\n      // @ts-ignore\n      this.audioVideoController.rtcPeerConnection.getStats().then(report => {\n        report.forEach(item => {\n          rawMetricReports.push(item);\n        });\n        this.handleRawMetricReports(rawMetricReports);\n      }).catch(error => {\n        this.logger.error(error.message);\n      });\n    }\n  }\n\n  compareMajorVersion(version) {\n    const currentMajorVersion = parseInt(this.browserBehavior.version().split('.')[0]);\n    const expectedMajorVersion = parseInt(version.split('.')[0]);\n\n    if (expectedMajorVersion === currentMajorVersion) {\n      return 0;\n    }\n\n    if (expectedMajorVersion > currentMajorVersion) {\n      return 1;\n    }\n\n    return -1;\n  }\n\n}\n\nexports.default = DefaultStatsCollector;\nDefaultStatsCollector.INTERVAL_MS = 1000;\nDefaultStatsCollector.FIREFOX_UPDATED_GET_STATS_VERSION = '66.0.0';\nDefaultStatsCollector.CLIENT_TYPE = 'amazon-chime-sdk-js';","map":{"version":3,"sources":["../../src/statscollector/DefaultStatsCollector.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ClientMetricReportDirection_1 = require(\"../clientmetricreport/ClientMetricReportDirection\");\nconst ClientMetricReportMediaType_1 = require(\"../clientmetricreport/ClientMetricReportMediaType\");\nconst DefaultClientMetricReport_1 = require(\"../clientmetricreport/DefaultClientMetricReport\");\nconst StreamMetricReport_1 = require(\"../clientmetricreport/StreamMetricReport\");\nconst Maybe_1 = require(\"../maybe/Maybe\");\nconst MeetingSessionLifecycleEvent_1 = require(\"../meetingsession/MeetingSessionLifecycleEvent\");\nconst MeetingSessionLifecycleEventCondition_1 = require(\"../meetingsession/MeetingSessionLifecycleEventCondition\");\nconst IntervalScheduler_1 = require(\"../scheduler/IntervalScheduler\");\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\nconst AudioLogEvent_1 = require(\"./AudioLogEvent\");\nconst VideoLogEvent_1 = require(\"./VideoLogEvent\");\nclass DefaultStatsCollector {\n    constructor(audioVideoController, logger, browserBehavior, interval = DefaultStatsCollector.INTERVAL_MS) {\n        this.audioVideoController = audioVideoController;\n        this.logger = logger;\n        this.browserBehavior = browserBehavior;\n        this.interval = interval;\n        this.intervalScheduler = null;\n        // TODO: Implement metricsAddTime() and metricsLogEvent().\n        this.metricsAddTime = (_name, _duration, _attributes) => { };\n        this.metricsLogEvent = (_name, _attributes) => { };\n    }\n    // TODO: Update toAttribute() and toSuffix() methods to convert raw data to a required type.\n    toAttribute(str) {\n        return this.toSuffix(str).substring(1);\n    }\n    toSuffix(str) {\n        if (str.toLowerCase() === str) {\n            // e.g. lower_case -> _lower_case\n            return `_${str}`;\n        }\n        else if (str.toUpperCase() === str) {\n            // e.g. UPPER_CASE -> _upper_case\n            return `_${str.toLowerCase()}`;\n        }\n        else {\n            // e.g. CamelCaseWithCAPS -> _camel_case_with_caps\n            return str\n                .replace(/([A-Z][a-z]+)/g, function ($1) {\n                return `_${$1}`;\n            })\n                .replace(/([A-Z][A-Z]+)/g, function ($1) {\n                return `_${$1}`;\n            })\n                .toLowerCase();\n        }\n    }\n    logLatency(eventName, timeMs, attributes) {\n        const event = this.toSuffix(eventName);\n        this.logEventTime('meeting' + event, timeMs, attributes);\n    }\n    logStateTimeout(stateName, attributes) {\n        const state = this.toSuffix(stateName);\n        this.logEvent('meeting_session_state_timeout', Object.assign(Object.assign({}, attributes), { state: `state${state}` }));\n    }\n    logAudioEvent(eventName, attributes) {\n        const event = 'audio' + this.toSuffix(AudioLogEvent_1.default[eventName]);\n        this.logEvent(event, attributes);\n    }\n    logVideoEvent(eventName, attributes) {\n        const event = 'video' + this.toSuffix(VideoLogEvent_1.default[eventName]);\n        this.logEvent(event, attributes);\n    }\n    logEventTime(eventName, timeMs, attributes = {}) {\n        const finalAttributes = Object.assign(Object.assign({}, attributes), { call_id: this.audioVideoController.configuration.meetingId, client_type: DefaultStatsCollector.CLIENT_TYPE, metric_type: 'latency' });\n        this.logger.debug(() => {\n            return `[DefaultStatsCollector] ${eventName}: ${JSON.stringify(finalAttributes)}`;\n        });\n        this.metricsAddTime(eventName, timeMs, finalAttributes);\n    }\n    logMeetingSessionStatus(status) {\n        // TODO: Generate the status event name given the status code.\n        const statusEventName = `${status.statusCode()}`;\n        this.logEvent(statusEventName);\n        const statusAttribute = {\n            status: statusEventName,\n            status_code: `${status.statusCode()}`,\n        };\n        this.logEvent('meeting_session_status', statusAttribute);\n        if (status.isTerminal()) {\n            this.logEvent('meeting_session_stopped', statusAttribute);\n        }\n        if (status.isAudioConnectionFailure()) {\n            this.logEvent('meeting_session_audio_failed', statusAttribute);\n        }\n        if (status.isFailure()) {\n            this.logEvent('meeting_session_failed', statusAttribute);\n        }\n    }\n    logLifecycleEvent(lifecycleEvent, condition) {\n        const attributes = {\n            lifecycle_event: `lifecycle${this.toSuffix(MeetingSessionLifecycleEvent_1.default[lifecycleEvent])}`,\n            lifecycle_event_code: `${lifecycleEvent}`,\n            lifecycle_event_condition: `condition${this.toSuffix(MeetingSessionLifecycleEventCondition_1.default[condition])}`,\n            lifecycle_event_condition_code: `${condition}`,\n        };\n        this.logEvent('meeting_session_lifecycle', attributes);\n    }\n    logEvent(eventName, attributes = {}) {\n        const finalAttributes = Object.assign(Object.assign({}, attributes), { call_id: this.audioVideoController.configuration.meetingId, client_type: DefaultStatsCollector.CLIENT_TYPE });\n        this.logger.debug(() => {\n            return `[DefaultStatsCollector] ${eventName}: ${JSON.stringify(finalAttributes)}`;\n        });\n        this.metricsLogEvent(eventName, finalAttributes);\n    }\n    /**\n     * WEBRTC METRICS COLLECTION.\n     */\n    start(signalingClient, videoStreamIndex, clientMetricReport) {\n        if (this.intervalScheduler) {\n            return false;\n        }\n        this.logger.info('Starting DefaultStatsCollector');\n        this.signalingClient = signalingClient;\n        this.videoStreamIndex = videoStreamIndex;\n        if (clientMetricReport) {\n            this.clientMetricReport = clientMetricReport;\n        }\n        else {\n            this.clientMetricReport = new DefaultClientMetricReport_1.default(this.logger);\n        }\n        this.intervalScheduler = new IntervalScheduler_1.default(this.interval);\n        this.intervalScheduler.start(() => {\n            this.getStatsWrapper();\n        });\n        return true;\n    }\n    stop() {\n        this.logger.info('Stopping DefaultStatsCollector');\n        if (this.intervalScheduler) {\n            this.intervalScheduler.stop();\n        }\n        this.intervalScheduler = null;\n    }\n    /**\n     * Convert raw metrics to client metric report.\n     */\n    updateMetricValues(rawMetricReport, isStream) {\n        const metricReport = isStream\n            ? this.clientMetricReport.streamMetricReports[Number(rawMetricReport.ssrc)]\n            : this.clientMetricReport.globalMetricReport;\n        let metricMap;\n        if (isStream) {\n            metricMap = this.clientMetricReport.getMetricMap(metricReport.mediaType, metricReport.direction);\n        }\n        else {\n            metricMap = this.clientMetricReport.getMetricMap();\n        }\n        for (const rawMetric in rawMetricReport) {\n            if (rawMetric in metricMap) {\n                metricReport.previousMetrics[rawMetric] = metricReport.currentMetrics[rawMetric];\n                metricReport.currentMetrics[rawMetric] = rawMetricReport[rawMetric];\n            }\n        }\n    }\n    processRawMetricReports(rawMetricReports) {\n        this.clientMetricReport.currentSsrcs = {};\n        const timeStamp = Date.now();\n        for (const rawMetricReport of rawMetricReports) {\n            const isStream = this.isStreamRawMetricReport(rawMetricReport.type);\n            if (isStream) {\n                if (!this.clientMetricReport.streamMetricReports[Number(rawMetricReport.ssrc)]) {\n                    const streamMetricReport = new StreamMetricReport_1.default();\n                    streamMetricReport.mediaType = this.getMediaType(rawMetricReport);\n                    streamMetricReport.direction = this.getDirectionType(rawMetricReport);\n                    if (!this.videoStreamIndex.allStreams().empty()) {\n                        streamMetricReport.streamId = this.videoStreamIndex.streamIdForSSRC(Number(rawMetricReport.ssrc));\n                    }\n                    this.clientMetricReport.streamMetricReports[Number(rawMetricReport.ssrc)] = streamMetricReport;\n                }\n                this.clientMetricReport.currentSsrcs[Number(rawMetricReport.ssrc)] = 1;\n            }\n            this.updateMetricValues(rawMetricReport, isStream);\n        }\n        this.clientMetricReport.removeDestroyedSsrcs();\n        this.clientMetricReport.previousTimestampMs = this.clientMetricReport.currentTimestampMs;\n        this.clientMetricReport.currentTimestampMs = timeStamp;\n        this.clientMetricReport.print();\n    }\n    /**\n     * Protobuf packaging.\n     */\n    addMetricFrame(metricName, clientMetricFrame, metricSpec, ssrc) {\n        const type = metricSpec.type;\n        const transform = metricSpec.transform;\n        const sourceMetric = metricSpec.source;\n        const streamMetricFramesLength = clientMetricFrame.streamMetricFrames.length;\n        const latestStreamMetricFrame = clientMetricFrame.streamMetricFrames[streamMetricFramesLength - 1];\n        if (type) {\n            const metricFrame = SignalingProtocol_js_1.SdkMetric.create();\n            metricFrame.type = type;\n            metricFrame.value = sourceMetric\n                ? transform(sourceMetric, ssrc)\n                : transform(metricName, ssrc);\n            ssrc\n                ? latestStreamMetricFrame.metrics.push(metricFrame)\n                : clientMetricFrame.globalMetrics.push(metricFrame);\n        }\n    }\n    addGlobalMetricsToProtobuf(clientMetricFrame) {\n        const metricMap = this.clientMetricReport.getMetricMap();\n        for (const metricName in this.clientMetricReport.globalMetricReport.currentMetrics) {\n            this.addMetricFrame(metricName, clientMetricFrame, metricMap[metricName]);\n        }\n    }\n    addStreamMetricsToProtobuf(clientMetricFrame) {\n        for (const ssrc in this.clientMetricReport.streamMetricReports) {\n            const streamMetricReport = this.clientMetricReport.streamMetricReports[ssrc];\n            const streamMetricFrame = SignalingProtocol_js_1.SdkStreamMetricFrame.create();\n            streamMetricFrame.streamId = streamMetricReport.streamId;\n            streamMetricFrame.metrics = [];\n            clientMetricFrame.streamMetricFrames.push(streamMetricFrame);\n            const metricMap = this.clientMetricReport.getMetricMap(streamMetricReport.mediaType, streamMetricReport.direction);\n            for (const metricName in streamMetricReport.currentMetrics) {\n                this.addMetricFrame(metricName, clientMetricFrame, metricMap[metricName], Number(ssrc));\n            }\n        }\n    }\n    makeClientMetricProtobuf() {\n        const clientMetricFrame = SignalingProtocol_js_1.SdkClientMetricFrame.create();\n        clientMetricFrame.globalMetrics = [];\n        clientMetricFrame.streamMetricFrames = [];\n        this.addGlobalMetricsToProtobuf(clientMetricFrame);\n        this.addStreamMetricsToProtobuf(clientMetricFrame);\n        return clientMetricFrame;\n    }\n    sendClientMetricProtobuf(clientMetricFrame) {\n        this.signalingClient.sendClientMetrics(clientMetricFrame);\n    }\n    /**\n     * Helper functions.\n     */\n    isStreamRawMetricReport(type) {\n        return type === 'ssrc' || type === 'inbound-rtp' || type === 'outbound-rtp';\n    }\n    getMediaType(rawMetricReport) {\n        return rawMetricReport.mediaType === 'audio' ? ClientMetricReportMediaType_1.default.AUDIO : ClientMetricReportMediaType_1.default.VIDEO;\n    }\n    getDirectionType(rawMetricReport) {\n        return rawMetricReport.id.toLowerCase().indexOf('send') !== -1 ||\n            rawMetricReport.id.toLowerCase().indexOf('outbound') !== -1\n            ? ClientMetricReportDirection_1.default.UPSTREAM\n            : ClientMetricReportDirection_1.default.DOWNSTREAM;\n    }\n    /**\n     * Metric report filter.\n     */\n    isValidChromeRawMetric(rawMetricReport) {\n        return (this.browserBehavior.hasChromiumWebRTC() &&\n            (rawMetricReport.type === 'ssrc' ||\n                rawMetricReport.type === 'VideoBwe' ||\n                (rawMetricReport.type === 'googCandidatePair' &&\n                    rawMetricReport.googWritable === 'true' &&\n                    rawMetricReport.googReadable === 'true')));\n    }\n    isValidStandardRawMetric(rawMetricReport) {\n        const valid = rawMetricReport.type === 'inbound-rtp' ||\n            rawMetricReport.type === 'outbound-rtp' ||\n            (rawMetricReport.type === 'candidate-pair' && rawMetricReport.state === 'succeeded');\n        if (this.browserBehavior.hasFirefoxWebRTC()) {\n            if (this.compareMajorVersion(DefaultStatsCollector.FIREFOX_UPDATED_GET_STATS_VERSION) === -1) {\n                return valid;\n            }\n            else {\n                return valid && rawMetricReport.isRemote === false;\n            }\n        }\n        return valid;\n    }\n    isValidSsrc(rawMetricReport) {\n        let validSsrc = true;\n        if (this.isStreamRawMetricReport(rawMetricReport.type) &&\n            this.getDirectionType(rawMetricReport) === ClientMetricReportDirection_1.default.DOWNSTREAM &&\n            this.getMediaType(rawMetricReport) === ClientMetricReportMediaType_1.default.VIDEO) {\n            validSsrc = this.videoStreamIndex.streamIdForSSRC(Number(rawMetricReport.ssrc)) > 0;\n        }\n        return validSsrc;\n    }\n    isValidRawMetricReport(rawMetricReport) {\n        return ((this.isValidChromeRawMetric(rawMetricReport) ||\n            this.isValidStandardRawMetric(rawMetricReport)) &&\n            this.isValidSsrc(rawMetricReport));\n    }\n    filterRawMetricReports(rawMetricReports) {\n        const filteredRawMetricReports = [];\n        for (const rawMetricReport of rawMetricReports) {\n            if (this.isValidRawMetricReport(rawMetricReport)) {\n                filteredRawMetricReports.push(rawMetricReport);\n            }\n        }\n        return filteredRawMetricReports;\n    }\n    handleRawMetricReports(rawMetricReports) {\n        const filteredRawMetricReports = this.filterRawMetricReports(rawMetricReports);\n        this.logger.debug(() => {\n            return `Filtered raw metrics : ${JSON.stringify(filteredRawMetricReports)}`;\n        });\n        this.processRawMetricReports(filteredRawMetricReports);\n        const clientMetricFrame = this.makeClientMetricProtobuf();\n        this.sendClientMetricProtobuf(clientMetricFrame);\n        this.audioVideoController.forEachObserver(observer => {\n            Maybe_1.default.of(observer.metricsDidReceive).map(f => f.bind(observer)(this.clientMetricReport.clone()));\n        });\n    }\n    /**\n     * Get raw webrtc metrics.\n     */\n    getStatsWrapper() {\n        if (!this.audioVideoController.rtcPeerConnection) {\n            return;\n        }\n        const rawMetricReports = [];\n        if (!this.browserBehavior.requiresPromiseBasedWebRTCGetStats()) {\n            // @ts-ignore\n            this.audioVideoController.rtcPeerConnection.getStats(\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (res) => {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                res.result().forEach((report) => {\n                    const item = {};\n                    report.names().forEach((name) => {\n                        item[name] = report.stat(name);\n                    });\n                    item.id = report.id;\n                    item.type = report.type;\n                    item.timestamp = report.timestamp;\n                    rawMetricReports.push(item);\n                });\n                this.handleRawMetricReports(rawMetricReports);\n            }, \n            // @ts-ignore\n            (error) => {\n                this.logger.error(error.message);\n            });\n        }\n        else {\n            // @ts-ignore\n            this.audioVideoController.rtcPeerConnection\n                .getStats()\n                .then((report) => {\n                report.forEach((item) => {\n                    rawMetricReports.push(item);\n                });\n                this.handleRawMetricReports(rawMetricReports);\n            })\n                .catch((error) => {\n                this.logger.error(error.message);\n            });\n        }\n    }\n    compareMajorVersion(version) {\n        const currentMajorVersion = parseInt(this.browserBehavior.version().split('.')[0]);\n        const expectedMajorVersion = parseInt(version.split('.')[0]);\n        if (expectedMajorVersion === currentMajorVersion) {\n            return 0;\n        }\n        if (expectedMajorVersion > currentMajorVersion) {\n            return 1;\n        }\n        return -1;\n    }\n}\nexports.default = DefaultStatsCollector;\nDefaultStatsCollector.INTERVAL_MS = 1000;\nDefaultStatsCollector.FIREFOX_UPDATED_GET_STATS_VERSION = '66.0.0';\nDefaultStatsCollector.CLIENT_TYPE = 'amazon-chime-sdk-js';\n//# sourceMappingURL=DefaultStatsCollector.js.map"]},"metadata":{},"sourceType":"script"}