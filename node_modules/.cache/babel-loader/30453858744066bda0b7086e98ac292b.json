{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst DefaultAudioMixController_1 = require(\"../audiomixcontroller/DefaultAudioMixController\");\n\nconst DefaultBrowserBehavior_1 = require(\"../browserbehavior/DefaultBrowserBehavior\");\n\nconst DefaultDeviceController_1 = require(\"../devicecontroller/DefaultDeviceController\");\n\nconst PermissionDeniedError_1 = require(\"../devicecontroller/PermissionDeniedError\");\n\nconst BaseTask_1 = require(\"../task/BaseTask\");\n\nconst TimeoutTask_1 = require(\"../task/TimeoutTask\");\n\nconst CheckAudioConnectivityFeedback_1 = require(\"./CheckAudioConnectivityFeedback\");\n\nconst CheckAudioInputFeedback_1 = require(\"./CheckAudioInputFeedback\");\n\nconst CheckAudioOutputFeedback_1 = require(\"./CheckAudioOutputFeedback\");\n\nconst CheckCameraResolutionFeedback_1 = require(\"./CheckCameraResolutionFeedback\");\n\nconst CheckContentShareConnectivityFeedback_1 = require(\"./CheckContentShareConnectivityFeedback\");\n\nconst CheckNetworkTCPConnectivityFeedback_1 = require(\"./CheckNetworkTCPConnectivityFeedback\");\n\nconst CheckNetworkUDPConnectivityFeedback_1 = require(\"./CheckNetworkUDPConnectivityFeedback\");\n\nconst CheckVideoConnectivityFeedback_1 = require(\"./CheckVideoConnectivityFeedback\");\n\nconst CheckVideoInputFeedback_1 = require(\"./CheckVideoInputFeedback\");\n\nconst MeetingReadinessCheckerConfiguration_1 = require(\"./MeetingReadinessCheckerConfiguration\");\n\nclass DefaultMeetingReadinessChecker {\n  constructor(logger, meetingSession, configuration = new MeetingReadinessCheckerConfiguration_1.default()) {\n    this.logger = logger;\n    this.meetingSession = meetingSession;\n    this.configuration = configuration;\n    this.browserBehavior = new DefaultBrowserBehavior_1.default();\n  }\n\n  static delay(timeoutMs) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise(resolve => setTimeout(resolve, timeoutMs));\n    });\n  }\n\n  checkAudioInput(audioInputDevice) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this.meetingSession.audioVideo.chooseAudioInputDevice(audioInputDevice);\n        yield this.meetingSession.audioVideo.chooseAudioInputDevice(null);\n        return CheckAudioInputFeedback_1.default.Succeeded;\n      } catch (error) {\n        this.logger.error(`MeetingReadinessChecker: Audio input check failed with error ${error}`);\n\n        if (error instanceof PermissionDeniedError_1.default) {\n          return CheckAudioInputFeedback_1.default.PermissionDenied;\n        }\n\n        return CheckAudioInputFeedback_1.default.Failed;\n      }\n    });\n  }\n\n  checkAudioOutput(audioOutputDeviceInfo, audioOutputVerificationCallback, audioElement = null) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const audioOutputDeviceId = audioOutputDeviceInfo ? DefaultDeviceController_1.default.getIntrinsicDeviceId(audioOutputDeviceInfo) : '';\n        yield this.playTone(audioOutputDeviceId, 440, audioElement);\n        const userFeedback = yield audioOutputVerificationCallback();\n\n        if (userFeedback) {\n          return CheckAudioOutputFeedback_1.default.Succeeded;\n        }\n\n        return CheckAudioOutputFeedback_1.default.Failed;\n      } catch (error) {\n        this.logger.error(`MeetingReadinessChecker: Audio output check failed with error: ${error}`);\n        return CheckAudioOutputFeedback_1.default.Failed;\n      } finally {\n        this.stopTone();\n      }\n    });\n  }\n\n  playTone(sinkId, frequency, audioElement) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const rampSec = 0.1;\n      const maxGainValue = 0.1;\n\n      if (this.oscillatorNode) {\n        this.stopTone();\n      }\n\n      this.audioContext = DefaultDeviceController_1.default.getAudioContext();\n      this.gainNode = this.audioContext.createGain();\n      this.gainNode.gain.value = 0;\n      this.oscillatorNode = this.audioContext.createOscillator();\n      this.oscillatorNode.frequency.value = frequency;\n      this.oscillatorNode.connect(this.gainNode);\n      this.destinationStream = this.audioContext.createMediaStreamDestination();\n      this.gainNode.connect(this.destinationStream);\n      const currentTime = this.audioContext.currentTime;\n      const startTime = currentTime + 0.1;\n      this.gainNode.gain.linearRampToValueAtTime(0, startTime);\n      this.gainNode.gain.linearRampToValueAtTime(maxGainValue, startTime + rampSec);\n      this.oscillatorNode.start(); // Because we always use `DefaultAudioMixController`, and both this class\n      // and DAMC use `DefaultBrowserBehavior`, it is not possible for the `bindAudioDevice` call here to throw.\n      // Nevertheless, we `catch` here and disable code coverage.\n\n      const audioMixController = new DefaultAudioMixController_1.default(this.logger);\n\n      try {\n        if (this.browserBehavior.supportsSetSinkId()) {\n          yield audioMixController.bindAudioDevice({\n            deviceId: sinkId\n          });\n        }\n      } catch (e) {\n        /* istanbul ignore next */\n        this.logger.error(`Failed to bind audio device: ${e}`);\n      }\n\n      try {\n        yield audioMixController.bindAudioElement(audioElement || new Audio());\n      } catch (e) {\n        this.logger.error(`Failed to bind audio element: ${e}`);\n      }\n\n      yield audioMixController.bindAudioStream(this.destinationStream.stream);\n    });\n  }\n\n  stopTone() {\n    if (!this.audioContext || !this.gainNode || !this.oscillatorNode || !this.destinationStream) {\n      return;\n    }\n\n    const durationSec = 1;\n    const rampSec = 0.1;\n    const maxGainValue = 0.1;\n    const currentTime = this.audioContext.currentTime;\n    this.gainNode.gain.linearRampToValueAtTime(maxGainValue, currentTime + rampSec + durationSec);\n    this.gainNode.gain.linearRampToValueAtTime(0, currentTime + rampSec * 2 + durationSec);\n    this.oscillatorNode.stop();\n    this.oscillatorNode.disconnect(this.gainNode);\n    this.gainNode.disconnect(this.destinationStream);\n    this.oscillatorNode = null;\n    this.gainNode = null;\n    this.destinationStream = null;\n  }\n\n  checkVideoInput(videoInputDevice) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield this.meetingSession.audioVideo.chooseVideoInputDevice(videoInputDevice);\n        yield this.meetingSession.audioVideo.chooseVideoInputDevice(null);\n        return CheckVideoInputFeedback_1.default.Succeeded;\n      } catch (error) {\n        this.logger.error(`MeetingReadinessChecker: Video check failed with error ${error}`);\n\n        if (error instanceof PermissionDeniedError_1.default) {\n          return CheckVideoInputFeedback_1.default.PermissionDenied;\n        }\n\n        return CheckVideoInputFeedback_1.default.Failed;\n      }\n    });\n  }\n\n  checkCameraResolution(videoInputDevice, width, height) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let stream;\n\n      try {\n        const videoInputDeviceId = DefaultDeviceController_1.default.getIntrinsicDeviceId(videoInputDevice);\n        const videoConstraint = {\n          video: this.calculateVideoConstraint(videoInputDeviceId, width, height)\n        };\n        stream = yield navigator.mediaDevices.getUserMedia(videoConstraint);\n      } catch (error) {\n        this.logger.error(`MeetingReadinessChecker: Camera resolution check with width: ${width} height ${height} failed with error ${error}`);\n\n        if (error && error.name === 'OverconstrainedError') {\n          return CheckCameraResolutionFeedback_1.default.ResolutionNotSupported;\n        }\n\n        if (error && error.name === 'NotAllowedError') {\n          return CheckCameraResolutionFeedback_1.default.PermissionDenied;\n        }\n\n        return CheckCameraResolutionFeedback_1.default.Failed;\n      } finally {\n        if (stream) {\n          stream.getTracks().forEach(function (track) {\n            track.stop();\n          });\n        }\n      }\n\n      return CheckCameraResolutionFeedback_1.default.Succeeded;\n    });\n  }\n\n  calculateVideoConstraint(videoInputDeviceId, width, height) {\n    const dimension = this.browserBehavior.requiresResolutionAlignment(width, height);\n    const trackConstraints = {};\n\n    if (this.browserBehavior.requiresNoExactMediaStreamConstraints()) {\n      trackConstraints.deviceId = videoInputDeviceId;\n      trackConstraints.width = width;\n      trackConstraints.height = height;\n    } else {\n      trackConstraints.deviceId = {\n        exact: videoInputDeviceId\n      };\n      trackConstraints.width = {\n        exact: dimension[0]\n      };\n      trackConstraints.height = {\n        exact: dimension[1]\n      };\n    }\n\n    return trackConstraints;\n  }\n\n  checkContentShareConnectivity(sourceId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let isContentShareStarted = false;\n      let isAudioVideoStarted = false;\n      const contentShareObserver = {\n        contentShareDidStart: () => {\n          isContentShareStarted = true;\n        }\n      };\n      const observer = {\n        audioVideoDidStart: () => {\n          isAudioVideoStarted = true;\n        }\n      };\n\n      try {\n        this.meetingSession.audioVideo.addObserver(observer);\n        this.meetingSession.audioVideo.start();\n        this.meetingSession.audioVideo.addContentShareObserver(contentShareObserver);\n        yield this.meetingSession.audioVideo.startContentShareFromScreenCapture(sourceId);\n        yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {\n          return isAudioVideoStarted && isContentShareStarted;\n        }));\n\n        if (!isAudioVideoStarted) {\n          return CheckContentShareConnectivityFeedback_1.default.ConnectionFailed;\n        }\n\n        yield this.stopMeeting();\n        return isContentShareStarted ? CheckContentShareConnectivityFeedback_1.default.Succeeded : CheckContentShareConnectivityFeedback_1.default.TimedOut;\n      } catch (error) {\n        this.logger.error(`MeetingReadinessChecker: Content share check failed with error ${error}`);\n\n        if (error.name === 'NotAllowedError') {\n          return CheckContentShareConnectivityFeedback_1.default.PermissionDenied;\n        } else {\n          return CheckContentShareConnectivityFeedback_1.default.Failed;\n        }\n      } finally {\n        this.meetingSession.audioVideo.removeObserver(observer);\n        this.meetingSession.audioVideo.stopContentShare();\n        this.meetingSession.audioVideo.removeContentShareObserver(contentShareObserver);\n      }\n    });\n  }\n\n  checkAudioConnectivity(audioInputDevice) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let audioPresence = false;\n      const audioVideo = this.meetingSession.audioVideo;\n\n      const attendeePresenceHandler = (attendeeId, present, _externalUserId, _dropped) => {\n        if (attendeeId === this.meetingSession.configuration.credentials.attendeeId && present) {\n          audioPresence = true;\n        }\n      };\n\n      try {\n        yield audioVideo.chooseAudioInputDevice(audioInputDevice);\n      } catch (error) {\n        this.logger.error(`MeetingReadinessChecker: Failed to get audio input device with error ${error}`);\n\n        if (error instanceof PermissionDeniedError_1.default) {\n          return CheckAudioConnectivityFeedback_1.default.AudioInputPermissionDenied;\n        }\n\n        return CheckAudioConnectivityFeedback_1.default.AudioInputRequestFailed;\n      }\n\n      audioVideo.realtimeSubscribeToAttendeeIdPresence(attendeePresenceHandler);\n\n      if (!(yield this.startMeeting())) {\n        audioVideo.realtimeUnsubscribeToAttendeeIdPresence(attendeePresenceHandler);\n\n        try {\n          yield this.meetingSession.audioVideo.chooseAudioInputDevice(null);\n        } catch (e) {\n          this.logger.error(`MeetingReadinessChecker: Failed to choose null device with error ${e}`);\n        }\n\n        return CheckAudioConnectivityFeedback_1.default.ConnectionFailed;\n      }\n\n      yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {\n        return audioPresence;\n      }));\n      audioVideo.realtimeUnsubscribeToAttendeeIdPresence(attendeePresenceHandler);\n      yield this.stopMeeting();\n\n      try {\n        yield this.meetingSession.audioVideo.chooseAudioInputDevice(null);\n      } catch (e) {\n        this.logger.error(`MeetingReadinessChecker: Failed to choose null device with error ${e}`);\n      }\n\n      return audioPresence ? CheckAudioConnectivityFeedback_1.default.Succeeded : CheckAudioConnectivityFeedback_1.default.AudioNotReceived;\n    });\n  }\n\n  checkVideoConnectivity(videoInputDevice) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const audioVideo = this.meetingSession.audioVideo;\n\n      try {\n        yield audioVideo.chooseVideoInputDevice(videoInputDevice);\n      } catch (error) {\n        this.logger.error(`MeetingReadinessChecker: Failed to get video input device with error ${error}`);\n\n        if (error instanceof PermissionDeniedError_1.default) {\n          return CheckVideoConnectivityFeedback_1.default.VideoInputPermissionDenied;\n        }\n\n        return CheckVideoConnectivityFeedback_1.default.VideoInputRequestFailed;\n      }\n\n      if (!(yield this.startMeeting())) {\n        return CheckVideoConnectivityFeedback_1.default.ConnectionFailed;\n      }\n\n      let packetsSent = 0;\n      audioVideo.startLocalVideoTile();\n      yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {\n        const rawStats = yield audioVideo.getRTCPeerConnectionStats();\n\n        if (rawStats) {\n          rawStats.forEach(report => {\n            if (report.type === 'outbound-rtp' && report.mediaType === 'video') {\n              packetsSent = report.packetsSent;\n            }\n          });\n        }\n\n        return packetsSent > 0;\n      }));\n      audioVideo.stopLocalVideoTile();\n      yield this.stopMeeting();\n\n      if (packetsSent <= 0) {\n        return CheckVideoConnectivityFeedback_1.default.VideoNotSent;\n      }\n\n      return CheckVideoConnectivityFeedback_1.default.Succeeded;\n    });\n  }\n\n  checkNetworkUDPConnectivity() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this.originalURLRewriter = this.meetingSession.configuration.urls.urlRewriter;\n      } catch (error) {\n        this.logger.error(`MeetingSessionConfiguration.urls doesn't exist. Error: ${error}`);\n        return CheckNetworkUDPConnectivityFeedback_1.default.MeetingSessionURLsNotInitialized;\n      }\n\n      this.meetingSession.configuration.urls.urlRewriter = uri => {\n        const transformedUri = this.originalURLRewriter(uri);\n\n        if (transformedUri.includes('transport=tcp')) {\n          return '';\n        }\n\n        return transformedUri;\n      };\n\n      const audioVideo = this.meetingSession.audioVideo;\n\n      if (!(yield this.startMeeting())) {\n        this.meetingSession.configuration.urls.urlRewriter = this.originalURLRewriter;\n        return CheckNetworkUDPConnectivityFeedback_1.default.ConnectionFailed;\n      }\n\n      let candidatePairSucceed = false;\n      yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {\n        const rawStats = yield audioVideo.getRTCPeerConnectionStats();\n\n        if (rawStats) {\n          rawStats.forEach(report => {\n            if (report.type === 'candidate-pair' && report.state === 'succeeded') {\n              candidatePairSucceed = true;\n            }\n          });\n        }\n\n        return candidatePairSucceed;\n      }));\n      this.meetingSession.configuration.urls.urlRewriter = this.originalURLRewriter;\n      yield this.stopMeeting();\n\n      if (!candidatePairSucceed) {\n        return CheckNetworkUDPConnectivityFeedback_1.default.ICENegotiationFailed;\n      }\n\n      return CheckNetworkUDPConnectivityFeedback_1.default.Succeeded;\n    });\n  }\n\n  checkNetworkTCPConnectivity() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        this.originalURLRewriter = this.meetingSession.configuration.urls.urlRewriter;\n      } catch (error) {\n        this.logger.error(`MeetingSessionConfiguration.urls doesn't exist. Error: ${error}`);\n        return CheckNetworkTCPConnectivityFeedback_1.default.MeetingSessionURLsNotInitialized;\n      }\n\n      this.meetingSession.configuration.urls.urlRewriter = uri => {\n        const transformedUri = this.originalURLRewriter(uri);\n\n        if (transformedUri.includes('transport=udp')) {\n          return '';\n        }\n\n        return transformedUri;\n      };\n\n      const audioVideo = this.meetingSession.audioVideo;\n\n      if (!(yield this.startMeeting())) {\n        this.meetingSession.configuration.urls.urlRewriter = this.originalURLRewriter;\n        return CheckNetworkTCPConnectivityFeedback_1.default.ConnectionFailed;\n      }\n\n      let candidatePairSucceed = false;\n      yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {\n        const rawStats = yield audioVideo.getRTCPeerConnectionStats();\n\n        if (rawStats) {\n          rawStats.forEach(report => {\n            if (report.type === 'candidate-pair' && report.state === 'succeeded') {\n              candidatePairSucceed = true;\n            }\n          });\n        }\n\n        return candidatePairSucceed;\n      }));\n      this.meetingSession.configuration.urls.urlRewriter = this.originalURLRewriter;\n      yield this.stopMeeting();\n\n      if (!candidatePairSucceed) {\n        return CheckNetworkTCPConnectivityFeedback_1.default.ICENegotiationFailed;\n      }\n\n      return CheckNetworkTCPConnectivityFeedback_1.default.Succeeded;\n    });\n  }\n\n  startMeeting() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let isStarted = false;\n      const observer = {\n        audioVideoDidStart: () => {\n          isStarted = true;\n        }\n      };\n      this.meetingSession.audioVideo.addObserver(observer);\n      this.meetingSession.audioVideo.start();\n      yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {\n        return isStarted;\n      }));\n      this.meetingSession.audioVideo.removeObserver(observer);\n      return isStarted;\n    });\n  }\n\n  stopMeeting() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let isStopped = false;\n      const observer = {\n        audioVideoDidStop: _sessionStatus => {\n          isStopped = true;\n        }\n      };\n      this.meetingSession.audioVideo.addObserver(observer);\n      this.meetingSession.audioVideo.stop();\n      yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {\n        return isStopped;\n      }));\n      this.meetingSession.audioVideo.removeObserver(observer);\n      return isStopped;\n    });\n  }\n\n  executeTimeoutTask(conditionCheck) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let isSuccess = false;\n\n      class CheckForConditionTask extends BaseTask_1.default {\n        constructor(logger, waitDurationMs) {\n          super(logger);\n          this.waitDurationMs = waitDurationMs;\n          this.isCancelled = false;\n        }\n\n        cancel() {\n          this.isCancelled = true;\n        }\n\n        run() {\n          return __awaiter(this, void 0, void 0, function* () {\n            while (!this.isCancelled) {\n              if (yield conditionCheck()) {\n                isSuccess = true;\n                break;\n              }\n\n              yield DefaultMeetingReadinessChecker.delay(this.waitDurationMs);\n            }\n          });\n        }\n\n      }\n\n      const timeoutTask = new TimeoutTask_1.default(this.logger, new CheckForConditionTask(this.logger, this.configuration.waitDurationMs), this.configuration.timeoutMs);\n      yield timeoutTask.run();\n      return isSuccess;\n    });\n  }\n\n}\n\nexports.default = DefaultMeetingReadinessChecker;","map":{"version":3,"sources":["../../src/meetingreadinesschecker/DefaultMeetingReadinessChecker.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,MAAA,2BAAA,GAAA,OAAA,CAAA,iDAAA,CAAA;;AAEA,MAAA,wBAAA,GAAA,OAAA,CAAA,2CAAA,CAAA;;AAEA,MAAA,yBAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;;AAEA,MAAA,uBAAA,GAAA,OAAA,CAAA,2CAAA,CAAA;;AAIA,MAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,MAAA,aAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,MAAA,gCAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;;AACA,MAAA,yBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,MAAA,0BAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AACA,MAAA,+BAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;AACA,MAAA,uCAAA,GAAA,OAAA,CAAA,yCAAA,CAAA;;AACA,MAAA,qCAAA,GAAA,OAAA,CAAA,uCAAA,CAAA;;AACA,MAAA,qCAAA,GAAA,OAAA,CAAA,uCAAA,CAAA;;AACA,MAAA,gCAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;;AACA,MAAA,yBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AAEA,MAAA,sCAAA,GAAA,OAAA,CAAA,wCAAA,CAAA;;AAEA,MAAqB,8BAArB,CAAmD;AAajD,EAAA,WAAA,CACU,MADV,EAEU,cAFV,EAGU,aAAA,GAAsD,IAAI,sCAAA,CAAA,OAAJ,EAHhE,EAG0G;AAFhG,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,cAAA,GAAA,cAAA;AACA,SAAA,aAAA,GAAA,aAAA;AALF,SAAA,eAAA,GAA0C,IAAI,wBAAA,CAAA,OAAJ,EAA1C;AAMJ;;AAhBsB,SAAL,KAAK,CAAC,SAAD,EAAkB;;AAC1C,aAAO,IAAI,OAAJ,CAAY,OAAO,IAAI,UAAU,CAAC,OAAD,EAAU,SAAV,CAAjC,CAAP;AACD,K;AAAA;;AAgBK,EAAA,eAAe,CAAC,gBAAD,EAAyB;;AAC5C,UAAI;AACF,cAAM,KAAK,cAAL,CAAoB,UAApB,CAA+B,sBAA/B,CAAsD,gBAAtD,CAAN;AACA,cAAM,KAAK,cAAL,CAAoB,UAApB,CAA+B,sBAA/B,CAAsD,IAAtD,CAAN;AACA,eAAO,yBAAA,CAAA,OAAA,CAAwB,SAA/B;AACD,OAJD,CAIE,OAAO,KAAP,EAAc;AACd,aAAK,MAAL,CAAY,KAAZ,CAAkB,gEAAgE,KAAK,EAAvF;;AACA,YAAI,KAAK,YAAY,uBAAA,CAAA,OAArB,EAA4C;AAC1C,iBAAO,yBAAA,CAAA,OAAA,CAAwB,gBAA/B;AACD;;AACD,eAAO,yBAAA,CAAA,OAAA,CAAwB,MAA/B;AACD;AACF,K;AAAA;;AAEK,EAAA,gBAAgB,CACpB,qBADoB,EAEpB,+BAFoB,EAGpB,YAAA,GAAiC,IAHb,EAGiB;;AAErC,UAAI;AACF,cAAM,mBAAmB,GAAG,qBAAqB,GAC5C,yBAAA,CAAA,OAAA,CAAwB,oBAAxB,CAA6C,qBAA7C,CAD4C,GAE7C,EAFJ;AAGA,cAAM,KAAK,QAAL,CAAc,mBAAd,EAAmC,GAAnC,EAAwC,YAAxC,CAAN;AACA,cAAM,YAAY,GAAG,MAAM,+BAA+B,EAA1D;;AACA,YAAI,YAAJ,EAAkB;AAChB,iBAAO,0BAAA,CAAA,OAAA,CAAyB,SAAhC;AACD;;AACD,eAAO,0BAAA,CAAA,OAAA,CAAyB,MAAhC;AACD,OAVD,CAUE,OAAO,KAAP,EAAc;AACd,aAAK,MAAL,CAAY,KAAZ,CAAkB,kEAAkE,KAAK,EAAzF;AACA,eAAO,0BAAA,CAAA,OAAA,CAAyB,MAAhC;AACD,OAbD,SAaU;AACR,aAAK,QAAL;AACD;AACF,K;AAAA;;AAEa,EAAA,QAAQ,CACpB,MADoB,EAEpB,SAFoB,EAGpB,YAHoB,EAGiB;;AAErC,YAAM,OAAO,GAAG,GAAhB;AACA,YAAM,YAAY,GAAG,GAArB;;AAEA,UAAI,KAAK,cAAT,EAAyB;AACvB,aAAK,QAAL;AACD;;AACD,WAAK,YAAL,GAAoB,yBAAA,CAAA,OAAA,CAAwB,eAAxB,EAApB;AACA,WAAK,QAAL,GAAgB,KAAK,YAAL,CAAkB,UAAlB,EAAhB;AACA,WAAK,QAAL,CAAc,IAAd,CAAmB,KAAnB,GAA2B,CAA3B;AACA,WAAK,cAAL,GAAsB,KAAK,YAAL,CAAkB,gBAAlB,EAAtB;AACA,WAAK,cAAL,CAAoB,SAApB,CAA8B,KAA9B,GAAsC,SAAtC;AACA,WAAK,cAAL,CAAoB,OAApB,CAA4B,KAAK,QAAjC;AACA,WAAK,iBAAL,GAAyB,KAAK,YAAL,CAAkB,4BAAlB,EAAzB;AACA,WAAK,QAAL,CAAc,OAAd,CAAsB,KAAK,iBAA3B;AACA,YAAM,WAAW,GAAG,KAAK,YAAL,CAAkB,WAAtC;AACA,YAAM,SAAS,GAAG,WAAW,GAAG,GAAhC;AACA,WAAK,QAAL,CAAc,IAAd,CAAmB,uBAAnB,CAA2C,CAA3C,EAA8C,SAA9C;AACA,WAAK,QAAL,CAAc,IAAd,CAAmB,uBAAnB,CAA2C,YAA3C,EAAyD,SAAS,GAAG,OAArE;AACA,WAAK,cAAL,CAAoB,KAApB,G,CAEA;AACA;AACA;;AAEA,YAAM,kBAAkB,GAAG,IAAI,2BAAA,CAAA,OAAJ,CAA8B,KAAK,MAAnC,CAA3B;;AAEA,UAAI;AACF,YAAI,KAAK,eAAL,CAAqB,iBAArB,EAAJ,EAA8C;AAC5C,gBAAM,kBAAkB,CAAC,eAAnB,CAAmC;AAAE,YAAA,QAAQ,EAAE;AAAZ,WAAnC,CAAN;AACD;AACF,OAJD,CAIE,OAAO,CAAP,EAAU;AACV;AACA,aAAK,MAAL,CAAY,KAAZ,CAAkB,gCAAgC,CAAC,EAAnD;AACD;;AACD,UAAI;AACF,cAAM,kBAAkB,CAAC,gBAAnB,CAAoC,YAAY,IAAI,IAAI,KAAJ,EAApD,CAAN;AACD,OAFD,CAEE,OAAO,CAAP,EAAU;AACV,aAAK,MAAL,CAAY,KAAZ,CAAkB,iCAAiC,CAAC,EAApD;AACD;;AACD,YAAM,kBAAkB,CAAC,eAAnB,CAAmC,KAAK,iBAAL,CAAuB,MAA1D,CAAN;AACD,K;AAAA;;AAEO,EAAA,QAAQ,GAAA;AACd,QAAI,CAAC,KAAK,YAAN,IAAsB,CAAC,KAAK,QAA5B,IAAwC,CAAC,KAAK,cAA9C,IAAgE,CAAC,KAAK,iBAA1E,EAA6F;AAC3F;AACD;;AACD,UAAM,WAAW,GAAG,CAApB;AACA,UAAM,OAAO,GAAG,GAAhB;AACA,UAAM,YAAY,GAAG,GAArB;AACA,UAAM,WAAW,GAAG,KAAK,YAAL,CAAkB,WAAtC;AACA,SAAK,QAAL,CAAc,IAAd,CAAmB,uBAAnB,CAA2C,YAA3C,EAAyD,WAAW,GAAG,OAAd,GAAwB,WAAjF;AACA,SAAK,QAAL,CAAc,IAAd,CAAmB,uBAAnB,CAA2C,CAA3C,EAA8C,WAAW,GAAG,OAAO,GAAG,CAAxB,GAA4B,WAA1E;AACA,SAAK,cAAL,CAAoB,IAApB;AACA,SAAK,cAAL,CAAoB,UAApB,CAA+B,KAAK,QAApC;AACA,SAAK,QAAL,CAAc,UAAd,CAAyB,KAAK,iBAA9B;AACA,SAAK,cAAL,GAAsB,IAAtB;AACA,SAAK,QAAL,GAAgB,IAAhB;AACA,SAAK,iBAAL,GAAyB,IAAzB;AACD;;AAEK,EAAA,eAAe,CAAC,gBAAD,EAAyB;;AAC5C,UAAI;AACF,cAAM,KAAK,cAAL,CAAoB,UAApB,CAA+B,sBAA/B,CAAsD,gBAAtD,CAAN;AACA,cAAM,KAAK,cAAL,CAAoB,UAApB,CAA+B,sBAA/B,CAAsD,IAAtD,CAAN;AACA,eAAO,yBAAA,CAAA,OAAA,CAAwB,SAA/B;AACD,OAJD,CAIE,OAAO,KAAP,EAAc;AACd,aAAK,MAAL,CAAY,KAAZ,CAAkB,0DAA0D,KAAK,EAAjF;;AACA,YAAI,KAAK,YAAY,uBAAA,CAAA,OAArB,EAA4C;AAC1C,iBAAO,yBAAA,CAAA,OAAA,CAAwB,gBAA/B;AACD;;AACD,eAAO,yBAAA,CAAA,OAAA,CAAwB,MAA/B;AACD;AACF,K;AAAA;;AAEK,EAAA,qBAAqB,CACzB,gBADyB,EAEzB,KAFyB,EAGzB,MAHyB,EAGX;;AAEd,UAAI,MAAJ;;AACA,UAAI;AACF,cAAM,kBAAkB,GAAG,yBAAA,CAAA,OAAA,CAAwB,oBAAxB,CACzB,gBADyB,CAA3B;AAGA,cAAM,eAAe,GAAG;AACtB,UAAA,KAAK,EAAE,KAAK,wBAAL,CAA8B,kBAA9B,EAAkD,KAAlD,EAAyD,MAAzD;AADe,SAAxB;AAGA,QAAA,MAAM,GAAG,MAAM,SAAS,CAAC,YAAV,CAAuB,YAAvB,CAAoC,eAApC,CAAf;AACD,OARD,CAQE,OAAO,KAAP,EAAc;AACd,aAAK,MAAL,CAAY,KAAZ,CACE,gEAAgE,KAAK,WAAW,MAAM,sBAAsB,KAAK,EADnH;;AAGA,YAAI,KAAK,IAAI,KAAK,CAAC,IAAN,KAAe,sBAA5B,EAAoD;AAClD,iBAAO,+BAAA,CAAA,OAAA,CAA8B,sBAArC;AACD;;AACD,YAAI,KAAK,IAAI,KAAK,CAAC,IAAN,KAAe,iBAA5B,EAA+C;AAC7C,iBAAO,+BAAA,CAAA,OAAA,CAA8B,gBAArC;AACD;;AACD,eAAO,+BAAA,CAAA,OAAA,CAA8B,MAArC;AACD,OAnBD,SAmBU;AACR,YAAI,MAAJ,EAAY;AACV,UAAA,MAAM,CAAC,SAAP,GAAmB,OAAnB,CAA2B,UAAU,KAAV,EAAe;AACxC,YAAA,KAAK,CAAC,IAAN;AACD,WAFD;AAGD;AACF;;AACD,aAAO,+BAAA,CAAA,OAAA,CAA8B,SAArC;AACD,K;AAAA;;AAEO,EAAA,wBAAwB,CAC9B,kBAD8B,EAE9B,KAF8B,EAG9B,MAH8B,EAGhB;AAEd,UAAM,SAAS,GAAG,KAAK,eAAL,CAAqB,2BAArB,CAAiD,KAAjD,EAAwD,MAAxD,CAAlB;AACA,UAAM,gBAAgB,GAA0B,EAAhD;;AACA,QAAI,KAAK,eAAL,CAAqB,qCAArB,EAAJ,EAAkE;AAChE,MAAA,gBAAgB,CAAC,QAAjB,GAA4B,kBAA5B;AACA,MAAA,gBAAgB,CAAC,KAAjB,GAAyB,KAAzB;AACA,MAAA,gBAAgB,CAAC,MAAjB,GAA0B,MAA1B;AACD,KAJD,MAIO;AACL,MAAA,gBAAgB,CAAC,QAAjB,GAA4B;AAAE,QAAA,KAAK,EAAE;AAAT,OAA5B;AACA,MAAA,gBAAgB,CAAC,KAAjB,GAAyB;AAAE,QAAA,KAAK,EAAE,SAAS,CAAC,CAAD;AAAlB,OAAzB;AACA,MAAA,gBAAgB,CAAC,MAAjB,GAA0B;AAAE,QAAA,KAAK,EAAE,SAAS,CAAC,CAAD;AAAlB,OAA1B;AACD;;AACD,WAAO,gBAAP;AACD;;AAEK,EAAA,6BAA6B,CACjC,QADiC,EAChB;;AAEjB,UAAI,qBAAqB,GAAG,KAA5B;AACA,UAAI,mBAAmB,GAAG,KAA1B;AAEA,YAAM,oBAAoB,GAAyB;AACjD,QAAA,oBAAoB,EAAE,MAAK;AACzB,UAAA,qBAAqB,GAAG,IAAxB;AACD;AAHgD,OAAnD;AAKA,YAAM,QAAQ,GAAuB;AACnC,QAAA,kBAAkB,EAAE,MAAK;AACvB,UAAA,mBAAmB,GAAG,IAAtB;AACD;AAHkC,OAArC;;AAMA,UAAI;AACF,aAAK,cAAL,CAAoB,UAApB,CAA+B,WAA/B,CAA2C,QAA3C;AACA,aAAK,cAAL,CAAoB,UAApB,CAA+B,KAA/B;AAEA,aAAK,cAAL,CAAoB,UAApB,CAA+B,uBAA/B,CAAuD,oBAAvD;AACA,cAAM,KAAK,cAAL,CAAoB,UAApB,CAA+B,kCAA/B,CAAkE,QAAlE,CAAN;AAEA,cAAM,KAAK,kBAAL,CAAwB,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACvC,iBAAO,mBAAmB,IAAI,qBAA9B;AACD,SAFwC,CAAnC,CAAN;;AAIA,YAAI,CAAC,mBAAL,EAA0B;AACxB,iBAAO,uCAAA,CAAA,OAAA,CAAsC,gBAA7C;AACD;;AACD,cAAM,KAAK,WAAL,EAAN;AACA,eAAO,qBAAqB,GACxB,uCAAA,CAAA,OAAA,CAAsC,SADd,GAExB,uCAAA,CAAA,OAAA,CAAsC,QAF1C;AAGD,OAlBD,CAkBE,OAAO,KAAP,EAAc;AACd,aAAK,MAAL,CAAY,KAAZ,CAAkB,kEAAkE,KAAK,EAAzF;;AACA,YAAI,KAAK,CAAC,IAAN,KAAe,iBAAnB,EAAsC;AACpC,iBAAO,uCAAA,CAAA,OAAA,CAAsC,gBAA7C;AACD,SAFD,MAEO;AACL,iBAAO,uCAAA,CAAA,OAAA,CAAsC,MAA7C;AACD;AACF,OAzBD,SAyBU;AACR,aAAK,cAAL,CAAoB,UAApB,CAA+B,cAA/B,CAA8C,QAA9C;AACA,aAAK,cAAL,CAAoB,UAApB,CAA+B,gBAA/B;AACA,aAAK,cAAL,CAAoB,UAApB,CAA+B,0BAA/B,CAA0D,oBAA1D;AACD;AACF,K;AAAA;;AAEK,EAAA,sBAAsB,CAAC,gBAAD,EAAyB;;AACnD,UAAI,aAAa,GAAG,KAApB;AACA,YAAM,UAAU,GAAG,KAAK,cAAL,CAAoB,UAAvC;;AACA,YAAM,uBAAuB,GAAG,CAC9B,UAD8B,EAE9B,OAF8B,EAG9B,eAH8B,EAI9B,QAJ8B,KAKtB;AACR,YAAI,UAAU,KAAK,KAAK,cAAL,CAAoB,aAApB,CAAkC,WAAlC,CAA8C,UAA7D,IAA2E,OAA/E,EAAwF;AACtF,UAAA,aAAa,GAAG,IAAhB;AACD;AACF,OATD;;AAUA,UAAI;AACF,cAAM,UAAU,CAAC,sBAAX,CAAkC,gBAAlC,CAAN;AACD,OAFD,CAEE,OAAO,KAAP,EAAc;AACd,aAAK,MAAL,CAAY,KAAZ,CACE,wEAAwE,KAAK,EAD/E;;AAGA,YAAI,KAAK,YAAY,uBAAA,CAAA,OAArB,EAA4C;AAC1C,iBAAO,gCAAA,CAAA,OAAA,CAA+B,0BAAtC;AACD;;AACD,eAAO,gCAAA,CAAA,OAAA,CAA+B,uBAAtC;AACD;;AACD,MAAA,UAAU,CAAC,qCAAX,CAAiD,uBAAjD;;AACA,UAAI,EAAE,MAAM,KAAK,YAAL,EAAR,CAAJ,EAAkC;AAChC,QAAA,UAAU,CAAC,uCAAX,CAAmD,uBAAnD;;AACA,YAAI;AACF,gBAAM,KAAK,cAAL,CAAoB,UAApB,CAA+B,sBAA/B,CAAsD,IAAtD,CAAN;AACD,SAFD,CAEE,OAAO,CAAP,EAAU;AACV,eAAK,MAAL,CAAY,KAAZ,CAAkB,oEAAoE,CAAC,EAAvF;AACD;;AACD,eAAO,gCAAA,CAAA,OAAA,CAA+B,gBAAtC;AACD;;AACD,YAAM,KAAK,kBAAL,CAAwB,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACvC,eAAO,aAAP;AACD,OAFwC,CAAnC,CAAN;AAGA,MAAA,UAAU,CAAC,uCAAX,CAAmD,uBAAnD;AACA,YAAM,KAAK,WAAL,EAAN;;AACA,UAAI;AACF,cAAM,KAAK,cAAL,CAAoB,UAApB,CAA+B,sBAA/B,CAAsD,IAAtD,CAAN;AACD,OAFD,CAEE,OAAO,CAAP,EAAU;AACV,aAAK,MAAL,CAAY,KAAZ,CAAkB,oEAAoE,CAAC,EAAvF;AACD;;AACD,aAAO,aAAa,GAChB,gCAAA,CAAA,OAAA,CAA+B,SADf,GAEhB,gCAAA,CAAA,OAAA,CAA+B,gBAFnC;AAGD,K;AAAA;;AAEK,EAAA,sBAAsB,CAAC,gBAAD,EAAyB;;AACnD,YAAM,UAAU,GAAG,KAAK,cAAL,CAAoB,UAAvC;;AAEA,UAAI;AACF,cAAM,UAAU,CAAC,sBAAX,CAAkC,gBAAlC,CAAN;AACD,OAFD,CAEE,OAAO,KAAP,EAAc;AACd,aAAK,MAAL,CAAY,KAAZ,CACE,wEAAwE,KAAK,EAD/E;;AAGA,YAAI,KAAK,YAAY,uBAAA,CAAA,OAArB,EAA4C;AAC1C,iBAAO,gCAAA,CAAA,OAAA,CAA+B,0BAAtC;AACD;;AACD,eAAO,gCAAA,CAAA,OAAA,CAA+B,uBAAtC;AACD;;AAED,UAAI,EAAE,MAAM,KAAK,YAAL,EAAR,CAAJ,EAAkC;AAChC,eAAO,gCAAA,CAAA,OAAA,CAA+B,gBAAtC;AACD;;AAED,UAAI,WAAW,GAAG,CAAlB;AACA,MAAA,UAAU,CAAC,mBAAX;AACA,YAAM,KAAK,kBAAL,CAAwB,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACvC,cAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,yBAAX,EAAvB;;AACA,YAAI,QAAJ,EAAc;AACZ,UAAA,QAAQ,CAAC,OAAT,CAAiB,MAAM,IAAG;AACxB,gBAAI,MAAM,CAAC,IAAP,KAAgB,cAAhB,IAAkC,MAAM,CAAC,SAAP,KAAqB,OAA3D,EAAoE;AAClE,cAAA,WAAW,GAAG,MAAM,CAAC,WAArB;AACD;AACF,WAJD;AAKD;;AACD,eAAO,WAAW,GAAG,CAArB;AACD,OAVwC,CAAnC,CAAN;AAWA,MAAA,UAAU,CAAC,kBAAX;AACA,YAAM,KAAK,WAAL,EAAN;;AACA,UAAI,WAAW,IAAI,CAAnB,EAAsB;AACpB,eAAO,gCAAA,CAAA,OAAA,CAA+B,YAAtC;AACD;;AACD,aAAO,gCAAA,CAAA,OAAA,CAA+B,SAAtC;AACD,K;AAAA;;AAEK,EAAA,2BAA2B,GAAA;;AAC/B,UAAI;AACF,aAAK,mBAAL,GAA2B,KAAK,cAAL,CAAoB,aAApB,CAAkC,IAAlC,CAAuC,WAAlE;AACD,OAFD,CAEE,OAAO,KAAP,EAAc;AACd,aAAK,MAAL,CAAY,KAAZ,CAAkB,0DAA0D,KAAK,EAAjF;AACA,eAAO,qCAAA,CAAA,OAAA,CAAoC,gCAA3C;AACD;;AACD,WAAK,cAAL,CAAoB,aAApB,CAAkC,IAAlC,CAAuC,WAAvC,GAAsD,GAAD,IAAgB;AACnE,cAAM,cAAc,GAAG,KAAK,mBAAL,CAAyB,GAAzB,CAAvB;;AACA,YAAI,cAAc,CAAC,QAAf,CAAwB,eAAxB,CAAJ,EAA8C;AAC5C,iBAAO,EAAP;AACD;;AACD,eAAO,cAAP;AACD,OAND;;AAQA,YAAM,UAAU,GAAG,KAAK,cAAL,CAAoB,UAAvC;;AACA,UAAI,EAAE,MAAM,KAAK,YAAL,EAAR,CAAJ,EAAkC;AAChC,aAAK,cAAL,CAAoB,aAApB,CAAkC,IAAlC,CAAuC,WAAvC,GAAqD,KAAK,mBAA1D;AACA,eAAO,qCAAA,CAAA,OAAA,CAAoC,gBAA3C;AACD;;AAED,UAAI,oBAAoB,GAAG,KAA3B;AACA,YAAM,KAAK,kBAAL,CAAwB,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACvC,cAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,yBAAX,EAAvB;;AACA,YAAI,QAAJ,EAAc;AACZ,UAAA,QAAQ,CAAC,OAAT,CAAiB,MAAM,IAAG;AACxB,gBAAI,MAAM,CAAC,IAAP,KAAgB,gBAAhB,IAAoC,MAAM,CAAC,KAAP,KAAiB,WAAzD,EAAsE;AACpE,cAAA,oBAAoB,GAAG,IAAvB;AACD;AACF,WAJD;AAKD;;AACD,eAAO,oBAAP;AACD,OAVwC,CAAnC,CAAN;AAYA,WAAK,cAAL,CAAoB,aAApB,CAAkC,IAAlC,CAAuC,WAAvC,GAAqD,KAAK,mBAA1D;AACA,YAAM,KAAK,WAAL,EAAN;;AACA,UAAI,CAAC,oBAAL,EAA2B;AACzB,eAAO,qCAAA,CAAA,OAAA,CAAoC,oBAA3C;AACD;;AACD,aAAO,qCAAA,CAAA,OAAA,CAAoC,SAA3C;AACD,K;AAAA;;AAEK,EAAA,2BAA2B,GAAA;;AAC/B,UAAI;AACF,aAAK,mBAAL,GAA2B,KAAK,cAAL,CAAoB,aAApB,CAAkC,IAAlC,CAAuC,WAAlE;AACD,OAFD,CAEE,OAAO,KAAP,EAAc;AACd,aAAK,MAAL,CAAY,KAAZ,CAAkB,0DAA0D,KAAK,EAAjF;AACA,eAAO,qCAAA,CAAA,OAAA,CAAoC,gCAA3C;AACD;;AAED,WAAK,cAAL,CAAoB,aAApB,CAAkC,IAAlC,CAAuC,WAAvC,GAAsD,GAAD,IAAgB;AACnE,cAAM,cAAc,GAAG,KAAK,mBAAL,CAAyB,GAAzB,CAAvB;;AACA,YAAI,cAAc,CAAC,QAAf,CAAwB,eAAxB,CAAJ,EAA8C;AAC5C,iBAAO,EAAP;AACD;;AACD,eAAO,cAAP;AACD,OAND;;AAQA,YAAM,UAAU,GAAG,KAAK,cAAL,CAAoB,UAAvC;;AAEA,UAAI,EAAE,MAAM,KAAK,YAAL,EAAR,CAAJ,EAAkC;AAChC,aAAK,cAAL,CAAoB,aAApB,CAAkC,IAAlC,CAAuC,WAAvC,GAAqD,KAAK,mBAA1D;AACA,eAAO,qCAAA,CAAA,OAAA,CAAoC,gBAA3C;AACD;;AAED,UAAI,oBAAoB,GAAG,KAA3B;AACA,YAAM,KAAK,kBAAL,CAAwB,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACvC,cAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,yBAAX,EAAvB;;AACA,YAAI,QAAJ,EAAc;AACZ,UAAA,QAAQ,CAAC,OAAT,CAAiB,MAAM,IAAG;AACxB,gBAAI,MAAM,CAAC,IAAP,KAAgB,gBAAhB,IAAoC,MAAM,CAAC,KAAP,KAAiB,WAAzD,EAAsE;AACpE,cAAA,oBAAoB,GAAG,IAAvB;AACD;AACF,WAJD;AAKD;;AACD,eAAO,oBAAP;AACD,OAVwC,CAAnC,CAAN;AAYA,WAAK,cAAL,CAAoB,aAApB,CAAkC,IAAlC,CAAuC,WAAvC,GAAqD,KAAK,mBAA1D;AACA,YAAM,KAAK,WAAL,EAAN;;AACA,UAAI,CAAC,oBAAL,EAA2B;AACzB,eAAO,qCAAA,CAAA,OAAA,CAAoC,oBAA3C;AACD;;AACD,aAAO,qCAAA,CAAA,OAAA,CAAoC,SAA3C;AACD,K;AAAA;;AAEa,EAAA,YAAY,GAAA;;AACxB,UAAI,SAAS,GAAG,KAAhB;AACA,YAAM,QAAQ,GAAuB;AACnC,QAAA,kBAAkB,EAAE,MAAK;AACvB,UAAA,SAAS,GAAG,IAAZ;AACD;AAHkC,OAArC;AAKA,WAAK,cAAL,CAAoB,UAApB,CAA+B,WAA/B,CAA2C,QAA3C;AACA,WAAK,cAAL,CAAoB,UAApB,CAA+B,KAA/B;AACA,YAAM,KAAK,kBAAL,CAAwB,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACvC,eAAO,SAAP;AACD,OAFwC,CAAnC,CAAN;AAGA,WAAK,cAAL,CAAoB,UAApB,CAA+B,cAA/B,CAA8C,QAA9C;AACA,aAAO,SAAP;AACD,K;AAAA;;AAEa,EAAA,WAAW,GAAA;;AACvB,UAAI,SAAS,GAAG,KAAhB;AACA,YAAM,QAAQ,GAAuB;AACnC,QAAA,iBAAiB,EAAG,cAAD,IAAyC;AAC1D,UAAA,SAAS,GAAG,IAAZ;AACD;AAHkC,OAArC;AAKA,WAAK,cAAL,CAAoB,UAApB,CAA+B,WAA/B,CAA2C,QAA3C;AACA,WAAK,cAAL,CAAoB,UAApB,CAA+B,IAA/B;AACA,YAAM,KAAK,kBAAL,CAAwB,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACvC,eAAO,SAAP;AACD,OAFwC,CAAnC,CAAN;AAGA,WAAK,cAAL,CAAoB,UAApB,CAA+B,cAA/B,CAA8C,QAA9C;AACA,aAAO,SAAP;AACD,K;AAAA;;AAEa,EAAA,kBAAkB,CAAC,cAAD,EAAuC;;AACrE,UAAI,SAAS,GAAG,KAAhB;;AACA,YAAM,qBAAN,SAAoC,UAAA,CAAA,OAApC,CAA4C;AAG1C,QAAA,WAAA,CAAY,MAAZ,EAAoC,cAApC,EAA0D;AACxD,gBAAM,MAAN;AADkC,eAAA,cAAA,GAAA,cAAA;AAF5B,eAAA,WAAA,GAAc,KAAd;AAIP;;AAED,QAAA,MAAM,GAAA;AACJ,eAAK,WAAL,GAAmB,IAAnB;AACD;;AAEK,QAAA,GAAG,GAAA;;AACP,mBAAO,CAAC,KAAK,WAAb,EAA0B;AACxB,kBAAI,MAAM,cAAc,EAAxB,EAA4B;AAC1B,gBAAA,SAAS,GAAG,IAAZ;AACA;AACD;;AACD,oBAAM,8BAA8B,CAAC,KAA/B,CAAqC,KAAK,cAA1C,CAAN;AACD;AACF,W;AAAA;;AAnByC;;AAqB5C,YAAM,WAAW,GAAG,IAAI,aAAA,CAAA,OAAJ,CAClB,KAAK,MADa,EAElB,IAAI,qBAAJ,CAA0B,KAAK,MAA/B,EAAuC,KAAK,aAAL,CAAmB,cAA1D,CAFkB,EAGlB,KAAK,aAAL,CAAmB,SAHD,CAApB;AAKA,YAAM,WAAW,CAAC,GAAZ,EAAN;AACA,aAAO,SAAP;AACD,K;AAAA;;AA3dgD;;AAAnD,OAAA,CAAA,OAAA,GAAA,8BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst DefaultAudioMixController_1 = require(\"../audiomixcontroller/DefaultAudioMixController\");\nconst DefaultBrowserBehavior_1 = require(\"../browserbehavior/DefaultBrowserBehavior\");\nconst DefaultDeviceController_1 = require(\"../devicecontroller/DefaultDeviceController\");\nconst PermissionDeniedError_1 = require(\"../devicecontroller/PermissionDeniedError\");\nconst BaseTask_1 = require(\"../task/BaseTask\");\nconst TimeoutTask_1 = require(\"../task/TimeoutTask\");\nconst CheckAudioConnectivityFeedback_1 = require(\"./CheckAudioConnectivityFeedback\");\nconst CheckAudioInputFeedback_1 = require(\"./CheckAudioInputFeedback\");\nconst CheckAudioOutputFeedback_1 = require(\"./CheckAudioOutputFeedback\");\nconst CheckCameraResolutionFeedback_1 = require(\"./CheckCameraResolutionFeedback\");\nconst CheckContentShareConnectivityFeedback_1 = require(\"./CheckContentShareConnectivityFeedback\");\nconst CheckNetworkTCPConnectivityFeedback_1 = require(\"./CheckNetworkTCPConnectivityFeedback\");\nconst CheckNetworkUDPConnectivityFeedback_1 = require(\"./CheckNetworkUDPConnectivityFeedback\");\nconst CheckVideoConnectivityFeedback_1 = require(\"./CheckVideoConnectivityFeedback\");\nconst CheckVideoInputFeedback_1 = require(\"./CheckVideoInputFeedback\");\nconst MeetingReadinessCheckerConfiguration_1 = require(\"./MeetingReadinessCheckerConfiguration\");\nclass DefaultMeetingReadinessChecker {\n    constructor(logger, meetingSession, configuration = new MeetingReadinessCheckerConfiguration_1.default()) {\n        this.logger = logger;\n        this.meetingSession = meetingSession;\n        this.configuration = configuration;\n        this.browserBehavior = new DefaultBrowserBehavior_1.default();\n    }\n    static delay(timeoutMs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise(resolve => setTimeout(resolve, timeoutMs));\n        });\n    }\n    checkAudioInput(audioInputDevice) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield this.meetingSession.audioVideo.chooseAudioInputDevice(audioInputDevice);\n                yield this.meetingSession.audioVideo.chooseAudioInputDevice(null);\n                return CheckAudioInputFeedback_1.default.Succeeded;\n            }\n            catch (error) {\n                this.logger.error(`MeetingReadinessChecker: Audio input check failed with error ${error}`);\n                if (error instanceof PermissionDeniedError_1.default) {\n                    return CheckAudioInputFeedback_1.default.PermissionDenied;\n                }\n                return CheckAudioInputFeedback_1.default.Failed;\n            }\n        });\n    }\n    checkAudioOutput(audioOutputDeviceInfo, audioOutputVerificationCallback, audioElement = null) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const audioOutputDeviceId = audioOutputDeviceInfo\n                    ? DefaultDeviceController_1.default.getIntrinsicDeviceId(audioOutputDeviceInfo)\n                    : '';\n                yield this.playTone(audioOutputDeviceId, 440, audioElement);\n                const userFeedback = yield audioOutputVerificationCallback();\n                if (userFeedback) {\n                    return CheckAudioOutputFeedback_1.default.Succeeded;\n                }\n                return CheckAudioOutputFeedback_1.default.Failed;\n            }\n            catch (error) {\n                this.logger.error(`MeetingReadinessChecker: Audio output check failed with error: ${error}`);\n                return CheckAudioOutputFeedback_1.default.Failed;\n            }\n            finally {\n                this.stopTone();\n            }\n        });\n    }\n    playTone(sinkId, frequency, audioElement) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rampSec = 0.1;\n            const maxGainValue = 0.1;\n            if (this.oscillatorNode) {\n                this.stopTone();\n            }\n            this.audioContext = DefaultDeviceController_1.default.getAudioContext();\n            this.gainNode = this.audioContext.createGain();\n            this.gainNode.gain.value = 0;\n            this.oscillatorNode = this.audioContext.createOscillator();\n            this.oscillatorNode.frequency.value = frequency;\n            this.oscillatorNode.connect(this.gainNode);\n            this.destinationStream = this.audioContext.createMediaStreamDestination();\n            this.gainNode.connect(this.destinationStream);\n            const currentTime = this.audioContext.currentTime;\n            const startTime = currentTime + 0.1;\n            this.gainNode.gain.linearRampToValueAtTime(0, startTime);\n            this.gainNode.gain.linearRampToValueAtTime(maxGainValue, startTime + rampSec);\n            this.oscillatorNode.start();\n            // Because we always use `DefaultAudioMixController`, and both this class\n            // and DAMC use `DefaultBrowserBehavior`, it is not possible for the `bindAudioDevice` call here to throw.\n            // Nevertheless, we `catch` here and disable code coverage.\n            const audioMixController = new DefaultAudioMixController_1.default(this.logger);\n            try {\n                if (this.browserBehavior.supportsSetSinkId()) {\n                    yield audioMixController.bindAudioDevice({ deviceId: sinkId });\n                }\n            }\n            catch (e) {\n                /* istanbul ignore next */\n                this.logger.error(`Failed to bind audio device: ${e}`);\n            }\n            try {\n                yield audioMixController.bindAudioElement(audioElement || new Audio());\n            }\n            catch (e) {\n                this.logger.error(`Failed to bind audio element: ${e}`);\n            }\n            yield audioMixController.bindAudioStream(this.destinationStream.stream);\n        });\n    }\n    stopTone() {\n        if (!this.audioContext || !this.gainNode || !this.oscillatorNode || !this.destinationStream) {\n            return;\n        }\n        const durationSec = 1;\n        const rampSec = 0.1;\n        const maxGainValue = 0.1;\n        const currentTime = this.audioContext.currentTime;\n        this.gainNode.gain.linearRampToValueAtTime(maxGainValue, currentTime + rampSec + durationSec);\n        this.gainNode.gain.linearRampToValueAtTime(0, currentTime + rampSec * 2 + durationSec);\n        this.oscillatorNode.stop();\n        this.oscillatorNode.disconnect(this.gainNode);\n        this.gainNode.disconnect(this.destinationStream);\n        this.oscillatorNode = null;\n        this.gainNode = null;\n        this.destinationStream = null;\n    }\n    checkVideoInput(videoInputDevice) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield this.meetingSession.audioVideo.chooseVideoInputDevice(videoInputDevice);\n                yield this.meetingSession.audioVideo.chooseVideoInputDevice(null);\n                return CheckVideoInputFeedback_1.default.Succeeded;\n            }\n            catch (error) {\n                this.logger.error(`MeetingReadinessChecker: Video check failed with error ${error}`);\n                if (error instanceof PermissionDeniedError_1.default) {\n                    return CheckVideoInputFeedback_1.default.PermissionDenied;\n                }\n                return CheckVideoInputFeedback_1.default.Failed;\n            }\n        });\n    }\n    checkCameraResolution(videoInputDevice, width, height) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let stream;\n            try {\n                const videoInputDeviceId = DefaultDeviceController_1.default.getIntrinsicDeviceId(videoInputDevice);\n                const videoConstraint = {\n                    video: this.calculateVideoConstraint(videoInputDeviceId, width, height),\n                };\n                stream = yield navigator.mediaDevices.getUserMedia(videoConstraint);\n            }\n            catch (error) {\n                this.logger.error(`MeetingReadinessChecker: Camera resolution check with width: ${width} height ${height} failed with error ${error}`);\n                if (error && error.name === 'OverconstrainedError') {\n                    return CheckCameraResolutionFeedback_1.default.ResolutionNotSupported;\n                }\n                if (error && error.name === 'NotAllowedError') {\n                    return CheckCameraResolutionFeedback_1.default.PermissionDenied;\n                }\n                return CheckCameraResolutionFeedback_1.default.Failed;\n            }\n            finally {\n                if (stream) {\n                    stream.getTracks().forEach(function (track) {\n                        track.stop();\n                    });\n                }\n            }\n            return CheckCameraResolutionFeedback_1.default.Succeeded;\n        });\n    }\n    calculateVideoConstraint(videoInputDeviceId, width, height) {\n        const dimension = this.browserBehavior.requiresResolutionAlignment(width, height);\n        const trackConstraints = {};\n        if (this.browserBehavior.requiresNoExactMediaStreamConstraints()) {\n            trackConstraints.deviceId = videoInputDeviceId;\n            trackConstraints.width = width;\n            trackConstraints.height = height;\n        }\n        else {\n            trackConstraints.deviceId = { exact: videoInputDeviceId };\n            trackConstraints.width = { exact: dimension[0] };\n            trackConstraints.height = { exact: dimension[1] };\n        }\n        return trackConstraints;\n    }\n    checkContentShareConnectivity(sourceId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let isContentShareStarted = false;\n            let isAudioVideoStarted = false;\n            const contentShareObserver = {\n                contentShareDidStart: () => {\n                    isContentShareStarted = true;\n                },\n            };\n            const observer = {\n                audioVideoDidStart: () => {\n                    isAudioVideoStarted = true;\n                },\n            };\n            try {\n                this.meetingSession.audioVideo.addObserver(observer);\n                this.meetingSession.audioVideo.start();\n                this.meetingSession.audioVideo.addContentShareObserver(contentShareObserver);\n                yield this.meetingSession.audioVideo.startContentShareFromScreenCapture(sourceId);\n                yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {\n                    return isAudioVideoStarted && isContentShareStarted;\n                }));\n                if (!isAudioVideoStarted) {\n                    return CheckContentShareConnectivityFeedback_1.default.ConnectionFailed;\n                }\n                yield this.stopMeeting();\n                return isContentShareStarted\n                    ? CheckContentShareConnectivityFeedback_1.default.Succeeded\n                    : CheckContentShareConnectivityFeedback_1.default.TimedOut;\n            }\n            catch (error) {\n                this.logger.error(`MeetingReadinessChecker: Content share check failed with error ${error}`);\n                if (error.name === 'NotAllowedError') {\n                    return CheckContentShareConnectivityFeedback_1.default.PermissionDenied;\n                }\n                else {\n                    return CheckContentShareConnectivityFeedback_1.default.Failed;\n                }\n            }\n            finally {\n                this.meetingSession.audioVideo.removeObserver(observer);\n                this.meetingSession.audioVideo.stopContentShare();\n                this.meetingSession.audioVideo.removeContentShareObserver(contentShareObserver);\n            }\n        });\n    }\n    checkAudioConnectivity(audioInputDevice) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let audioPresence = false;\n            const audioVideo = this.meetingSession.audioVideo;\n            const attendeePresenceHandler = (attendeeId, present, _externalUserId, _dropped) => {\n                if (attendeeId === this.meetingSession.configuration.credentials.attendeeId && present) {\n                    audioPresence = true;\n                }\n            };\n            try {\n                yield audioVideo.chooseAudioInputDevice(audioInputDevice);\n            }\n            catch (error) {\n                this.logger.error(`MeetingReadinessChecker: Failed to get audio input device with error ${error}`);\n                if (error instanceof PermissionDeniedError_1.default) {\n                    return CheckAudioConnectivityFeedback_1.default.AudioInputPermissionDenied;\n                }\n                return CheckAudioConnectivityFeedback_1.default.AudioInputRequestFailed;\n            }\n            audioVideo.realtimeSubscribeToAttendeeIdPresence(attendeePresenceHandler);\n            if (!(yield this.startMeeting())) {\n                audioVideo.realtimeUnsubscribeToAttendeeIdPresence(attendeePresenceHandler);\n                try {\n                    yield this.meetingSession.audioVideo.chooseAudioInputDevice(null);\n                }\n                catch (e) {\n                    this.logger.error(`MeetingReadinessChecker: Failed to choose null device with error ${e}`);\n                }\n                return CheckAudioConnectivityFeedback_1.default.ConnectionFailed;\n            }\n            yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {\n                return audioPresence;\n            }));\n            audioVideo.realtimeUnsubscribeToAttendeeIdPresence(attendeePresenceHandler);\n            yield this.stopMeeting();\n            try {\n                yield this.meetingSession.audioVideo.chooseAudioInputDevice(null);\n            }\n            catch (e) {\n                this.logger.error(`MeetingReadinessChecker: Failed to choose null device with error ${e}`);\n            }\n            return audioPresence\n                ? CheckAudioConnectivityFeedback_1.default.Succeeded\n                : CheckAudioConnectivityFeedback_1.default.AudioNotReceived;\n        });\n    }\n    checkVideoConnectivity(videoInputDevice) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const audioVideo = this.meetingSession.audioVideo;\n            try {\n                yield audioVideo.chooseVideoInputDevice(videoInputDevice);\n            }\n            catch (error) {\n                this.logger.error(`MeetingReadinessChecker: Failed to get video input device with error ${error}`);\n                if (error instanceof PermissionDeniedError_1.default) {\n                    return CheckVideoConnectivityFeedback_1.default.VideoInputPermissionDenied;\n                }\n                return CheckVideoConnectivityFeedback_1.default.VideoInputRequestFailed;\n            }\n            if (!(yield this.startMeeting())) {\n                return CheckVideoConnectivityFeedback_1.default.ConnectionFailed;\n            }\n            let packetsSent = 0;\n            audioVideo.startLocalVideoTile();\n            yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {\n                const rawStats = yield audioVideo.getRTCPeerConnectionStats();\n                if (rawStats) {\n                    rawStats.forEach(report => {\n                        if (report.type === 'outbound-rtp' && report.mediaType === 'video') {\n                            packetsSent = report.packetsSent;\n                        }\n                    });\n                }\n                return packetsSent > 0;\n            }));\n            audioVideo.stopLocalVideoTile();\n            yield this.stopMeeting();\n            if (packetsSent <= 0) {\n                return CheckVideoConnectivityFeedback_1.default.VideoNotSent;\n            }\n            return CheckVideoConnectivityFeedback_1.default.Succeeded;\n        });\n    }\n    checkNetworkUDPConnectivity() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                this.originalURLRewriter = this.meetingSession.configuration.urls.urlRewriter;\n            }\n            catch (error) {\n                this.logger.error(`MeetingSessionConfiguration.urls doesn't exist. Error: ${error}`);\n                return CheckNetworkUDPConnectivityFeedback_1.default.MeetingSessionURLsNotInitialized;\n            }\n            this.meetingSession.configuration.urls.urlRewriter = (uri) => {\n                const transformedUri = this.originalURLRewriter(uri);\n                if (transformedUri.includes('transport=tcp')) {\n                    return '';\n                }\n                return transformedUri;\n            };\n            const audioVideo = this.meetingSession.audioVideo;\n            if (!(yield this.startMeeting())) {\n                this.meetingSession.configuration.urls.urlRewriter = this.originalURLRewriter;\n                return CheckNetworkUDPConnectivityFeedback_1.default.ConnectionFailed;\n            }\n            let candidatePairSucceed = false;\n            yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {\n                const rawStats = yield audioVideo.getRTCPeerConnectionStats();\n                if (rawStats) {\n                    rawStats.forEach(report => {\n                        if (report.type === 'candidate-pair' && report.state === 'succeeded') {\n                            candidatePairSucceed = true;\n                        }\n                    });\n                }\n                return candidatePairSucceed;\n            }));\n            this.meetingSession.configuration.urls.urlRewriter = this.originalURLRewriter;\n            yield this.stopMeeting();\n            if (!candidatePairSucceed) {\n                return CheckNetworkUDPConnectivityFeedback_1.default.ICENegotiationFailed;\n            }\n            return CheckNetworkUDPConnectivityFeedback_1.default.Succeeded;\n        });\n    }\n    checkNetworkTCPConnectivity() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                this.originalURLRewriter = this.meetingSession.configuration.urls.urlRewriter;\n            }\n            catch (error) {\n                this.logger.error(`MeetingSessionConfiguration.urls doesn't exist. Error: ${error}`);\n                return CheckNetworkTCPConnectivityFeedback_1.default.MeetingSessionURLsNotInitialized;\n            }\n            this.meetingSession.configuration.urls.urlRewriter = (uri) => {\n                const transformedUri = this.originalURLRewriter(uri);\n                if (transformedUri.includes('transport=udp')) {\n                    return '';\n                }\n                return transformedUri;\n            };\n            const audioVideo = this.meetingSession.audioVideo;\n            if (!(yield this.startMeeting())) {\n                this.meetingSession.configuration.urls.urlRewriter = this.originalURLRewriter;\n                return CheckNetworkTCPConnectivityFeedback_1.default.ConnectionFailed;\n            }\n            let candidatePairSucceed = false;\n            yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {\n                const rawStats = yield audioVideo.getRTCPeerConnectionStats();\n                if (rawStats) {\n                    rawStats.forEach(report => {\n                        if (report.type === 'candidate-pair' && report.state === 'succeeded') {\n                            candidatePairSucceed = true;\n                        }\n                    });\n                }\n                return candidatePairSucceed;\n            }));\n            this.meetingSession.configuration.urls.urlRewriter = this.originalURLRewriter;\n            yield this.stopMeeting();\n            if (!candidatePairSucceed) {\n                return CheckNetworkTCPConnectivityFeedback_1.default.ICENegotiationFailed;\n            }\n            return CheckNetworkTCPConnectivityFeedback_1.default.Succeeded;\n        });\n    }\n    startMeeting() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let isStarted = false;\n            const observer = {\n                audioVideoDidStart: () => {\n                    isStarted = true;\n                },\n            };\n            this.meetingSession.audioVideo.addObserver(observer);\n            this.meetingSession.audioVideo.start();\n            yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {\n                return isStarted;\n            }));\n            this.meetingSession.audioVideo.removeObserver(observer);\n            return isStarted;\n        });\n    }\n    stopMeeting() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let isStopped = false;\n            const observer = {\n                audioVideoDidStop: (_sessionStatus) => {\n                    isStopped = true;\n                },\n            };\n            this.meetingSession.audioVideo.addObserver(observer);\n            this.meetingSession.audioVideo.stop();\n            yield this.executeTimeoutTask(() => __awaiter(this, void 0, void 0, function* () {\n                return isStopped;\n            }));\n            this.meetingSession.audioVideo.removeObserver(observer);\n            return isStopped;\n        });\n    }\n    executeTimeoutTask(conditionCheck) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let isSuccess = false;\n            class CheckForConditionTask extends BaseTask_1.default {\n                constructor(logger, waitDurationMs) {\n                    super(logger);\n                    this.waitDurationMs = waitDurationMs;\n                    this.isCancelled = false;\n                }\n                cancel() {\n                    this.isCancelled = true;\n                }\n                run() {\n                    return __awaiter(this, void 0, void 0, function* () {\n                        while (!this.isCancelled) {\n                            if (yield conditionCheck()) {\n                                isSuccess = true;\n                                break;\n                            }\n                            yield DefaultMeetingReadinessChecker.delay(this.waitDurationMs);\n                        }\n                    });\n                }\n            }\n            const timeoutTask = new TimeoutTask_1.default(this.logger, new CheckForConditionTask(this.logger, this.configuration.waitDurationMs), this.configuration.timeoutMs);\n            yield timeoutTask.run();\n            return isSuccess;\n        });\n    }\n}\nexports.default = DefaultMeetingReadinessChecker;\n//# sourceMappingURL=DefaultMeetingReadinessChecker.js.map"]},"metadata":{},"sourceType":"script"}