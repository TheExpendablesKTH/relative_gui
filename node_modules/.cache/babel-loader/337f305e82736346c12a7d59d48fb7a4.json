{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst TaskStatus_1 = require(\"./TaskStatus\");\n/*\n * [[BaseTask]] provides common utilities for task implementations.\n */\n\n\nclass BaseTask {\n  constructor(logger) {\n    this.logger = logger;\n    this.taskName = 'BaseTask';\n    this.parentTask = null;\n    this.status = TaskStatus_1.default.IDLE;\n    this.run = this.baseRun.bind(this, this.run);\n    this.cancel = this.baseCancel.bind(this, this.cancel);\n  }\n\n  cancel() {}\n\n  name() {\n    return this.parentTask ? `${this.parentTask.name()}/${this.taskName}` : this.taskName;\n  }\n\n  setParent(parentTask) {\n    this.parentTask = parentTask;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  logAndThrow(message) {\n    this.logger.info(message);\n    throw new Error(message);\n  }\n\n  baseRun(originalRun) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const startTime = Date.now();\n        this.logger.info(`running task ${this.name()}`);\n\n        switch (this.status) {\n          case TaskStatus_1.default.RUNNING:\n            this.logAndThrow(`${this.name()} is already running`);\n\n          case TaskStatus_1.default.CANCELED:\n            this.logAndThrow(`${this.name()} was canceled before running`);\n\n          case TaskStatus_1.default.FINISHED:\n            this.logAndThrow(`${this.name()} was already finished`);\n        }\n\n        this.status = TaskStatus_1.default.RUNNING;\n        yield originalRun.call(this);\n        this.logger.info(`${this.name()} took ${Math.round(Date.now() - startTime)} ms`);\n      } catch (err) {\n        throw err;\n      } finally {\n        if (this.status !== TaskStatus_1.default.CANCELED) {\n          this.status = TaskStatus_1.default.FINISHED;\n        }\n      }\n    });\n  }\n\n  baseCancel(originalCancel) {\n    if (this.status === TaskStatus_1.default.CANCELED || this.status === TaskStatus_1.default.FINISHED) {\n      return;\n    }\n\n    this.logger.info(`canceling task ${this.name()}`);\n    this.status = TaskStatus_1.default.CANCELED;\n    originalCancel.call(this);\n  }\n\n}\n\nexports.default = BaseTask;","map":{"version":3,"sources":["../../src/task/BaseTask.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,MAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAEA;;AAEG;;;AACH,MAA8B,QAA9B,CAAsC;AAQpC,EAAA,WAAA,CAAsB,MAAtB,EAAoC;AAAd,SAAA,MAAA,GAAA,MAAA;AAPZ,SAAA,QAAA,GAAW,UAAX;AAEF,SAAA,UAAA,GAA0B,IAA1B;AACA,SAAA,MAAA,GAAqB,YAAA,CAAA,OAAA,CAAW,IAAhC;AAKN,SAAK,GAAL,GAAW,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,EAAwB,KAAK,GAA7B,CAAX;AACA,SAAK,MAAL,GAAc,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,EAA2B,KAAK,MAAhC,CAAd;AACD;;AAED,EAAA,MAAM,GAAA,CAAW;;AAEjB,EAAA,IAAI,GAAA;AACF,WAAO,KAAK,UAAL,GAAkB,GAAG,KAAK,UAAL,CAAgB,IAAhB,EAAsB,IAAI,KAAK,QAAQ,EAA5D,GAAiE,KAAK,QAA7E;AACD;;AAED,EAAA,SAAS,CAAC,UAAD,EAAiB;AACxB,SAAK,UAAL,GAAkB,UAAlB;AACD;;AAES,EAAA,SAAS,GAAA;AACjB,WAAO,KAAK,MAAZ;AACD;;AAES,EAAA,WAAW,CAAC,OAAD,EAAgB;AACnC,SAAK,MAAL,CAAY,IAAZ,CAAiB,OAAjB;AACA,UAAM,IAAI,KAAJ,CAAU,OAAV,CAAN;AACD;;AAEa,EAAA,OAAO,CAAC,WAAD,EAAiC;;AACpD,UAAI;AACF,cAAM,SAAS,GAAG,IAAI,CAAC,GAAL,EAAlB;AACA,aAAK,MAAL,CAAY,IAAZ,CAAiB,gBAAgB,KAAK,IAAL,EAAW,EAA5C;;AAEA,gBAAQ,KAAK,MAAb;AACE,eAAK,YAAA,CAAA,OAAA,CAAW,OAAhB;AACE,iBAAK,WAAL,CAAiB,GAAG,KAAK,IAAL,EAAW,qBAA/B;;AACF,eAAK,YAAA,CAAA,OAAA,CAAW,QAAhB;AACE,iBAAK,WAAL,CAAiB,GAAG,KAAK,IAAL,EAAW,8BAA/B;;AACF,eAAK,YAAA,CAAA,OAAA,CAAW,QAAhB;AACE,iBAAK,WAAL,CAAiB,GAAG,KAAK,IAAL,EAAW,uBAA/B;AANJ;;AASA,aAAK,MAAL,GAAc,YAAA,CAAA,OAAA,CAAW,OAAzB;AACA,cAAM,WAAW,CAAC,IAAZ,CAAiB,IAAjB,CAAN;AACA,aAAK,MAAL,CAAY,IAAZ,CAAiB,GAAG,KAAK,IAAL,EAAW,SAAS,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,GAAL,KAAa,SAAxB,CAAkC,KAA1E;AACD,OAhBD,CAgBE,OAAO,GAAP,EAAY;AACZ,cAAM,GAAN;AACD,OAlBD,SAkBU;AACR,YAAI,KAAK,MAAL,KAAgB,YAAA,CAAA,OAAA,CAAW,QAA/B,EAAyC;AACvC,eAAK,MAAL,GAAc,YAAA,CAAA,OAAA,CAAW,QAAzB;AACD;AACF;AACF,K;AAAA;;AAEO,EAAA,UAAU,CAAC,cAAD,EAA2B;AAC3C,QAAI,KAAK,MAAL,KAAgB,YAAA,CAAA,OAAA,CAAW,QAA3B,IAAuC,KAAK,MAAL,KAAgB,YAAA,CAAA,OAAA,CAAW,QAAtE,EAAgF;AAC9E;AACD;;AACD,SAAK,MAAL,CAAY,IAAZ,CAAiB,kBAAkB,KAAK,IAAL,EAAW,EAA9C;AACA,SAAK,MAAL,GAAc,YAAA,CAAA,OAAA,CAAW,QAAzB;AAEA,IAAA,cAAc,CAAC,IAAf,CAAoB,IAApB;AACD;;AAlEmC;;AAAtC,OAAA,CAAA,OAAA,GAAA,QAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst TaskStatus_1 = require(\"./TaskStatus\");\n/*\n * [[BaseTask]] provides common utilities for task implementations.\n */\nclass BaseTask {\n    constructor(logger) {\n        this.logger = logger;\n        this.taskName = 'BaseTask';\n        this.parentTask = null;\n        this.status = TaskStatus_1.default.IDLE;\n        this.run = this.baseRun.bind(this, this.run);\n        this.cancel = this.baseCancel.bind(this, this.cancel);\n    }\n    cancel() { }\n    name() {\n        return this.parentTask ? `${this.parentTask.name()}/${this.taskName}` : this.taskName;\n    }\n    setParent(parentTask) {\n        this.parentTask = parentTask;\n    }\n    getStatus() {\n        return this.status;\n    }\n    logAndThrow(message) {\n        this.logger.info(message);\n        throw new Error(message);\n    }\n    baseRun(originalRun) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const startTime = Date.now();\n                this.logger.info(`running task ${this.name()}`);\n                switch (this.status) {\n                    case TaskStatus_1.default.RUNNING:\n                        this.logAndThrow(`${this.name()} is already running`);\n                    case TaskStatus_1.default.CANCELED:\n                        this.logAndThrow(`${this.name()} was canceled before running`);\n                    case TaskStatus_1.default.FINISHED:\n                        this.logAndThrow(`${this.name()} was already finished`);\n                }\n                this.status = TaskStatus_1.default.RUNNING;\n                yield originalRun.call(this);\n                this.logger.info(`${this.name()} took ${Math.round(Date.now() - startTime)} ms`);\n            }\n            catch (err) {\n                throw err;\n            }\n            finally {\n                if (this.status !== TaskStatus_1.default.CANCELED) {\n                    this.status = TaskStatus_1.default.FINISHED;\n                }\n            }\n        });\n    }\n    baseCancel(originalCancel) {\n        if (this.status === TaskStatus_1.default.CANCELED || this.status === TaskStatus_1.default.FINISHED) {\n            return;\n        }\n        this.logger.info(`canceling task ${this.name()}`);\n        this.status = TaskStatus_1.default.CANCELED;\n        originalCancel.call(this);\n    }\n}\nexports.default = BaseTask;\n//# sourceMappingURL=BaseTask.js.map"]},"metadata":{},"sourceType":"script"}