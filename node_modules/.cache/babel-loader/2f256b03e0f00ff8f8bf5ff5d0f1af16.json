{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MeetingSessionLifecycleEventCondition = void 0;\n/**\n * [[MeetingSessionLifecycleEventCondition]] indicates the lifecycle event condition.\n * Add new enums to the bottom. We depend on these numbers for analytics.\n */\n\nvar MeetingSessionLifecycleEventCondition;\n\n(function (MeetingSessionLifecycleEventCondition) {\n  /**\n   * The session is connecting for the first time.\n   */\n  MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition[\"ConnectingNew\"] = 0] = \"ConnectingNew\";\n  /**\n   * The session was connected before and is now reconnecting.\n   */\n\n  MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition[\"ReconnectingExisting\"] = 1] = \"ReconnectingExisting\";\n  /**\n   * The session successfully arrived in the started state for the first time.\n   */\n\n  MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition[\"StartedNew\"] = 2] = \"StartedNew\";\n  /**\n   * The session successfully arrived in the started state but was connected before.\n   * This can happen, for example, when the connection type changes.\n   */\n\n  MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition[\"StartedExisting\"] = 3] = \"StartedExisting\";\n  /**\n   * The session successfully arrived in the started state following a reconnect.\n   */\n\n  MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition[\"StartedAfterReconnect\"] = 4] = \"StartedAfterReconnect\";\n  /**\n   * The session stopped cleanly, probably due to leaving the call.\n   */\n\n  MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition[\"StoppedCleanly\"] = 5] = \"StoppedCleanly\";\n  /**\n   * The session stopped due to a failure. A status code will indicate the cause of\n   * the failure.\n   */\n\n  MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition[\"StoppedWithFailure\"] = 6] = \"StoppedWithFailure\";\n})(MeetingSessionLifecycleEventCondition = exports.MeetingSessionLifecycleEventCondition || (exports.MeetingSessionLifecycleEventCondition = {}));\n\nexports.default = MeetingSessionLifecycleEventCondition;","map":{"version":3,"sources":["../../src/meetingsession/MeetingSessionLifecycleEventCondition.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAEA;;;AAGG;;AACH,IAAY,qCAAZ;;AAAA,CAAA,UAAY,qCAAZ,EAAiD;AAC/C;;AAEG;AACH,EAAA,qCAAA,CAAA,qCAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAA;AAEA;;AAEG;;AACH,EAAA,qCAAA,CAAA,qCAAA,CAAA,sBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,sBAAA;AAEA;;AAEG;;AACH,EAAA,qCAAA,CAAA,qCAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AAEA;;;AAGG;;AACH,EAAA,qCAAA,CAAA,qCAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iBAAA;AAEA;;AAEG;;AACH,EAAA,qCAAA,CAAA,qCAAA,CAAA,uBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,uBAAA;AAEA;;AAEG;;AACH,EAAA,qCAAA,CAAA,qCAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gBAAA;AAEA;;;AAGG;;AACH,EAAA,qCAAA,CAAA,qCAAA,CAAA,oBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,oBAAA;AACD,CArCD,EAAY,qCAAqC,GAArC,OAAA,CAAA,qCAAA,KAAA,OAAA,CAAA,qCAAA,GAAqC,EAArC,CAAZ;;AAuCA,OAAA,CAAA,OAAA,GAAe,qCAAf","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MeetingSessionLifecycleEventCondition = void 0;\n/**\n * [[MeetingSessionLifecycleEventCondition]] indicates the lifecycle event condition.\n * Add new enums to the bottom. We depend on these numbers for analytics.\n */\nvar MeetingSessionLifecycleEventCondition;\n(function (MeetingSessionLifecycleEventCondition) {\n    /**\n     * The session is connecting for the first time.\n     */\n    MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition[\"ConnectingNew\"] = 0] = \"ConnectingNew\";\n    /**\n     * The session was connected before and is now reconnecting.\n     */\n    MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition[\"ReconnectingExisting\"] = 1] = \"ReconnectingExisting\";\n    /**\n     * The session successfully arrived in the started state for the first time.\n     */\n    MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition[\"StartedNew\"] = 2] = \"StartedNew\";\n    /**\n     * The session successfully arrived in the started state but was connected before.\n     * This can happen, for example, when the connection type changes.\n     */\n    MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition[\"StartedExisting\"] = 3] = \"StartedExisting\";\n    /**\n     * The session successfully arrived in the started state following a reconnect.\n     */\n    MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition[\"StartedAfterReconnect\"] = 4] = \"StartedAfterReconnect\";\n    /**\n     * The session stopped cleanly, probably due to leaving the call.\n     */\n    MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition[\"StoppedCleanly\"] = 5] = \"StoppedCleanly\";\n    /**\n     * The session stopped due to a failure. A status code will indicate the cause of\n     * the failure.\n     */\n    MeetingSessionLifecycleEventCondition[MeetingSessionLifecycleEventCondition[\"StoppedWithFailure\"] = 6] = \"StoppedWithFailure\";\n})(MeetingSessionLifecycleEventCondition = exports.MeetingSessionLifecycleEventCondition || (exports.MeetingSessionLifecycleEventCondition = {}));\nexports.default = MeetingSessionLifecycleEventCondition;\n//# sourceMappingURL=MeetingSessionLifecycleEventCondition.js.map"]},"metadata":{},"sourceType":"script"}