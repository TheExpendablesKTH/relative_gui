{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst DefaultTransceiverController_1 = require(\"./DefaultTransceiverController\");\n\nclass SimulcastTransceiverController extends DefaultTransceiverController_1.default {\n  constructor(logger, browserBehavior) {\n    super(logger, browserBehavior);\n    this.videoQualityControlParameterMap = new Map();\n    let scale = 4;\n\n    for (let i = 0; i < SimulcastTransceiverController.NAME_ARR_ASCENDING.length; i++) {\n      const ridName = SimulcastTransceiverController.NAME_ARR_ASCENDING[i];\n      this.videoQualityControlParameterMap.set(ridName, {\n        rid: ridName,\n        scaleResolutionDownBy: scale,\n        maxBitrate: SimulcastTransceiverController.BITRATE_ARR_ASCENDING[i] * 1000\n      });\n      scale = scale / 2;\n    }\n  }\n\n  setEncodingParameters(encodingParamMap) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._localCameraTransceiver || this._localCameraTransceiver.direction !== 'sendrecv') {\n        return;\n      }\n\n      const sender = this._localCameraTransceiver.sender;\n      const newEncodingParams = Array.from(encodingParamMap.values());\n\n      if (newEncodingParams.length <= 0) {\n        return;\n      }\n\n      const oldParam = sender.getParameters();\n\n      if (!oldParam.encodings) {\n        oldParam.encodings = newEncodingParams;\n      } else {\n        for (let i = 0; i < oldParam.encodings.length; i++) {\n          if (oldParam.encodings[i].rid === SimulcastTransceiverController.LOW_LEVEL_NAME) {\n            oldParam.encodings[i].maxBitrate = encodingParamMap.get(SimulcastTransceiverController.LOW_LEVEL_NAME).maxBitrate;\n            oldParam.encodings[i].active = encodingParamMap.get(SimulcastTransceiverController.LOW_LEVEL_NAME).active;\n          }\n\n          if (oldParam.encodings[i].rid === SimulcastTransceiverController.MID_LEVEL_NAME) {\n            oldParam.encodings[i].maxBitrate = encodingParamMap.get(SimulcastTransceiverController.MID_LEVEL_NAME).maxBitrate;\n            oldParam.encodings[i].active = encodingParamMap.get(SimulcastTransceiverController.MID_LEVEL_NAME).active;\n          }\n\n          if (oldParam.encodings[i].rid === SimulcastTransceiverController.HIGH_LEVEL_NAME) {\n            oldParam.encodings[i].maxBitrate = encodingParamMap.get(SimulcastTransceiverController.HIGH_LEVEL_NAME).maxBitrate;\n            oldParam.encodings[i].active = encodingParamMap.get(SimulcastTransceiverController.HIGH_LEVEL_NAME).active;\n          }\n        }\n      }\n\n      yield sender.setParameters(oldParam);\n      this.logVideoTransceiverParameters();\n    });\n  }\n\n  static replaceAudioTrackForSender(sender, track) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!sender) {\n        return false;\n      }\n\n      yield sender.replaceTrack(track);\n      return true;\n    });\n  }\n\n  setVideoSendingBitrateKbps(_bitrateKbps) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return;\n    });\n  }\n\n  setupLocalTransceivers() {\n    if (!this.useTransceivers()) {\n      return;\n    }\n\n    if (!this.defaultMediaStream && typeof MediaStream !== 'undefined') {\n      this.defaultMediaStream = new MediaStream();\n    }\n\n    if (!this._localAudioTransceiver) {\n      this._localAudioTransceiver = this.peer.addTransceiver('audio', {\n        direction: 'inactive',\n        streams: [this.defaultMediaStream]\n      });\n    }\n\n    if (!this._localCameraTransceiver) {\n      const encodingParams = Array.from(this.videoQualityControlParameterMap.values());\n      this._localCameraTransceiver = this.peer.addTransceiver('video', {\n        direction: 'inactive',\n        streams: [this.defaultMediaStream],\n        sendEncodings: encodingParams\n      });\n    }\n  }\n\n  logVideoTransceiverParameters() {\n    const params = this._localCameraTransceiver.sender.getParameters();\n\n    const encodings = params.encodings;\n    let msg = 'simulcast: current encoding parameters \\n';\n\n    for (const encodingParam of encodings) {\n      msg += `rid=${encodingParam.rid} maxBitrate=${encodingParam.maxBitrate} active=${encodingParam.active} \\n`;\n    }\n\n    this.logger.info(msg);\n  }\n\n}\n\nexports.default = SimulcastTransceiverController;\nSimulcastTransceiverController.LOW_LEVEL_NAME = 'low';\nSimulcastTransceiverController.MID_LEVEL_NAME = 'mid';\nSimulcastTransceiverController.HIGH_LEVEL_NAME = 'hi';\nSimulcastTransceiverController.NAME_ARR_ASCENDING = ['low', 'mid', 'hi'];\nSimulcastTransceiverController.BITRATE_ARR_ASCENDING = [200, 400, 1100];","map":{"version":3,"sources":["../../src/transceivercontroller/SimulcastTransceiverController.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst DefaultTransceiverController_1 = require(\"./DefaultTransceiverController\");\nclass SimulcastTransceiverController extends DefaultTransceiverController_1.default {\n    constructor(logger, browserBehavior) {\n        super(logger, browserBehavior);\n        this.videoQualityControlParameterMap = new Map();\n        let scale = 4;\n        for (let i = 0; i < SimulcastTransceiverController.NAME_ARR_ASCENDING.length; i++) {\n            const ridName = SimulcastTransceiverController.NAME_ARR_ASCENDING[i];\n            this.videoQualityControlParameterMap.set(ridName, {\n                rid: ridName,\n                scaleResolutionDownBy: scale,\n                maxBitrate: SimulcastTransceiverController.BITRATE_ARR_ASCENDING[i] * 1000,\n            });\n            scale = scale / 2;\n        }\n    }\n    setEncodingParameters(encodingParamMap) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._localCameraTransceiver || this._localCameraTransceiver.direction !== 'sendrecv') {\n                return;\n            }\n            const sender = this._localCameraTransceiver.sender;\n            const newEncodingParams = Array.from(encodingParamMap.values());\n            if (newEncodingParams.length <= 0) {\n                return;\n            }\n            const oldParam = sender.getParameters();\n            if (!oldParam.encodings) {\n                oldParam.encodings = newEncodingParams;\n            }\n            else {\n                for (let i = 0; i < oldParam.encodings.length; i++) {\n                    if (oldParam.encodings[i].rid === SimulcastTransceiverController.LOW_LEVEL_NAME) {\n                        oldParam.encodings[i].maxBitrate = encodingParamMap.get(SimulcastTransceiverController.LOW_LEVEL_NAME).maxBitrate;\n                        oldParam.encodings[i].active = encodingParamMap.get(SimulcastTransceiverController.LOW_LEVEL_NAME).active;\n                    }\n                    if (oldParam.encodings[i].rid === SimulcastTransceiverController.MID_LEVEL_NAME) {\n                        oldParam.encodings[i].maxBitrate = encodingParamMap.get(SimulcastTransceiverController.MID_LEVEL_NAME).maxBitrate;\n                        oldParam.encodings[i].active = encodingParamMap.get(SimulcastTransceiverController.MID_LEVEL_NAME).active;\n                    }\n                    if (oldParam.encodings[i].rid === SimulcastTransceiverController.HIGH_LEVEL_NAME) {\n                        oldParam.encodings[i].maxBitrate = encodingParamMap.get(SimulcastTransceiverController.HIGH_LEVEL_NAME).maxBitrate;\n                        oldParam.encodings[i].active = encodingParamMap.get(SimulcastTransceiverController.HIGH_LEVEL_NAME).active;\n                    }\n                }\n            }\n            yield sender.setParameters(oldParam);\n            this.logVideoTransceiverParameters();\n        });\n    }\n    static replaceAudioTrackForSender(sender, track) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!sender) {\n                return false;\n            }\n            yield sender.replaceTrack(track);\n            return true;\n        });\n    }\n    setVideoSendingBitrateKbps(_bitrateKbps) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return;\n        });\n    }\n    setupLocalTransceivers() {\n        if (!this.useTransceivers()) {\n            return;\n        }\n        if (!this.defaultMediaStream && typeof MediaStream !== 'undefined') {\n            this.defaultMediaStream = new MediaStream();\n        }\n        if (!this._localAudioTransceiver) {\n            this._localAudioTransceiver = this.peer.addTransceiver('audio', {\n                direction: 'inactive',\n                streams: [this.defaultMediaStream],\n            });\n        }\n        if (!this._localCameraTransceiver) {\n            const encodingParams = Array.from(this.videoQualityControlParameterMap.values());\n            this._localCameraTransceiver = this.peer.addTransceiver('video', {\n                direction: 'inactive',\n                streams: [this.defaultMediaStream],\n                sendEncodings: encodingParams,\n            });\n        }\n    }\n    logVideoTransceiverParameters() {\n        const params = this._localCameraTransceiver.sender.getParameters();\n        const encodings = params.encodings;\n        let msg = 'simulcast: current encoding parameters \\n';\n        for (const encodingParam of encodings) {\n            msg += `rid=${encodingParam.rid} maxBitrate=${encodingParam.maxBitrate} active=${encodingParam.active} \\n`;\n        }\n        this.logger.info(msg);\n    }\n}\nexports.default = SimulcastTransceiverController;\nSimulcastTransceiverController.LOW_LEVEL_NAME = 'low';\nSimulcastTransceiverController.MID_LEVEL_NAME = 'mid';\nSimulcastTransceiverController.HIGH_LEVEL_NAME = 'hi';\nSimulcastTransceiverController.NAME_ARR_ASCENDING = ['low', 'mid', 'hi'];\nSimulcastTransceiverController.BITRATE_ARR_ASCENDING = [200, 400, 1100];\n//# sourceMappingURL=SimulcastTransceiverController.js.map"]},"metadata":{},"sourceType":"script"}