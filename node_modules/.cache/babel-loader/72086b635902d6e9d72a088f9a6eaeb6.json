{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst DataMessage_1 = require(\"../datamessage/DataMessage\");\n\nconst SignalingClientEventType_1 = require(\"../signalingclient/SignalingClientEventType\");\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n\nclass SendAndReceiveDataMessagesTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'SendAndReceiveDataMessagesTask';\n\n    this.sendDataMessageHandler = (topic, data, // eslint-disable-line @typescript-eslint/no-explicit-any\n    lifetimeMs) => {\n      if (this.context.signalingClient.ready()) {\n        let uint8Data;\n\n        if (data instanceof Uint8Array) {\n          uint8Data = data;\n        } else if (typeof data === 'string') {\n          uint8Data = new TextEncoder().encode(data);\n        } else {\n          uint8Data = new TextEncoder().encode(JSON.stringify(data));\n        }\n\n        this.validateDataMessage(topic, uint8Data, lifetimeMs);\n        const message = SignalingProtocol_js_1.SdkDataMessagePayload.create();\n        message.topic = topic;\n        message.lifetimeMs = lifetimeMs;\n        message.data = uint8Data;\n        const messageFrame = SignalingProtocol_js_1.SdkDataMessageFrame.create();\n        messageFrame.messages = [message];\n        this.context.signalingClient.sendDataMessage(messageFrame);\n      } else {\n        throw new Error('Signaling client is not ready');\n      }\n    };\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.context.removableObservers.push(this);\n      this.context.signalingClient.registerObserver(this);\n      this.context.realtimeController.realtimeSubscribeToSendDataMessage(this.sendDataMessageHandler);\n    });\n  }\n\n  removeObserver() {\n    this.context.realtimeController.realtimeUnsubscribeFromSendDataMessage(this.sendDataMessageHandler);\n    this.context.signalingClient.removeObserver(this);\n  }\n\n  handleSignalingClientEvent(event) {\n    if (event.type === SignalingClientEventType_1.default.ReceivedSignalFrame && event.message.type === SignalingProtocol_js_1.SdkSignalFrame.Type.DATA_MESSAGE) {\n      for (const message of event.message.dataMessage.messages) {\n        const dataMessage = new DataMessage_1.default(message.ingestTimeNs / 1000000, message.topic, message.data, message.senderAttendeeId, message.senderExternalUserId, message.ingestTimeNs === 0);\n        this.context.realtimeController.realtimeReceiveDataMessage(dataMessage);\n      }\n    }\n  }\n\n  validateDataMessage(topic, data, lifetimeMs) {\n    if (!SendAndReceiveDataMessagesTask.TOPIC_REGEX.test(topic)) {\n      throw new Error('Invalid topic');\n    }\n\n    if (data.length > SendAndReceiveDataMessagesTask.DATA_SIZE) {\n      throw new Error('Data size has to be less than 2048 bytes');\n    }\n\n    if (lifetimeMs && lifetimeMs < 0) {\n      throw new Error('The life time of the message has to be non negative');\n    }\n  }\n\n}\n\nexports.default = SendAndReceiveDataMessagesTask;\nSendAndReceiveDataMessagesTask.TOPIC_REGEX = new RegExp(/^[a-zA-Z0-9_-]{1,36}$/);\nSendAndReceiveDataMessagesTask.DATA_SIZE = 2048;","map":{"version":3,"sources":["../../src/task/SendAndReceiveDataMessagesTask.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst DataMessage_1 = require(\"../datamessage/DataMessage\");\nconst SignalingClientEventType_1 = require(\"../signalingclient/SignalingClientEventType\");\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\nconst BaseTask_1 = require(\"./BaseTask\");\nclass SendAndReceiveDataMessagesTask extends BaseTask_1.default {\n    constructor(context) {\n        super(context.logger);\n        this.context = context;\n        this.taskName = 'SendAndReceiveDataMessagesTask';\n        this.sendDataMessageHandler = (topic, data, // eslint-disable-line @typescript-eslint/no-explicit-any\n        lifetimeMs) => {\n            if (this.context.signalingClient.ready()) {\n                let uint8Data;\n                if (data instanceof Uint8Array) {\n                    uint8Data = data;\n                }\n                else if (typeof data === 'string') {\n                    uint8Data = new TextEncoder().encode(data);\n                }\n                else {\n                    uint8Data = new TextEncoder().encode(JSON.stringify(data));\n                }\n                this.validateDataMessage(topic, uint8Data, lifetimeMs);\n                const message = SignalingProtocol_js_1.SdkDataMessagePayload.create();\n                message.topic = topic;\n                message.lifetimeMs = lifetimeMs;\n                message.data = uint8Data;\n                const messageFrame = SignalingProtocol_js_1.SdkDataMessageFrame.create();\n                messageFrame.messages = [message];\n                this.context.signalingClient.sendDataMessage(messageFrame);\n            }\n            else {\n                throw new Error('Signaling client is not ready');\n            }\n        };\n    }\n    run() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.context.removableObservers.push(this);\n            this.context.signalingClient.registerObserver(this);\n            this.context.realtimeController.realtimeSubscribeToSendDataMessage(this.sendDataMessageHandler);\n        });\n    }\n    removeObserver() {\n        this.context.realtimeController.realtimeUnsubscribeFromSendDataMessage(this.sendDataMessageHandler);\n        this.context.signalingClient.removeObserver(this);\n    }\n    handleSignalingClientEvent(event) {\n        if (event.type === SignalingClientEventType_1.default.ReceivedSignalFrame &&\n            event.message.type === SignalingProtocol_js_1.SdkSignalFrame.Type.DATA_MESSAGE) {\n            for (const message of event.message.dataMessage.messages) {\n                const dataMessage = new DataMessage_1.default(message.ingestTimeNs / 1000000, message.topic, message.data, message.senderAttendeeId, message.senderExternalUserId, message.ingestTimeNs === 0);\n                this.context.realtimeController.realtimeReceiveDataMessage(dataMessage);\n            }\n        }\n    }\n    validateDataMessage(topic, data, lifetimeMs) {\n        if (!SendAndReceiveDataMessagesTask.TOPIC_REGEX.test(topic)) {\n            throw new Error('Invalid topic');\n        }\n        if (data.length > SendAndReceiveDataMessagesTask.DATA_SIZE) {\n            throw new Error('Data size has to be less than 2048 bytes');\n        }\n        if (lifetimeMs && lifetimeMs < 0) {\n            throw new Error('The life time of the message has to be non negative');\n        }\n    }\n}\nexports.default = SendAndReceiveDataMessagesTask;\nSendAndReceiveDataMessagesTask.TOPIC_REGEX = new RegExp(/^[a-zA-Z0-9_-]{1,36}$/);\nSendAndReceiveDataMessagesTask.DATA_SIZE = 2048;\n//# sourceMappingURL=SendAndReceiveDataMessagesTask.js.map"]},"metadata":{},"sourceType":"script"}