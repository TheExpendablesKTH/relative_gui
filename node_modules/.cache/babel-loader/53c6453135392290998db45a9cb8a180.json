{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst DefaultActiveSpeakerDetector_1 = require(\"../activespeakerdetector/DefaultActiveSpeakerDetector\");\n\nconst DefaultAudioMixController_1 = require(\"../audiomixcontroller/DefaultAudioMixController\");\n\nconst AudioProfile_1 = require(\"../audioprofile/AudioProfile\");\n\nconst DefaultBrowserBehavior_1 = require(\"../browserbehavior/DefaultBrowserBehavior\");\n\nconst ConnectionHealthData_1 = require(\"../connectionhealthpolicy/ConnectionHealthData\");\n\nconst SignalingAndMetricsConnectionMonitor_1 = require(\"../connectionmonitor/SignalingAndMetricsConnectionMonitor\");\n\nconst DefaultEventController_1 = require(\"../eventcontroller/DefaultEventController\");\n\nconst Maybe_1 = require(\"../maybe/Maybe\");\n\nconst MeetingSessionStatus_1 = require(\"../meetingsession/MeetingSessionStatus\");\n\nconst MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\n\nconst MeetingSessionVideoAvailability_1 = require(\"../meetingsession/MeetingSessionVideoAvailability\");\n\nconst DefaultPingPong_1 = require(\"../pingpong/DefaultPingPong\");\n\nconst DefaultRealtimeController_1 = require(\"../realtimecontroller/DefaultRealtimeController\");\n\nconst AsyncScheduler_1 = require(\"../scheduler/AsyncScheduler\");\n\nconst DefaultSessionStateController_1 = require(\"../sessionstatecontroller/DefaultSessionStateController\");\n\nconst SessionStateControllerAction_1 = require(\"../sessionstatecontroller/SessionStateControllerAction\");\n\nconst SessionStateControllerState_1 = require(\"../sessionstatecontroller/SessionStateControllerState\");\n\nconst SessionStateControllerTransitionResult_1 = require(\"../sessionstatecontroller/SessionStateControllerTransitionResult\");\n\nconst DefaultSignalingClient_1 = require(\"../signalingclient/DefaultSignalingClient\");\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nconst DefaultStatsCollector_1 = require(\"../statscollector/DefaultStatsCollector\");\n\nconst AttachMediaInputTask_1 = require(\"../task/AttachMediaInputTask\");\n\nconst CleanRestartedSessionTask_1 = require(\"../task/CleanRestartedSessionTask\");\n\nconst CleanStoppedSessionTask_1 = require(\"../task/CleanStoppedSessionTask\");\n\nconst CreatePeerConnectionTask_1 = require(\"../task/CreatePeerConnectionTask\");\n\nconst CreateSDPTask_1 = require(\"../task/CreateSDPTask\");\n\nconst FinishGatheringICECandidatesTask_1 = require(\"../task/FinishGatheringICECandidatesTask\");\n\nconst JoinAndReceiveIndexTask_1 = require(\"../task/JoinAndReceiveIndexTask\");\n\nconst LeaveAndReceiveLeaveAckTask_1 = require(\"../task/LeaveAndReceiveLeaveAckTask\");\n\nconst ListenForVolumeIndicatorsTask_1 = require(\"../task/ListenForVolumeIndicatorsTask\");\n\nconst MonitorTask_1 = require(\"../task/MonitorTask\");\n\nconst OpenSignalingConnectionTask_1 = require(\"../task/OpenSignalingConnectionTask\");\n\nconst ParallelGroupTask_1 = require(\"../task/ParallelGroupTask\");\n\nconst ReceiveAudioInputTask_1 = require(\"../task/ReceiveAudioInputTask\");\n\nconst ReceiveTURNCredentialsTask_1 = require(\"../task/ReceiveTURNCredentialsTask\");\n\nconst ReceiveVideoInputTask_1 = require(\"../task/ReceiveVideoInputTask\");\n\nconst ReceiveVideoStreamIndexTask_1 = require(\"../task/ReceiveVideoStreamIndexTask\");\n\nconst SendAndReceiveDataMessagesTask_1 = require(\"../task/SendAndReceiveDataMessagesTask\");\n\nconst SerialGroupTask_1 = require(\"../task/SerialGroupTask\");\n\nconst SetLocalDescriptionTask_1 = require(\"../task/SetLocalDescriptionTask\");\n\nconst SetRemoteDescriptionTask_1 = require(\"../task/SetRemoteDescriptionTask\");\n\nconst SubscribeAndReceiveSubscribeAckTask_1 = require(\"../task/SubscribeAndReceiveSubscribeAckTask\");\n\nconst TimeoutTask_1 = require(\"../task/TimeoutTask\");\n\nconst WaitForAttendeePresenceTask_1 = require(\"../task/WaitForAttendeePresenceTask\");\n\nconst DefaultTransceiverController_1 = require(\"../transceivercontroller/DefaultTransceiverController\");\n\nconst SimulcastTransceiverController_1 = require(\"../transceivercontroller/SimulcastTransceiverController\");\n\nconst DefaultVideoCaptureAndEncodeParameter_1 = require(\"../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter\");\n\nconst AllHighestVideoBandwidthPolicy_1 = require(\"../videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy\");\n\nconst VideoAdaptiveProbePolicy_1 = require(\"../videodownlinkbandwidthpolicy/VideoAdaptiveProbePolicy\");\n\nconst DefaultVideoStreamIdSet_1 = require(\"../videostreamidset/DefaultVideoStreamIdSet\");\n\nconst DefaultVideoStreamIndex_1 = require(\"../videostreamindex/DefaultVideoStreamIndex\");\n\nconst SimulcastVideoStreamIndex_1 = require(\"../videostreamindex/SimulcastVideoStreamIndex\");\n\nconst DefaultVideoTileController_1 = require(\"../videotilecontroller/DefaultVideoTileController\");\n\nconst DefaultVideoTileFactory_1 = require(\"../videotilefactory/DefaultVideoTileFactory\");\n\nconst DefaultSimulcastUplinkPolicy_1 = require(\"../videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicy\");\n\nconst NScaleVideoUplinkBandwidthPolicy_1 = require(\"../videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy\");\n\nconst DefaultVolumeIndicatorAdapter_1 = require(\"../volumeindicatoradapter/DefaultVolumeIndicatorAdapter\");\n\nconst AudioVideoControllerState_1 = require(\"./AudioVideoControllerState\");\n\nclass DefaultAudioVideoController {\n  constructor(configuration, logger, webSocketAdapter, mediaStreamBroker, reconnectController) {\n    this._audioProfile = new AudioProfile_1.default();\n    this.connectionHealthData = new ConnectionHealthData_1.default();\n    this.observerQueue = new Set();\n    this.meetingSessionContext = new AudioVideoControllerState_1.default();\n    this.enableSimulcast = false;\n    this.totalRetryCount = 0;\n    this.startAudioVideoTimestamp = 0;\n    this.destroyed = false;\n    this._logger = logger;\n    this.sessionStateController = new DefaultSessionStateController_1.default(this._logger);\n    this._configuration = configuration;\n    this.enableSimulcast = configuration.enableUnifiedPlanForChromiumBasedBrowsers && configuration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers && new DefaultBrowserBehavior_1.default().hasChromiumWebRTC();\n    this._webSocketAdapter = webSocketAdapter;\n    this._realtimeController = new DefaultRealtimeController_1.default();\n\n    this._realtimeController.realtimeSetLocalAttendeeId(configuration.credentials.attendeeId, configuration.credentials.externalUserId);\n\n    this._mediaStreamBroker = mediaStreamBroker;\n    this._reconnectController = reconnectController;\n    this._videoTileController = new DefaultVideoTileController_1.default(new DefaultVideoTileFactory_1.default(), this, this._logger);\n    this._audioMixController = new DefaultAudioMixController_1.default(this._logger);\n    this.meetingSessionContext.logger = this._logger;\n    this._eventController = new DefaultEventController_1.default(this);\n  }\n\n  destroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.observerQueue.clear();\n      this.destroyed = true;\n    });\n  }\n\n  get configuration() {\n    return this._configuration;\n  }\n\n  get realtimeController() {\n    return this._realtimeController;\n  }\n\n  get activeSpeakerDetector() {\n    // Lazy init.\n    if (!this._activeSpeakerDetector) {\n      this._activeSpeakerDetector = new DefaultActiveSpeakerDetector_1.default(this._realtimeController, this._configuration.credentials.attendeeId, this.handleHasBandwidthPriority.bind(this));\n    }\n\n    return this._activeSpeakerDetector;\n  }\n\n  get videoTileController() {\n    return this._videoTileController;\n  }\n\n  get audioMixController() {\n    return this._audioMixController;\n  }\n\n  get eventController() {\n    return this._eventController;\n  }\n\n  get logger() {\n    return this._logger;\n  }\n\n  get rtcPeerConnection() {\n    return this.meetingSessionContext && this.meetingSessionContext.peer || null;\n  }\n\n  get mediaStreamBroker() {\n    return this._mediaStreamBroker;\n  }\n\n  getRTCPeerConnectionStats(selector) {\n    if (!this.rtcPeerConnection) {\n      return null;\n    }\n\n    return this.rtcPeerConnection.getStats(selector);\n  }\n\n  setAudioProfile(audioProfile) {\n    this._audioProfile = audioProfile;\n  }\n\n  addObserver(observer) {\n    this.logger.info('adding meeting observer');\n    this.observerQueue.add(observer);\n  }\n\n  removeObserver(observer) {\n    this.logger.info('removing meeting observer');\n    this.observerQueue.delete(observer);\n  }\n\n  forEachObserver(observerFunc) {\n    for (const observer of this.observerQueue) {\n      AsyncScheduler_1.default.nextTick(() => {\n        if (this.observerQueue.has(observer)) {\n          observerFunc(observer);\n        }\n      });\n    }\n  }\n\n  start() {\n    this.activeSpeakerDetector;\n    this.sessionStateController.perform(SessionStateControllerAction_1.default.Connect, () => {\n      this.actionConnect(false);\n    });\n  }\n\n  actionConnect(reconnecting) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.connectionHealthData.reset();\n      this.meetingSessionContext = new AudioVideoControllerState_1.default();\n      this.meetingSessionContext.logger = this.logger;\n      this.meetingSessionContext.eventController = this.eventController;\n      this.meetingSessionContext.browserBehavior = new DefaultBrowserBehavior_1.default({\n        enableUnifiedPlanForChromiumBasedBrowsers: this.configuration.enableUnifiedPlanForChromiumBasedBrowsers\n      });\n      this.meetingSessionContext.meetingSessionConfiguration = this.configuration;\n      this.meetingSessionContext.signalingClient = new DefaultSignalingClient_1.default(this._webSocketAdapter, this.logger);\n      this.meetingSessionContext.mediaStreamBroker = this._mediaStreamBroker;\n      this.meetingSessionContext.realtimeController = this._realtimeController;\n      this.meetingSessionContext.audioMixController = this._audioMixController;\n      this.meetingSessionContext.audioVideoController = this;\n\n      if (this.enableSimulcast) {\n        this.meetingSessionContext.transceiverController = new SimulcastTransceiverController_1.default(this.logger, this.meetingSessionContext.browserBehavior);\n      } else {\n        this.meetingSessionContext.transceiverController = new DefaultTransceiverController_1.default(this.logger, this.meetingSessionContext.browserBehavior);\n      }\n\n      this.meetingSessionContext.volumeIndicatorAdapter = new DefaultVolumeIndicatorAdapter_1.default(this.logger, this._realtimeController, DefaultAudioVideoController.MIN_VOLUME_DECIBELS, DefaultAudioVideoController.MAX_VOLUME_DECIBELS);\n      this.meetingSessionContext.videoTileController = this._videoTileController;\n      this.meetingSessionContext.videoDownlinkBandwidthPolicy = this.configuration.videoDownlinkBandwidthPolicy;\n      this.meetingSessionContext.videoUplinkBandwidthPolicy = this.configuration.videoUplinkBandwidthPolicy;\n      this.meetingSessionContext.enableSimulcast = this.enableSimulcast;\n\n      if (this.enableSimulcast) {\n        const simulcastPolicy = new DefaultSimulcastUplinkPolicy_1.default(this.configuration.credentials.attendeeId, this.meetingSessionContext.logger);\n        simulcastPolicy.addObserver(this);\n        this.meetingSessionContext.videoUplinkBandwidthPolicy = simulcastPolicy;\n        this.meetingSessionContext.videoDownlinkBandwidthPolicy = new VideoAdaptiveProbePolicy_1.default(this.logger, this.meetingSessionContext.videoTileController);\n        this.meetingSessionContext.videoStreamIndex = new SimulcastVideoStreamIndex_1.default(this.logger);\n      } else {\n        this.meetingSessionContext.enableSimulcast = false;\n        this.meetingSessionContext.videoStreamIndex = new DefaultVideoStreamIndex_1.default(this.logger);\n\n        if (!this.meetingSessionContext.videoDownlinkBandwidthPolicy) {\n          this.meetingSessionContext.videoDownlinkBandwidthPolicy = new AllHighestVideoBandwidthPolicy_1.default(this.configuration.credentials.attendeeId);\n        }\n\n        if (!this.meetingSessionContext.videoUplinkBandwidthPolicy) {\n          this.meetingSessionContext.videoUplinkBandwidthPolicy = new NScaleVideoUplinkBandwidthPolicy_1.default(this.configuration.credentials.attendeeId);\n        }\n\n        this.meetingSessionContext.audioProfile = this._audioProfile;\n      }\n\n      this.meetingSessionContext.lastKnownVideoAvailability = new MeetingSessionVideoAvailability_1.default();\n      this.meetingSessionContext.videoCaptureAndEncodeParameter = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, false);\n      this.meetingSessionContext.videosToReceive = new DefaultVideoStreamIdSet_1.default();\n      this.meetingSessionContext.videosPaused = new DefaultVideoStreamIdSet_1.default();\n      this.meetingSessionContext.statsCollector = new DefaultStatsCollector_1.default(this, this.logger, this.meetingSessionContext.browserBehavior);\n      this.meetingSessionContext.connectionMonitor = new SignalingAndMetricsConnectionMonitor_1.default(this, this._realtimeController, this._videoTileController, this.connectionHealthData, new DefaultPingPong_1.default(this.meetingSessionContext.signalingClient, DefaultAudioVideoController.PING_PONG_INTERVAL_MS, this.logger), this.meetingSessionContext.statsCollector);\n      this.meetingSessionContext.reconnectController = this._reconnectController;\n      this.meetingSessionContext.videoDeviceInformation = {};\n\n      if (!reconnecting) {\n        this.totalRetryCount = 0;\n\n        this._reconnectController.reset();\n\n        this.startAudioVideoTimestamp = Date.now();\n        this.forEachObserver(observer => {\n          Maybe_1.default.of(observer.audioVideoDidStartConnecting).map(f => f.bind(observer)(false));\n        });\n        /* istanbul ignore else */\n\n        if (this.eventController) {\n          this.eventController.publishEvent('meetingStartRequested');\n        }\n      }\n\n      this.meetingSessionContext.startAudioVideoTimestamp = this.startAudioVideoTimestamp;\n\n      if (this._reconnectController.hasStartedConnectionAttempt()) {\n        // This does not reset the reconnect deadline, but declare it's not the first connection.\n        this._reconnectController.startedConnectionAttempt(false);\n      } else {\n        this._reconnectController.startedConnectionAttempt(true);\n      }\n\n      try {\n        yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoStart'), [new MonitorTask_1.default(this.meetingSessionContext, this.configuration.connectionHealthPolicyConfiguration, this.connectionHealthData), new ReceiveAudioInputTask_1.default(this.meetingSessionContext), new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'Media', [new SerialGroupTask_1.default(this.logger, 'Signaling', [new OpenSignalingConnectionTask_1.default(this.meetingSessionContext), new ListenForVolumeIndicatorsTask_1.default(this.meetingSessionContext), new SendAndReceiveDataMessagesTask_1.default(this.meetingSessionContext), new JoinAndReceiveIndexTask_1.default(this.meetingSessionContext), new ReceiveTURNCredentialsTask_1.default(this.meetingSessionContext), // TODO: ensure index handler does not race with incoming index update\n        new ReceiveVideoStreamIndexTask_1.default(this.meetingSessionContext)]), new SerialGroupTask_1.default(this.logger, 'Peer', [new CreatePeerConnectionTask_1.default(this.meetingSessionContext), new AttachMediaInputTask_1.default(this.meetingSessionContext), new CreateSDPTask_1.default(this.meetingSessionContext), new SetLocalDescriptionTask_1.default(this.meetingSessionContext), new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext), new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext), this.meetingSessionContext.meetingSessionConfiguration.attendeePresenceTimeoutMs > 0 ? new TimeoutTask_1.default(this.logger, new ParallelGroupTask_1.default(this.logger, 'FinalizeConnection', [new WaitForAttendeePresenceTask_1.default(this.meetingSessionContext), new SetRemoteDescriptionTask_1.default(this.meetingSessionContext)]), this.meetingSessionContext.meetingSessionConfiguration.attendeePresenceTimeoutMs) : new SetRemoteDescriptionTask_1.default(this.meetingSessionContext)])]), this.configuration.connectionTimeoutMs)]).run();\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, () => {\n          /* istanbul ignore else */\n          if (this.eventController) {\n            this.meetingSessionContext.meetingStartDurationMs = Date.now() - this.startAudioVideoTimestamp;\n            this.eventController.publishEvent('meetingStartSucceeded', {\n              maxVideoTileCount: this.meetingSessionContext.maxVideoTileCount,\n              poorConnectionCount: this.meetingSessionContext.poorConnectionCount,\n              retryCount: this.totalRetryCount,\n              signalingOpenDurationMs: this.meetingSessionContext.signalingOpenDurationMs,\n              iceGatheringDurationMs: this.meetingSessionContext.iceGatheringDurationMs,\n              meetingStartDurationMs: this.meetingSessionContext.meetingStartDurationMs\n            });\n          }\n\n          this.meetingSessionContext.startTimeMs = Date.now();\n          this.actionFinishConnecting();\n        });\n      } catch (error) {\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.Fail, () => __awaiter(this, void 0, void 0, function* () {\n          const status = new MeetingSessionStatus_1.default(this.getMeetingStatusCode(error) || MeetingSessionStatusCode_1.default.TaskFailed);\n          yield this.actionDisconnect(status, true, error);\n\n          if (!this.handleMeetingSessionStatus(status, error)) {\n            this.notifyStop(status, error);\n          }\n        }));\n      }\n\n      this.connectionHealthData.setConnectionStartTime();\n    });\n  }\n\n  actionFinishConnecting() {\n    this.meetingSessionContext.videoDuplexMode = SignalingProtocol_js_1.SdkStreamServiceType.RX;\n\n    if (!this.meetingSessionContext.enableSimulcast) {\n      this.enforceBandwidthLimitationForSender(this.meetingSessionContext.videoCaptureAndEncodeParameter.encodeBitrates()[0]);\n    }\n\n    this.forEachObserver(observer => {\n      Maybe_1.default.of(observer.audioVideoDidStart).map(f => f.bind(observer)());\n    });\n\n    this._reconnectController.reset();\n  }\n\n  stop() {\n    /*\n    Stops the current audio video meeting session.\n    The stop method execution is deferred and executed after\n    the current reconnection attempt completes.\n    It disables any further reconnection attempts.\n    Upon completion, AudioVideoObserver's `audioVideoDidStop`\n    callback function is called with `MeetingSessionStatusCode.Left`.\n    */\n    this.sessionStateController.perform(SessionStateControllerAction_1.default.Disconnect, () => {\n      this._reconnectController.disableReconnect();\n\n      this.logger.info('attendee left meeting, session will not be reconnected');\n      this.actionDisconnect(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.Left), false, null);\n    });\n  }\n\n  actionDisconnect(status, reconnecting, error) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoStop'), [new TimeoutTask_1.default(this.logger, new LeaveAndReceiveLeaveAckTask_1.default(this.meetingSessionContext), this.configuration.connectionTimeoutMs)]).run();\n      } catch (stopError) {\n        this.logger.info('fail to stop');\n      }\n\n      try {\n        yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoClean'), [new TimeoutTask_1.default(this.logger, new CleanStoppedSessionTask_1.default(this.meetingSessionContext), this.configuration.connectionTimeoutMs)]).run();\n      } catch (cleanError) {\n        this.logger.info('fail to clean');\n      }\n\n      this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishDisconnecting, () => {\n        if (!reconnecting) {\n          this.notifyStop(status, error);\n        }\n      });\n    });\n  }\n\n  update() {\n    const result = this.sessionStateController.perform(SessionStateControllerAction_1.default.Update, () => {\n      this.actionUpdate(true);\n    });\n    return result === SessionStateControllerTransitionResult_1.default.Transitioned || result === SessionStateControllerTransitionResult_1.default.DeferredTransition;\n  }\n\n  restartLocalVideo(callback) {\n    const restartVideo = () => __awaiter(this, void 0, void 0, function* () {\n      if (this._videoTileController.hasStartedLocalVideoTile()) {\n        this.logger.info('stopping local video tile prior to local video restart');\n\n        this._videoTileController.stopLocalVideoTile();\n\n        this.logger.info('preparing local video restart update');\n        yield this.actionUpdate(false);\n        this.logger.info('starting local video tile for local video restart');\n\n        this._videoTileController.startLocalVideoTile();\n      }\n\n      this.logger.info('finalizing local video restart update');\n      yield this.actionUpdate(true);\n      callback();\n    });\n\n    const result = this.sessionStateController.perform(SessionStateControllerAction_1.default.Update, () => {\n      restartVideo();\n    });\n    return result === SessionStateControllerTransitionResult_1.default.Transitioned || result === SessionStateControllerTransitionResult_1.default.DeferredTransition;\n  }\n\n  replaceLocalVideo() {\n    return __awaiter(this, void 0, void 0, function* () {\n      let videoStream = null;\n\n      try {\n        videoStream = yield this.mediaStreamBroker.acquireVideoInputStream();\n      } catch (error) {\n        throw new Error(`could not acquire video stream from mediaStreamBroker due to ${error.message}`);\n      }\n\n      if (!videoStream || videoStream.getVideoTracks().length < 1) {\n        throw new Error('could not acquire video track');\n      }\n\n      const videoTrack = videoStream.getVideoTracks()[0];\n\n      if (!this.meetingSessionContext || !this.meetingSessionContext.peer) {\n        throw new Error('no active meeting and peer connection');\n      }\n\n      if (this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) {\n        yield this.meetingSessionContext.transceiverController.setVideoInput(videoTrack);\n      } else {\n        throw new Error('cannot replace track on Plan B');\n      } // if there is a local tile, a video tile update event should be fired.\n\n\n      const localTile = this.meetingSessionContext.videoTileController.getLocalVideoTile();\n\n      if (localTile) {\n        const state = localTile.state();\n        const settings = videoStream.getVideoTracks()[0].getSettings(); // so tile update wil be fired.\n\n        localTile.bindVideoStream(state.boundAttendeeId, true, videoStream, settings.width, settings.height, state.streamId, state.boundExternalUserId);\n      } // Update the active video input on subscription context to match what we just changed\n      // so that subsequent meeting actions can reuse and destroy it.\n\n\n      this.meetingSessionContext.activeVideoInput = videoStream;\n    });\n  }\n\n  restartLocalAudio(callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let audioStream = null;\n\n      try {\n        audioStream = yield this.mediaStreamBroker.acquireAudioInputStream();\n      } catch (error) {\n        this.logger.info('could not acquire audio stream from mediaStreamBroker');\n      }\n\n      if (!audioStream || audioStream.getAudioTracks().length < 1) {\n        throw new Error('could not acquire audio track');\n      }\n\n      this.connectionHealthData.reset();\n      this.connectionHealthData.setConnectionStartTime();\n      const audioTrack = audioStream.getAudioTracks()[0];\n\n      if (!this.meetingSessionContext || !this.meetingSessionContext.peer) {\n        throw new Error('no active meeting and peer connection');\n      }\n\n      let replaceTrackSuccess = false;\n\n      if (this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) {\n        replaceTrackSuccess = yield this.meetingSessionContext.transceiverController.replaceAudioTrack(audioTrack);\n      } else {\n        replaceTrackSuccess = yield DefaultTransceiverController_1.default.replaceAudioTrackForSender(this.meetingSessionContext.localAudioSender, audioTrack);\n      }\n\n      this._realtimeController.realtimeSetLocalAudioInput(audioStream);\n\n      this.meetingSessionContext.activeAudioInput = audioStream;\n      callback();\n\n      if (replaceTrackSuccess) {\n        return Promise.resolve();\n      } else {\n        return Promise.reject();\n      }\n    });\n  }\n\n  actionUpdate(notify) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // TODO: do not block other updates while waiting for video input\n      try {\n        yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoUpdate'), [new ReceiveVideoInputTask_1.default(this.meetingSessionContext), new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'UpdateSession', [new AttachMediaInputTask_1.default(this.meetingSessionContext), new CreateSDPTask_1.default(this.meetingSessionContext), new SetLocalDescriptionTask_1.default(this.meetingSessionContext), new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext), new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext), new SetRemoteDescriptionTask_1.default(this.meetingSessionContext)]), this.configuration.connectionTimeoutMs)]).run();\n\n        if (notify) {\n          this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishUpdating, () => {\n            this.actionFinishUpdating();\n          });\n        }\n      } catch (error) {\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishUpdating, () => {\n          const status = new MeetingSessionStatus_1.default(this.getMeetingStatusCode(error) || MeetingSessionStatusCode_1.default.TaskFailed);\n\n          if (status.statusCode() !== MeetingSessionStatusCode_1.default.IncompatibleSDP) {\n            this.logger.info('failed to update audio-video session');\n          }\n\n          this.handleMeetingSessionStatus(status, error);\n        });\n      }\n    });\n  }\n\n  notifyStop(status, error) {\n    this.forEachObserver(observer => {\n      Maybe_1.default.of(observer.audioVideoDidStop).map(f => f.bind(observer)(status));\n    });\n    /* istanbul ignore else */\n\n    if (this.eventController) {\n      const {\n        signalingOpenDurationMs,\n        poorConnectionCount,\n        startTimeMs,\n        iceGatheringDurationMs,\n        attendeePresenceDurationMs,\n        meetingStartDurationMs\n      } = this.meetingSessionContext;\n      const attributes = {\n        maxVideoTileCount: this.meetingSessionContext.maxVideoTileCount,\n        meetingDurationMs: startTimeMs === null ? 0 : Math.round(Date.now() - startTimeMs),\n        meetingStatus: MeetingSessionStatusCode_1.default[status.statusCode()],\n        signalingOpenDurationMs,\n        iceGatheringDurationMs,\n        attendeePresenceDurationMs,\n        poorConnectionCount,\n        meetingStartDurationMs,\n        retryCount: this.totalRetryCount\n      };\n\n      if (attributes.meetingDurationMs === 0) {\n        attributes.meetingErrorMessage = error && error.message || '';\n        delete attributes.meetingDurationMs;\n        delete attributes.attendeePresenceDurationMs;\n        delete attributes.meetingStartDurationMs;\n        this.eventController.publishEvent('meetingStartFailed', attributes);\n      } else if (status.isFailure() || status.isAudioConnectionFailure()) {\n        attributes.meetingErrorMessage = error && error.message || '';\n        this.eventController.publishEvent('meetingFailed', attributes);\n      } else {\n        this.eventController.publishEvent('meetingEnded', attributes);\n      }\n    }\n  }\n\n  actionFinishUpdating() {\n    // we do not update parameter for simulcast since they are updated in AttachMediaInputTask\n    if (!this.meetingSessionContext.enableSimulcast) {\n      const maxBitrateKbps = this.meetingSessionContext.videoCaptureAndEncodeParameter.encodeBitrates()[0];\n      this.enforceBandwidthLimitationForSender(maxBitrateKbps);\n    }\n\n    this.logger.info('updated audio-video session');\n  }\n\n  reconnect(status, error) {\n    const willRetry = this._reconnectController.retryWithBackoff(() => __awaiter(this, void 0, void 0, function* () {\n      if (this.sessionStateController.state() === SessionStateControllerState_1.default.NotConnected) {\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.Connect, () => {\n          this.actionConnect(true);\n        });\n      } else {\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.Reconnect, () => {\n          this.actionReconnect();\n        });\n      }\n\n      this.totalRetryCount += 1;\n    }), () => {\n      this.logger.info('canceled retry');\n    });\n\n    if (!willRetry) {\n      this.sessionStateController.perform(SessionStateControllerAction_1.default.Fail, () => {\n        this.actionDisconnect(status, false, error);\n      });\n    }\n\n    return willRetry;\n  }\n\n  actionReconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._reconnectController.hasStartedConnectionAttempt()) {\n        this._reconnectController.startedConnectionAttempt(false);\n\n        this.forEachObserver(observer => {\n          Maybe_1.default.of(observer.audioVideoDidStartConnecting).map(f => f.bind(observer)(true));\n        });\n      }\n\n      this.meetingSessionContext.volumeIndicatorAdapter.onReconnect();\n      this.connectionHealthData.reset();\n\n      try {\n        yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoReconnect'), [new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'Media', [new CleanRestartedSessionTask_1.default(this.meetingSessionContext), new SerialGroupTask_1.default(this.logger, 'Signaling', [new OpenSignalingConnectionTask_1.default(this.meetingSessionContext), new JoinAndReceiveIndexTask_1.default(this.meetingSessionContext), new ReceiveTURNCredentialsTask_1.default(this.meetingSessionContext)]), new CreatePeerConnectionTask_1.default(this.meetingSessionContext)]), this.configuration.connectionTimeoutMs), // TODO: Do we need ReceiveVideoInputTask in the reconnect operation?\n        new ReceiveVideoInputTask_1.default(this.meetingSessionContext), new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'UpdateSession', [new AttachMediaInputTask_1.default(this.meetingSessionContext), new CreateSDPTask_1.default(this.meetingSessionContext), new SetLocalDescriptionTask_1.default(this.meetingSessionContext), new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext), new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext), new SetRemoteDescriptionTask_1.default(this.meetingSessionContext)]), this.configuration.connectionTimeoutMs)]).run();\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, () => {\n          /* istanbul ignore else */\n          if (this.eventController) {\n            this.eventController.pushMeetingState('meetingReconnected');\n          }\n\n          this.actionFinishConnecting();\n        });\n      } catch (error) {\n        // To perform the \"Reconnect\" action again, the session should be in the \"Connected\" state.\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, () => {\n          this.logger.info('failed to reconnect audio-video session');\n          const status = new MeetingSessionStatus_1.default(this.getMeetingStatusCode(error) || MeetingSessionStatusCode_1.default.TaskFailed);\n          this.handleMeetingSessionStatus(status, error);\n        });\n      }\n\n      this.connectionHealthData.setConnectionStartTime();\n    });\n  }\n\n  wrapTaskName(taskName) {\n    return `${taskName}/${this.configuration.meetingId}/${this.configuration.credentials.attendeeId}`;\n  }\n\n  getMeetingStatusCode(error) {\n    const matched = /the meeting status code: (\\d+)/.exec(error && error.message);\n\n    if (matched && matched.length > 1) {\n      return Number(matched[1]);\n    } else {\n      return null;\n    }\n  }\n\n  enforceBandwidthLimitationForSender(maxBitrateKbps) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) {\n        yield this.meetingSessionContext.transceiverController.setVideoSendingBitrateKbps(maxBitrateKbps);\n      } else {\n        yield DefaultTransceiverController_1.default.setVideoSendingBitrateKbpsForSender(this.meetingSessionContext.localVideoSender, maxBitrateKbps, this.meetingSessionContext.logger);\n      }\n    });\n  }\n\n  handleMeetingSessionStatus(status, error) {\n    this.logger.info(`handling status: ${MeetingSessionStatusCode_1.default[status.statusCode()]}`);\n\n    if (!status.isTerminal()) {\n      if (this.meetingSessionContext.statsCollector) {\n        this.meetingSessionContext.statsCollector.logMeetingSessionStatus(status);\n      }\n    }\n\n    if (status.statusCode() === MeetingSessionStatusCode_1.default.IncompatibleSDP) {\n      this.restartLocalVideo(() => {\n        this.logger.info('handled incompatible SDP by attempting to restart video');\n      });\n      return true;\n    }\n\n    if (status.statusCode() === MeetingSessionStatusCode_1.default.VideoCallSwitchToViewOnly) {\n      this._videoTileController.removeLocalVideoTile();\n\n      this.forEachObserver(observer => {\n        Maybe_1.default.of(observer.videoSendDidBecomeUnavailable).map(f => f.bind(observer)());\n      });\n      return false;\n    }\n\n    if (status.isTerminal()) {\n      this.logger.error('session will not be reconnected');\n\n      if (this.meetingSessionContext.reconnectController) {\n        this.meetingSessionContext.reconnectController.disableReconnect();\n      }\n    }\n\n    if (status.isFailure() || status.isTerminal()) {\n      if (this.meetingSessionContext.reconnectController) {\n        const willRetry = this.reconnect(status, error);\n\n        if (willRetry) {\n          this.logger.warn(`will retry due to status code ${MeetingSessionStatusCode_1.default[status.statusCode()]}${error ? ` and error: ${error.message}` : ``}`);\n        } else {\n          this.logger.error(`failed with status code ${MeetingSessionStatusCode_1.default[status.statusCode()]}${error ? ` and error: ${error.message}` : ``}`);\n        }\n\n        return willRetry;\n      }\n    }\n\n    return false;\n  }\n\n  setVideoMaxBandwidthKbps(maxBandwidthKbps) {\n    if (this.meetingSessionContext && this.meetingSessionContext.videoUplinkBandwidthPolicy) {\n      this.logger.info(`video send has ideal max bandwidth ${maxBandwidthKbps} kbps`);\n      this.meetingSessionContext.videoUplinkBandwidthPolicy.setIdealMaxBandwidthKbps(maxBandwidthKbps);\n    }\n  }\n\n  handleHasBandwidthPriority(hasBandwidthPriority) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.meetingSessionContext && this.meetingSessionContext.videoUplinkBandwidthPolicy && !this.meetingSessionContext.enableSimulcast) {\n        const oldMaxBandwidth = this.meetingSessionContext.videoUplinkBandwidthPolicy.maxBandwidthKbps();\n        this.meetingSessionContext.videoUplinkBandwidthPolicy.setHasBandwidthPriority(hasBandwidthPriority);\n        const newMaxBandwidth = this.meetingSessionContext.videoUplinkBandwidthPolicy.maxBandwidthKbps();\n\n        if (oldMaxBandwidth !== newMaxBandwidth) {\n          this.logger.info(`video send bandwidth priority ${hasBandwidthPriority} max has changed from ${oldMaxBandwidth} kbps to ${newMaxBandwidth} kbps`);\n          yield this.enforceBandwidthLimitationForSender(newMaxBandwidth);\n        }\n      }\n    });\n  }\n\n  pauseReceivingStream(streamId) {\n    if (!!this.meetingSessionContext && this.meetingSessionContext.signalingClient) {\n      this.meetingSessionContext.signalingClient.pause([streamId]);\n    }\n  }\n\n  resumeReceivingStream(streamId) {\n    if (!!this.meetingSessionContext && this.meetingSessionContext.signalingClient) {\n      this.meetingSessionContext.signalingClient.resume([streamId]);\n    }\n  }\n\n  getRemoteVideoSources() {\n    const {\n      videoStreamIndex\n    } = this.meetingSessionContext;\n\n    if (!videoStreamIndex) {\n      this.logger.info('meeting has not started');\n      return [];\n    }\n\n    const selfAttendeeId = this.configuration.credentials.attendeeId;\n    return videoStreamIndex.allVideoSendingSourcesExcludingSelf(selfAttendeeId);\n  }\n\n  encodingSimulcastLayersDidChange(simulcastLayers) {\n    this.forEachObserver(observer => {\n      Maybe_1.default.of(observer.encodingSimulcastLayersDidChange).map(f => f.bind(observer)(simulcastLayers));\n    });\n  }\n\n}\n\nexports.default = DefaultAudioVideoController;\nDefaultAudioVideoController.MIN_VOLUME_DECIBELS = -42;\nDefaultAudioVideoController.MAX_VOLUME_DECIBELS = -14;\nDefaultAudioVideoController.PING_PONG_INTERVAL_MS = 10000;","map":{"version":3,"sources":["../../src/audiovideocontroller/DefaultAudioVideoController.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst DefaultActiveSpeakerDetector_1 = require(\"../activespeakerdetector/DefaultActiveSpeakerDetector\");\nconst DefaultAudioMixController_1 = require(\"../audiomixcontroller/DefaultAudioMixController\");\nconst AudioProfile_1 = require(\"../audioprofile/AudioProfile\");\nconst DefaultBrowserBehavior_1 = require(\"../browserbehavior/DefaultBrowserBehavior\");\nconst ConnectionHealthData_1 = require(\"../connectionhealthpolicy/ConnectionHealthData\");\nconst SignalingAndMetricsConnectionMonitor_1 = require(\"../connectionmonitor/SignalingAndMetricsConnectionMonitor\");\nconst DefaultEventController_1 = require(\"../eventcontroller/DefaultEventController\");\nconst Maybe_1 = require(\"../maybe/Maybe\");\nconst MeetingSessionStatus_1 = require(\"../meetingsession/MeetingSessionStatus\");\nconst MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\nconst MeetingSessionVideoAvailability_1 = require(\"../meetingsession/MeetingSessionVideoAvailability\");\nconst DefaultPingPong_1 = require(\"../pingpong/DefaultPingPong\");\nconst DefaultRealtimeController_1 = require(\"../realtimecontroller/DefaultRealtimeController\");\nconst AsyncScheduler_1 = require(\"../scheduler/AsyncScheduler\");\nconst DefaultSessionStateController_1 = require(\"../sessionstatecontroller/DefaultSessionStateController\");\nconst SessionStateControllerAction_1 = require(\"../sessionstatecontroller/SessionStateControllerAction\");\nconst SessionStateControllerState_1 = require(\"../sessionstatecontroller/SessionStateControllerState\");\nconst SessionStateControllerTransitionResult_1 = require(\"../sessionstatecontroller/SessionStateControllerTransitionResult\");\nconst DefaultSignalingClient_1 = require(\"../signalingclient/DefaultSignalingClient\");\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\nconst DefaultStatsCollector_1 = require(\"../statscollector/DefaultStatsCollector\");\nconst AttachMediaInputTask_1 = require(\"../task/AttachMediaInputTask\");\nconst CleanRestartedSessionTask_1 = require(\"../task/CleanRestartedSessionTask\");\nconst CleanStoppedSessionTask_1 = require(\"../task/CleanStoppedSessionTask\");\nconst CreatePeerConnectionTask_1 = require(\"../task/CreatePeerConnectionTask\");\nconst CreateSDPTask_1 = require(\"../task/CreateSDPTask\");\nconst FinishGatheringICECandidatesTask_1 = require(\"../task/FinishGatheringICECandidatesTask\");\nconst JoinAndReceiveIndexTask_1 = require(\"../task/JoinAndReceiveIndexTask\");\nconst LeaveAndReceiveLeaveAckTask_1 = require(\"../task/LeaveAndReceiveLeaveAckTask\");\nconst ListenForVolumeIndicatorsTask_1 = require(\"../task/ListenForVolumeIndicatorsTask\");\nconst MonitorTask_1 = require(\"../task/MonitorTask\");\nconst OpenSignalingConnectionTask_1 = require(\"../task/OpenSignalingConnectionTask\");\nconst ParallelGroupTask_1 = require(\"../task/ParallelGroupTask\");\nconst ReceiveAudioInputTask_1 = require(\"../task/ReceiveAudioInputTask\");\nconst ReceiveTURNCredentialsTask_1 = require(\"../task/ReceiveTURNCredentialsTask\");\nconst ReceiveVideoInputTask_1 = require(\"../task/ReceiveVideoInputTask\");\nconst ReceiveVideoStreamIndexTask_1 = require(\"../task/ReceiveVideoStreamIndexTask\");\nconst SendAndReceiveDataMessagesTask_1 = require(\"../task/SendAndReceiveDataMessagesTask\");\nconst SerialGroupTask_1 = require(\"../task/SerialGroupTask\");\nconst SetLocalDescriptionTask_1 = require(\"../task/SetLocalDescriptionTask\");\nconst SetRemoteDescriptionTask_1 = require(\"../task/SetRemoteDescriptionTask\");\nconst SubscribeAndReceiveSubscribeAckTask_1 = require(\"../task/SubscribeAndReceiveSubscribeAckTask\");\nconst TimeoutTask_1 = require(\"../task/TimeoutTask\");\nconst WaitForAttendeePresenceTask_1 = require(\"../task/WaitForAttendeePresenceTask\");\nconst DefaultTransceiverController_1 = require(\"../transceivercontroller/DefaultTransceiverController\");\nconst SimulcastTransceiverController_1 = require(\"../transceivercontroller/SimulcastTransceiverController\");\nconst DefaultVideoCaptureAndEncodeParameter_1 = require(\"../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter\");\nconst AllHighestVideoBandwidthPolicy_1 = require(\"../videodownlinkbandwidthpolicy/AllHighestVideoBandwidthPolicy\");\nconst VideoAdaptiveProbePolicy_1 = require(\"../videodownlinkbandwidthpolicy/VideoAdaptiveProbePolicy\");\nconst DefaultVideoStreamIdSet_1 = require(\"../videostreamidset/DefaultVideoStreamIdSet\");\nconst DefaultVideoStreamIndex_1 = require(\"../videostreamindex/DefaultVideoStreamIndex\");\nconst SimulcastVideoStreamIndex_1 = require(\"../videostreamindex/SimulcastVideoStreamIndex\");\nconst DefaultVideoTileController_1 = require(\"../videotilecontroller/DefaultVideoTileController\");\nconst DefaultVideoTileFactory_1 = require(\"../videotilefactory/DefaultVideoTileFactory\");\nconst DefaultSimulcastUplinkPolicy_1 = require(\"../videouplinkbandwidthpolicy/DefaultSimulcastUplinkPolicy\");\nconst NScaleVideoUplinkBandwidthPolicy_1 = require(\"../videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy\");\nconst DefaultVolumeIndicatorAdapter_1 = require(\"../volumeindicatoradapter/DefaultVolumeIndicatorAdapter\");\nconst AudioVideoControllerState_1 = require(\"./AudioVideoControllerState\");\nclass DefaultAudioVideoController {\n    constructor(configuration, logger, webSocketAdapter, mediaStreamBroker, reconnectController) {\n        this._audioProfile = new AudioProfile_1.default();\n        this.connectionHealthData = new ConnectionHealthData_1.default();\n        this.observerQueue = new Set();\n        this.meetingSessionContext = new AudioVideoControllerState_1.default();\n        this.enableSimulcast = false;\n        this.totalRetryCount = 0;\n        this.startAudioVideoTimestamp = 0;\n        this.destroyed = false;\n        this._logger = logger;\n        this.sessionStateController = new DefaultSessionStateController_1.default(this._logger);\n        this._configuration = configuration;\n        this.enableSimulcast =\n            configuration.enableUnifiedPlanForChromiumBasedBrowsers &&\n                configuration.enableSimulcastForUnifiedPlanChromiumBasedBrowsers &&\n                new DefaultBrowserBehavior_1.default().hasChromiumWebRTC();\n        this._webSocketAdapter = webSocketAdapter;\n        this._realtimeController = new DefaultRealtimeController_1.default();\n        this._realtimeController.realtimeSetLocalAttendeeId(configuration.credentials.attendeeId, configuration.credentials.externalUserId);\n        this._mediaStreamBroker = mediaStreamBroker;\n        this._reconnectController = reconnectController;\n        this._videoTileController = new DefaultVideoTileController_1.default(new DefaultVideoTileFactory_1.default(), this, this._logger);\n        this._audioMixController = new DefaultAudioMixController_1.default(this._logger);\n        this.meetingSessionContext.logger = this._logger;\n        this._eventController = new DefaultEventController_1.default(this);\n    }\n    destroy() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.observerQueue.clear();\n            this.destroyed = true;\n        });\n    }\n    get configuration() {\n        return this._configuration;\n    }\n    get realtimeController() {\n        return this._realtimeController;\n    }\n    get activeSpeakerDetector() {\n        // Lazy init.\n        if (!this._activeSpeakerDetector) {\n            this._activeSpeakerDetector = new DefaultActiveSpeakerDetector_1.default(this._realtimeController, this._configuration.credentials.attendeeId, this.handleHasBandwidthPriority.bind(this));\n        }\n        return this._activeSpeakerDetector;\n    }\n    get videoTileController() {\n        return this._videoTileController;\n    }\n    get audioMixController() {\n        return this._audioMixController;\n    }\n    get eventController() {\n        return this._eventController;\n    }\n    get logger() {\n        return this._logger;\n    }\n    get rtcPeerConnection() {\n        return (this.meetingSessionContext && this.meetingSessionContext.peer) || null;\n    }\n    get mediaStreamBroker() {\n        return this._mediaStreamBroker;\n    }\n    getRTCPeerConnectionStats(selector) {\n        if (!this.rtcPeerConnection) {\n            return null;\n        }\n        return this.rtcPeerConnection.getStats(selector);\n    }\n    setAudioProfile(audioProfile) {\n        this._audioProfile = audioProfile;\n    }\n    addObserver(observer) {\n        this.logger.info('adding meeting observer');\n        this.observerQueue.add(observer);\n    }\n    removeObserver(observer) {\n        this.logger.info('removing meeting observer');\n        this.observerQueue.delete(observer);\n    }\n    forEachObserver(observerFunc) {\n        for (const observer of this.observerQueue) {\n            AsyncScheduler_1.default.nextTick(() => {\n                if (this.observerQueue.has(observer)) {\n                    observerFunc(observer);\n                }\n            });\n        }\n    }\n    start() {\n        this.activeSpeakerDetector;\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.Connect, () => {\n            this.actionConnect(false);\n        });\n    }\n    actionConnect(reconnecting) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.connectionHealthData.reset();\n            this.meetingSessionContext = new AudioVideoControllerState_1.default();\n            this.meetingSessionContext.logger = this.logger;\n            this.meetingSessionContext.eventController = this.eventController;\n            this.meetingSessionContext.browserBehavior = new DefaultBrowserBehavior_1.default({\n                enableUnifiedPlanForChromiumBasedBrowsers: this.configuration\n                    .enableUnifiedPlanForChromiumBasedBrowsers,\n            });\n            this.meetingSessionContext.meetingSessionConfiguration = this.configuration;\n            this.meetingSessionContext.signalingClient = new DefaultSignalingClient_1.default(this._webSocketAdapter, this.logger);\n            this.meetingSessionContext.mediaStreamBroker = this._mediaStreamBroker;\n            this.meetingSessionContext.realtimeController = this._realtimeController;\n            this.meetingSessionContext.audioMixController = this._audioMixController;\n            this.meetingSessionContext.audioVideoController = this;\n            if (this.enableSimulcast) {\n                this.meetingSessionContext.transceiverController = new SimulcastTransceiverController_1.default(this.logger, this.meetingSessionContext.browserBehavior);\n            }\n            else {\n                this.meetingSessionContext.transceiverController = new DefaultTransceiverController_1.default(this.logger, this.meetingSessionContext.browserBehavior);\n            }\n            this.meetingSessionContext.volumeIndicatorAdapter = new DefaultVolumeIndicatorAdapter_1.default(this.logger, this._realtimeController, DefaultAudioVideoController.MIN_VOLUME_DECIBELS, DefaultAudioVideoController.MAX_VOLUME_DECIBELS);\n            this.meetingSessionContext.videoTileController = this._videoTileController;\n            this.meetingSessionContext.videoDownlinkBandwidthPolicy = this.configuration.videoDownlinkBandwidthPolicy;\n            this.meetingSessionContext.videoUplinkBandwidthPolicy = this.configuration.videoUplinkBandwidthPolicy;\n            this.meetingSessionContext.enableSimulcast = this.enableSimulcast;\n            if (this.enableSimulcast) {\n                const simulcastPolicy = new DefaultSimulcastUplinkPolicy_1.default(this.configuration.credentials.attendeeId, this.meetingSessionContext.logger);\n                simulcastPolicy.addObserver(this);\n                this.meetingSessionContext.videoUplinkBandwidthPolicy = simulcastPolicy;\n                this.meetingSessionContext.videoDownlinkBandwidthPolicy = new VideoAdaptiveProbePolicy_1.default(this.logger, this.meetingSessionContext.videoTileController);\n                this.meetingSessionContext.videoStreamIndex = new SimulcastVideoStreamIndex_1.default(this.logger);\n            }\n            else {\n                this.meetingSessionContext.enableSimulcast = false;\n                this.meetingSessionContext.videoStreamIndex = new DefaultVideoStreamIndex_1.default(this.logger);\n                if (!this.meetingSessionContext.videoDownlinkBandwidthPolicy) {\n                    this.meetingSessionContext.videoDownlinkBandwidthPolicy = new AllHighestVideoBandwidthPolicy_1.default(this.configuration.credentials.attendeeId);\n                }\n                if (!this.meetingSessionContext.videoUplinkBandwidthPolicy) {\n                    this.meetingSessionContext.videoUplinkBandwidthPolicy = new NScaleVideoUplinkBandwidthPolicy_1.default(this.configuration.credentials.attendeeId);\n                }\n                this.meetingSessionContext.audioProfile = this._audioProfile;\n            }\n            this.meetingSessionContext.lastKnownVideoAvailability = new MeetingSessionVideoAvailability_1.default();\n            this.meetingSessionContext.videoCaptureAndEncodeParameter = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, false);\n            this.meetingSessionContext.videosToReceive = new DefaultVideoStreamIdSet_1.default();\n            this.meetingSessionContext.videosPaused = new DefaultVideoStreamIdSet_1.default();\n            this.meetingSessionContext.statsCollector = new DefaultStatsCollector_1.default(this, this.logger, this.meetingSessionContext.browserBehavior);\n            this.meetingSessionContext.connectionMonitor = new SignalingAndMetricsConnectionMonitor_1.default(this, this._realtimeController, this._videoTileController, this.connectionHealthData, new DefaultPingPong_1.default(this.meetingSessionContext.signalingClient, DefaultAudioVideoController.PING_PONG_INTERVAL_MS, this.logger), this.meetingSessionContext.statsCollector);\n            this.meetingSessionContext.reconnectController = this._reconnectController;\n            this.meetingSessionContext.videoDeviceInformation = {};\n            if (!reconnecting) {\n                this.totalRetryCount = 0;\n                this._reconnectController.reset();\n                this.startAudioVideoTimestamp = Date.now();\n                this.forEachObserver(observer => {\n                    Maybe_1.default.of(observer.audioVideoDidStartConnecting).map(f => f.bind(observer)(false));\n                });\n                /* istanbul ignore else */\n                if (this.eventController) {\n                    this.eventController.publishEvent('meetingStartRequested');\n                }\n            }\n            this.meetingSessionContext.startAudioVideoTimestamp = this.startAudioVideoTimestamp;\n            if (this._reconnectController.hasStartedConnectionAttempt()) {\n                // This does not reset the reconnect deadline, but declare it's not the first connection.\n                this._reconnectController.startedConnectionAttempt(false);\n            }\n            else {\n                this._reconnectController.startedConnectionAttempt(true);\n            }\n            try {\n                yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoStart'), [\n                    new MonitorTask_1.default(this.meetingSessionContext, this.configuration.connectionHealthPolicyConfiguration, this.connectionHealthData),\n                    new ReceiveAudioInputTask_1.default(this.meetingSessionContext),\n                    new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'Media', [\n                        new SerialGroupTask_1.default(this.logger, 'Signaling', [\n                            new OpenSignalingConnectionTask_1.default(this.meetingSessionContext),\n                            new ListenForVolumeIndicatorsTask_1.default(this.meetingSessionContext),\n                            new SendAndReceiveDataMessagesTask_1.default(this.meetingSessionContext),\n                            new JoinAndReceiveIndexTask_1.default(this.meetingSessionContext),\n                            new ReceiveTURNCredentialsTask_1.default(this.meetingSessionContext),\n                            // TODO: ensure index handler does not race with incoming index update\n                            new ReceiveVideoStreamIndexTask_1.default(this.meetingSessionContext),\n                        ]),\n                        new SerialGroupTask_1.default(this.logger, 'Peer', [\n                            new CreatePeerConnectionTask_1.default(this.meetingSessionContext),\n                            new AttachMediaInputTask_1.default(this.meetingSessionContext),\n                            new CreateSDPTask_1.default(this.meetingSessionContext),\n                            new SetLocalDescriptionTask_1.default(this.meetingSessionContext),\n                            new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext),\n                            new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext),\n                            this.meetingSessionContext.meetingSessionConfiguration.attendeePresenceTimeoutMs > 0\n                                ? new TimeoutTask_1.default(this.logger, new ParallelGroupTask_1.default(this.logger, 'FinalizeConnection', [\n                                    new WaitForAttendeePresenceTask_1.default(this.meetingSessionContext),\n                                    new SetRemoteDescriptionTask_1.default(this.meetingSessionContext),\n                                ]), this.meetingSessionContext.meetingSessionConfiguration.attendeePresenceTimeoutMs)\n                                : new SetRemoteDescriptionTask_1.default(this.meetingSessionContext),\n                        ]),\n                    ]), this.configuration.connectionTimeoutMs),\n                ]).run();\n                this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, () => {\n                    /* istanbul ignore else */\n                    if (this.eventController) {\n                        this.meetingSessionContext.meetingStartDurationMs =\n                            Date.now() - this.startAudioVideoTimestamp;\n                        this.eventController.publishEvent('meetingStartSucceeded', {\n                            maxVideoTileCount: this.meetingSessionContext.maxVideoTileCount,\n                            poorConnectionCount: this.meetingSessionContext.poorConnectionCount,\n                            retryCount: this.totalRetryCount,\n                            signalingOpenDurationMs: this.meetingSessionContext.signalingOpenDurationMs,\n                            iceGatheringDurationMs: this.meetingSessionContext.iceGatheringDurationMs,\n                            meetingStartDurationMs: this.meetingSessionContext.meetingStartDurationMs,\n                        });\n                    }\n                    this.meetingSessionContext.startTimeMs = Date.now();\n                    this.actionFinishConnecting();\n                });\n            }\n            catch (error) {\n                this.sessionStateController.perform(SessionStateControllerAction_1.default.Fail, () => __awaiter(this, void 0, void 0, function* () {\n                    const status = new MeetingSessionStatus_1.default(this.getMeetingStatusCode(error) || MeetingSessionStatusCode_1.default.TaskFailed);\n                    yield this.actionDisconnect(status, true, error);\n                    if (!this.handleMeetingSessionStatus(status, error)) {\n                        this.notifyStop(status, error);\n                    }\n                }));\n            }\n            this.connectionHealthData.setConnectionStartTime();\n        });\n    }\n    actionFinishConnecting() {\n        this.meetingSessionContext.videoDuplexMode = SignalingProtocol_js_1.SdkStreamServiceType.RX;\n        if (!this.meetingSessionContext.enableSimulcast) {\n            this.enforceBandwidthLimitationForSender(this.meetingSessionContext.videoCaptureAndEncodeParameter.encodeBitrates()[0]);\n        }\n        this.forEachObserver(observer => {\n            Maybe_1.default.of(observer.audioVideoDidStart).map(f => f.bind(observer)());\n        });\n        this._reconnectController.reset();\n    }\n    stop() {\n        /*\n        Stops the current audio video meeting session.\n        The stop method execution is deferred and executed after\n        the current reconnection attempt completes.\n        It disables any further reconnection attempts.\n        Upon completion, AudioVideoObserver's `audioVideoDidStop`\n        callback function is called with `MeetingSessionStatusCode.Left`.\n        */\n        this.sessionStateController.perform(SessionStateControllerAction_1.default.Disconnect, () => {\n            this._reconnectController.disableReconnect();\n            this.logger.info('attendee left meeting, session will not be reconnected');\n            this.actionDisconnect(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.Left), false, null);\n        });\n    }\n    actionDisconnect(status, reconnecting, error) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoStop'), [\n                    new TimeoutTask_1.default(this.logger, new LeaveAndReceiveLeaveAckTask_1.default(this.meetingSessionContext), this.configuration.connectionTimeoutMs),\n                ]).run();\n            }\n            catch (stopError) {\n                this.logger.info('fail to stop');\n            }\n            try {\n                yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoClean'), [\n                    new TimeoutTask_1.default(this.logger, new CleanStoppedSessionTask_1.default(this.meetingSessionContext), this.configuration.connectionTimeoutMs),\n                ]).run();\n            }\n            catch (cleanError) {\n                this.logger.info('fail to clean');\n            }\n            this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishDisconnecting, () => {\n                if (!reconnecting) {\n                    this.notifyStop(status, error);\n                }\n            });\n        });\n    }\n    update() {\n        const result = this.sessionStateController.perform(SessionStateControllerAction_1.default.Update, () => {\n            this.actionUpdate(true);\n        });\n        return (result === SessionStateControllerTransitionResult_1.default.Transitioned ||\n            result === SessionStateControllerTransitionResult_1.default.DeferredTransition);\n    }\n    restartLocalVideo(callback) {\n        const restartVideo = () => __awaiter(this, void 0, void 0, function* () {\n            if (this._videoTileController.hasStartedLocalVideoTile()) {\n                this.logger.info('stopping local video tile prior to local video restart');\n                this._videoTileController.stopLocalVideoTile();\n                this.logger.info('preparing local video restart update');\n                yield this.actionUpdate(false);\n                this.logger.info('starting local video tile for local video restart');\n                this._videoTileController.startLocalVideoTile();\n            }\n            this.logger.info('finalizing local video restart update');\n            yield this.actionUpdate(true);\n            callback();\n        });\n        const result = this.sessionStateController.perform(SessionStateControllerAction_1.default.Update, () => {\n            restartVideo();\n        });\n        return (result === SessionStateControllerTransitionResult_1.default.Transitioned ||\n            result === SessionStateControllerTransitionResult_1.default.DeferredTransition);\n    }\n    replaceLocalVideo() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let videoStream = null;\n            try {\n                videoStream = yield this.mediaStreamBroker.acquireVideoInputStream();\n            }\n            catch (error) {\n                throw new Error(`could not acquire video stream from mediaStreamBroker due to ${error.message}`);\n            }\n            if (!videoStream || videoStream.getVideoTracks().length < 1) {\n                throw new Error('could not acquire video track');\n            }\n            const videoTrack = videoStream.getVideoTracks()[0];\n            if (!this.meetingSessionContext || !this.meetingSessionContext.peer) {\n                throw new Error('no active meeting and peer connection');\n            }\n            if (this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) {\n                yield this.meetingSessionContext.transceiverController.setVideoInput(videoTrack);\n            }\n            else {\n                throw new Error('cannot replace track on Plan B');\n            }\n            // if there is a local tile, a video tile update event should be fired.\n            const localTile = this.meetingSessionContext.videoTileController.getLocalVideoTile();\n            if (localTile) {\n                const state = localTile.state();\n                const settings = videoStream.getVideoTracks()[0].getSettings();\n                // so tile update wil be fired.\n                localTile.bindVideoStream(state.boundAttendeeId, true, videoStream, settings.width, settings.height, state.streamId, state.boundExternalUserId);\n            }\n            // Update the active video input on subscription context to match what we just changed\n            // so that subsequent meeting actions can reuse and destroy it.\n            this.meetingSessionContext.activeVideoInput = videoStream;\n        });\n    }\n    restartLocalAudio(callback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let audioStream = null;\n            try {\n                audioStream = yield this.mediaStreamBroker.acquireAudioInputStream();\n            }\n            catch (error) {\n                this.logger.info('could not acquire audio stream from mediaStreamBroker');\n            }\n            if (!audioStream || audioStream.getAudioTracks().length < 1) {\n                throw new Error('could not acquire audio track');\n            }\n            this.connectionHealthData.reset();\n            this.connectionHealthData.setConnectionStartTime();\n            const audioTrack = audioStream.getAudioTracks()[0];\n            if (!this.meetingSessionContext || !this.meetingSessionContext.peer) {\n                throw new Error('no active meeting and peer connection');\n            }\n            let replaceTrackSuccess = false;\n            if (this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) {\n                replaceTrackSuccess = yield this.meetingSessionContext.transceiverController.replaceAudioTrack(audioTrack);\n            }\n            else {\n                replaceTrackSuccess = yield DefaultTransceiverController_1.default.replaceAudioTrackForSender(this.meetingSessionContext.localAudioSender, audioTrack);\n            }\n            this._realtimeController.realtimeSetLocalAudioInput(audioStream);\n            this.meetingSessionContext.activeAudioInput = audioStream;\n            callback();\n            if (replaceTrackSuccess) {\n                return Promise.resolve();\n            }\n            else {\n                return Promise.reject();\n            }\n        });\n    }\n    actionUpdate(notify) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO: do not block other updates while waiting for video input\n            try {\n                yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoUpdate'), [\n                    new ReceiveVideoInputTask_1.default(this.meetingSessionContext),\n                    new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'UpdateSession', [\n                        new AttachMediaInputTask_1.default(this.meetingSessionContext),\n                        new CreateSDPTask_1.default(this.meetingSessionContext),\n                        new SetLocalDescriptionTask_1.default(this.meetingSessionContext),\n                        new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext),\n                        new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext),\n                        new SetRemoteDescriptionTask_1.default(this.meetingSessionContext),\n                    ]), this.configuration.connectionTimeoutMs),\n                ]).run();\n                if (notify) {\n                    this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishUpdating, () => {\n                        this.actionFinishUpdating();\n                    });\n                }\n            }\n            catch (error) {\n                this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishUpdating, () => {\n                    const status = new MeetingSessionStatus_1.default(this.getMeetingStatusCode(error) || MeetingSessionStatusCode_1.default.TaskFailed);\n                    if (status.statusCode() !== MeetingSessionStatusCode_1.default.IncompatibleSDP) {\n                        this.logger.info('failed to update audio-video session');\n                    }\n                    this.handleMeetingSessionStatus(status, error);\n                });\n            }\n        });\n    }\n    notifyStop(status, error) {\n        this.forEachObserver(observer => {\n            Maybe_1.default.of(observer.audioVideoDidStop).map(f => f.bind(observer)(status));\n        });\n        /* istanbul ignore else */\n        if (this.eventController) {\n            const { signalingOpenDurationMs, poorConnectionCount, startTimeMs, iceGatheringDurationMs, attendeePresenceDurationMs, meetingStartDurationMs, } = this.meetingSessionContext;\n            const attributes = {\n                maxVideoTileCount: this.meetingSessionContext.maxVideoTileCount,\n                meetingDurationMs: startTimeMs === null ? 0 : Math.round(Date.now() - startTimeMs),\n                meetingStatus: MeetingSessionStatusCode_1.default[status.statusCode()],\n                signalingOpenDurationMs,\n                iceGatheringDurationMs,\n                attendeePresenceDurationMs,\n                poorConnectionCount,\n                meetingStartDurationMs,\n                retryCount: this.totalRetryCount,\n            };\n            if (attributes.meetingDurationMs === 0) {\n                attributes.meetingErrorMessage = (error && error.message) || '';\n                delete attributes.meetingDurationMs;\n                delete attributes.attendeePresenceDurationMs;\n                delete attributes.meetingStartDurationMs;\n                this.eventController.publishEvent('meetingStartFailed', attributes);\n            }\n            else if (status.isFailure() || status.isAudioConnectionFailure()) {\n                attributes.meetingErrorMessage = (error && error.message) || '';\n                this.eventController.publishEvent('meetingFailed', attributes);\n            }\n            else {\n                this.eventController.publishEvent('meetingEnded', attributes);\n            }\n        }\n    }\n    actionFinishUpdating() {\n        // we do not update parameter for simulcast since they are updated in AttachMediaInputTask\n        if (!this.meetingSessionContext.enableSimulcast) {\n            const maxBitrateKbps = this.meetingSessionContext.videoCaptureAndEncodeParameter.encodeBitrates()[0];\n            this.enforceBandwidthLimitationForSender(maxBitrateKbps);\n        }\n        this.logger.info('updated audio-video session');\n    }\n    reconnect(status, error) {\n        const willRetry = this._reconnectController.retryWithBackoff(() => __awaiter(this, void 0, void 0, function* () {\n            if (this.sessionStateController.state() === SessionStateControllerState_1.default.NotConnected) {\n                this.sessionStateController.perform(SessionStateControllerAction_1.default.Connect, () => {\n                    this.actionConnect(true);\n                });\n            }\n            else {\n                this.sessionStateController.perform(SessionStateControllerAction_1.default.Reconnect, () => {\n                    this.actionReconnect();\n                });\n            }\n            this.totalRetryCount += 1;\n        }), () => {\n            this.logger.info('canceled retry');\n        });\n        if (!willRetry) {\n            this.sessionStateController.perform(SessionStateControllerAction_1.default.Fail, () => {\n                this.actionDisconnect(status, false, error);\n            });\n        }\n        return willRetry;\n    }\n    actionReconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._reconnectController.hasStartedConnectionAttempt()) {\n                this._reconnectController.startedConnectionAttempt(false);\n                this.forEachObserver(observer => {\n                    Maybe_1.default.of(observer.audioVideoDidStartConnecting).map(f => f.bind(observer)(true));\n                });\n            }\n            this.meetingSessionContext.volumeIndicatorAdapter.onReconnect();\n            this.connectionHealthData.reset();\n            try {\n                yield new SerialGroupTask_1.default(this.logger, this.wrapTaskName('AudioVideoReconnect'), [\n                    new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'Media', [\n                        new CleanRestartedSessionTask_1.default(this.meetingSessionContext),\n                        new SerialGroupTask_1.default(this.logger, 'Signaling', [\n                            new OpenSignalingConnectionTask_1.default(this.meetingSessionContext),\n                            new JoinAndReceiveIndexTask_1.default(this.meetingSessionContext),\n                            new ReceiveTURNCredentialsTask_1.default(this.meetingSessionContext),\n                        ]),\n                        new CreatePeerConnectionTask_1.default(this.meetingSessionContext),\n                    ]), this.configuration.connectionTimeoutMs),\n                    // TODO: Do we need ReceiveVideoInputTask in the reconnect operation?\n                    new ReceiveVideoInputTask_1.default(this.meetingSessionContext),\n                    new TimeoutTask_1.default(this.logger, new SerialGroupTask_1.default(this.logger, 'UpdateSession', [\n                        new AttachMediaInputTask_1.default(this.meetingSessionContext),\n                        new CreateSDPTask_1.default(this.meetingSessionContext),\n                        new SetLocalDescriptionTask_1.default(this.meetingSessionContext),\n                        new FinishGatheringICECandidatesTask_1.default(this.meetingSessionContext),\n                        new SubscribeAndReceiveSubscribeAckTask_1.default(this.meetingSessionContext),\n                        new SetRemoteDescriptionTask_1.default(this.meetingSessionContext),\n                    ]), this.configuration.connectionTimeoutMs),\n                ]).run();\n                this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, () => {\n                    /* istanbul ignore else */\n                    if (this.eventController) {\n                        this.eventController.pushMeetingState('meetingReconnected');\n                    }\n                    this.actionFinishConnecting();\n                });\n            }\n            catch (error) {\n                // To perform the \"Reconnect\" action again, the session should be in the \"Connected\" state.\n                this.sessionStateController.perform(SessionStateControllerAction_1.default.FinishConnecting, () => {\n                    this.logger.info('failed to reconnect audio-video session');\n                    const status = new MeetingSessionStatus_1.default(this.getMeetingStatusCode(error) || MeetingSessionStatusCode_1.default.TaskFailed);\n                    this.handleMeetingSessionStatus(status, error);\n                });\n            }\n            this.connectionHealthData.setConnectionStartTime();\n        });\n    }\n    wrapTaskName(taskName) {\n        return `${taskName}/${this.configuration.meetingId}/${this.configuration.credentials.attendeeId}`;\n    }\n    getMeetingStatusCode(error) {\n        const matched = /the meeting status code: (\\d+)/.exec(error && error.message);\n        if (matched && matched.length > 1) {\n            return Number(matched[1]);\n        }\n        else {\n            return null;\n        }\n    }\n    enforceBandwidthLimitationForSender(maxBitrateKbps) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.meetingSessionContext.browserBehavior.requiresUnifiedPlan()) {\n                yield this.meetingSessionContext.transceiverController.setVideoSendingBitrateKbps(maxBitrateKbps);\n            }\n            else {\n                yield DefaultTransceiverController_1.default.setVideoSendingBitrateKbpsForSender(this.meetingSessionContext.localVideoSender, maxBitrateKbps, this.meetingSessionContext.logger);\n            }\n        });\n    }\n    handleMeetingSessionStatus(status, error) {\n        this.logger.info(`handling status: ${MeetingSessionStatusCode_1.default[status.statusCode()]}`);\n        if (!status.isTerminal()) {\n            if (this.meetingSessionContext.statsCollector) {\n                this.meetingSessionContext.statsCollector.logMeetingSessionStatus(status);\n            }\n        }\n        if (status.statusCode() === MeetingSessionStatusCode_1.default.IncompatibleSDP) {\n            this.restartLocalVideo(() => {\n                this.logger.info('handled incompatible SDP by attempting to restart video');\n            });\n            return true;\n        }\n        if (status.statusCode() === MeetingSessionStatusCode_1.default.VideoCallSwitchToViewOnly) {\n            this._videoTileController.removeLocalVideoTile();\n            this.forEachObserver((observer) => {\n                Maybe_1.default.of(observer.videoSendDidBecomeUnavailable).map(f => f.bind(observer)());\n            });\n            return false;\n        }\n        if (status.isTerminal()) {\n            this.logger.error('session will not be reconnected');\n            if (this.meetingSessionContext.reconnectController) {\n                this.meetingSessionContext.reconnectController.disableReconnect();\n            }\n        }\n        if (status.isFailure() || status.isTerminal()) {\n            if (this.meetingSessionContext.reconnectController) {\n                const willRetry = this.reconnect(status, error);\n                if (willRetry) {\n                    this.logger.warn(`will retry due to status code ${MeetingSessionStatusCode_1.default[status.statusCode()]}${error ? ` and error: ${error.message}` : ``}`);\n                }\n                else {\n                    this.logger.error(`failed with status code ${MeetingSessionStatusCode_1.default[status.statusCode()]}${error ? ` and error: ${error.message}` : ``}`);\n                }\n                return willRetry;\n            }\n        }\n        return false;\n    }\n    setVideoMaxBandwidthKbps(maxBandwidthKbps) {\n        if (this.meetingSessionContext && this.meetingSessionContext.videoUplinkBandwidthPolicy) {\n            this.logger.info(`video send has ideal max bandwidth ${maxBandwidthKbps} kbps`);\n            this.meetingSessionContext.videoUplinkBandwidthPolicy.setIdealMaxBandwidthKbps(maxBandwidthKbps);\n        }\n    }\n    handleHasBandwidthPriority(hasBandwidthPriority) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.meetingSessionContext &&\n                this.meetingSessionContext.videoUplinkBandwidthPolicy &&\n                !this.meetingSessionContext.enableSimulcast) {\n                const oldMaxBandwidth = this.meetingSessionContext.videoUplinkBandwidthPolicy.maxBandwidthKbps();\n                this.meetingSessionContext.videoUplinkBandwidthPolicy.setHasBandwidthPriority(hasBandwidthPriority);\n                const newMaxBandwidth = this.meetingSessionContext.videoUplinkBandwidthPolicy.maxBandwidthKbps();\n                if (oldMaxBandwidth !== newMaxBandwidth) {\n                    this.logger.info(`video send bandwidth priority ${hasBandwidthPriority} max has changed from ${oldMaxBandwidth} kbps to ${newMaxBandwidth} kbps`);\n                    yield this.enforceBandwidthLimitationForSender(newMaxBandwidth);\n                }\n            }\n        });\n    }\n    pauseReceivingStream(streamId) {\n        if (!!this.meetingSessionContext && this.meetingSessionContext.signalingClient) {\n            this.meetingSessionContext.signalingClient.pause([streamId]);\n        }\n    }\n    resumeReceivingStream(streamId) {\n        if (!!this.meetingSessionContext && this.meetingSessionContext.signalingClient) {\n            this.meetingSessionContext.signalingClient.resume([streamId]);\n        }\n    }\n    getRemoteVideoSources() {\n        const { videoStreamIndex } = this.meetingSessionContext;\n        if (!videoStreamIndex) {\n            this.logger.info('meeting has not started');\n            return [];\n        }\n        const selfAttendeeId = this.configuration.credentials.attendeeId;\n        return videoStreamIndex.allVideoSendingSourcesExcludingSelf(selfAttendeeId);\n    }\n    encodingSimulcastLayersDidChange(simulcastLayers) {\n        this.forEachObserver(observer => {\n            Maybe_1.default.of(observer.encodingSimulcastLayersDidChange).map(f => f.bind(observer)(simulcastLayers));\n        });\n    }\n}\nexports.default = DefaultAudioVideoController;\nDefaultAudioVideoController.MIN_VOLUME_DECIBELS = -42;\nDefaultAudioVideoController.MAX_VOLUME_DECIBELS = -14;\nDefaultAudioVideoController.PING_PONG_INTERVAL_MS = 10000;\n//# sourceMappingURL=DefaultAudioVideoController.js.map"]},"metadata":{},"sourceType":"script"}