{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BaseConnectionHealthPolicy_1 = require(\"./BaseConnectionHealthPolicy\");\n\nclass UnusableAudioWarningConnectionHealthPolicy extends BaseConnectionHealthPolicy_1.default {\n  constructor(configuration, data) {\n    super(configuration, data);\n    this.coolDownTimeMs = configuration.cooldownTimeMs;\n    this.pastSamplesToConsider = configuration.pastSamplesToConsider;\n    this.fractionalLoss = configuration.fractionalLoss;\n    this.packetsExpected = configuration.packetsExpected;\n    this.maximumTimesToWarn = configuration.maximumTimesToWarn;\n    this.lastWarnTimestampMs = 0;\n    this.warnCount = 0;\n  }\n\n  calculateFractionalLoss() {\n    if (this.currentData.packetsReceivedInLastMinute.length < this.pastSamplesToConsider) {\n      return 0;\n    }\n\n    const samplesToConsider = this.pastSamplesToConsider;\n    const totalPacketsExpected = samplesToConsider * this.packetsExpected;\n    let totalPacketsReceived = 0;\n\n    for (let i = 0; i < samplesToConsider; i++) {\n      totalPacketsReceived += this.currentData.packetsReceivedInLastMinute[i];\n    }\n\n    return Math.min(Math.max(1 - totalPacketsReceived / totalPacketsExpected, 0), 1);\n  }\n\n  health() {\n    const warnedRecently = Date.now() - this.lastWarnTimestampMs < this.coolDownTimeMs;\n\n    if (warnedRecently) {\n      return this.currentHealth;\n    }\n\n    const hasHadHighPacketLoss = this.calculateFractionalLoss() >= this.fractionalLoss;\n\n    if (hasHadHighPacketLoss) {\n      if (this.currentHealth !== 0) {\n        this.lastWarnTimestampMs = Date.now();\n        this.warnCount++;\n\n        if (this.warnCount > this.maximumTimesToWarn) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    return 1;\n  }\n\n}\n\nexports.default = UnusableAudioWarningConnectionHealthPolicy;","map":{"version":3,"sources":["../../src/connectionhealthpolicy/UnusableAudioWarningConnectionHealthPolicy.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAEA,MAAA,4BAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AAKA,MAAqB,0CAArB,SACU,4BAAA,CAAA,OADV,CACoC;AAUlC,EAAA,WAAA,CAAY,aAAZ,EAAgE,IAAhE,EAA0F;AACxF,UAAM,aAAN,EAAqB,IAArB;AACA,SAAK,cAAL,GAAsB,aAAa,CAAC,cAApC;AACA,SAAK,qBAAL,GAA6B,aAAa,CAAC,qBAA3C;AACA,SAAK,cAAL,GAAsB,aAAa,CAAC,cAApC;AACA,SAAK,eAAL,GAAuB,aAAa,CAAC,eAArC;AACA,SAAK,kBAAL,GAA0B,aAAa,CAAC,kBAAxC;AACA,SAAK,mBAAL,GAA2B,CAA3B;AACA,SAAK,SAAL,GAAiB,CAAjB;AACD;;AAED,EAAA,uBAAuB,GAAA;AACrB,QAAI,KAAK,WAAL,CAAiB,2BAAjB,CAA6C,MAA7C,GAAsD,KAAK,qBAA/D,EAAsF;AACpF,aAAO,CAAP;AACD;;AACD,UAAM,iBAAiB,GAAG,KAAK,qBAA/B;AAEA,UAAM,oBAAoB,GAAG,iBAAiB,GAAG,KAAK,eAAtD;AACA,QAAI,oBAAoB,GAAG,CAA3B;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,iBAApB,EAAuC,CAAC,EAAxC,EAA4C;AAC1C,MAAA,oBAAoB,IAAI,KAAK,WAAL,CAAiB,2BAAjB,CAA6C,CAA7C,CAAxB;AACD;;AACD,WAAO,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,IAAI,oBAAoB,GAAG,oBAApC,EAA0D,CAA1D,CAAT,EAAuE,CAAvE,CAAP;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,UAAM,cAAc,GAAG,IAAI,CAAC,GAAL,KAAa,KAAK,mBAAlB,GAAwC,KAAK,cAApE;;AACA,QAAI,cAAJ,EAAoB;AAClB,aAAO,KAAK,aAAZ;AACD;;AACD,UAAM,oBAAoB,GAAG,KAAK,uBAAL,MAAkC,KAAK,cAApE;;AACA,QAAI,oBAAJ,EAA0B;AACxB,UAAI,KAAK,aAAL,KAAuB,CAA3B,EAA8B;AAC5B,aAAK,mBAAL,GAA2B,IAAI,CAAC,GAAL,EAA3B;AACA,aAAK,SAAL;;AACA,YAAI,KAAK,SAAL,GAAiB,KAAK,kBAA1B,EAA8C;AAC5C,iBAAO,CAAP;AACD;AACF;;AACD,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD;;AApDiC;;AADpC,OAAA,CAAA,OAAA,GAAA,0CAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BaseConnectionHealthPolicy_1 = require(\"./BaseConnectionHealthPolicy\");\nclass UnusableAudioWarningConnectionHealthPolicy extends BaseConnectionHealthPolicy_1.default {\n    constructor(configuration, data) {\n        super(configuration, data);\n        this.coolDownTimeMs = configuration.cooldownTimeMs;\n        this.pastSamplesToConsider = configuration.pastSamplesToConsider;\n        this.fractionalLoss = configuration.fractionalLoss;\n        this.packetsExpected = configuration.packetsExpected;\n        this.maximumTimesToWarn = configuration.maximumTimesToWarn;\n        this.lastWarnTimestampMs = 0;\n        this.warnCount = 0;\n    }\n    calculateFractionalLoss() {\n        if (this.currentData.packetsReceivedInLastMinute.length < this.pastSamplesToConsider) {\n            return 0;\n        }\n        const samplesToConsider = this.pastSamplesToConsider;\n        const totalPacketsExpected = samplesToConsider * this.packetsExpected;\n        let totalPacketsReceived = 0;\n        for (let i = 0; i < samplesToConsider; i++) {\n            totalPacketsReceived += this.currentData.packetsReceivedInLastMinute[i];\n        }\n        return Math.min(Math.max(1 - totalPacketsReceived / totalPacketsExpected, 0), 1);\n    }\n    health() {\n        const warnedRecently = Date.now() - this.lastWarnTimestampMs < this.coolDownTimeMs;\n        if (warnedRecently) {\n            return this.currentHealth;\n        }\n        const hasHadHighPacketLoss = this.calculateFractionalLoss() >= this.fractionalLoss;\n        if (hasHadHighPacketLoss) {\n            if (this.currentHealth !== 0) {\n                this.lastWarnTimestampMs = Date.now();\n                this.warnCount++;\n                if (this.warnCount > this.maximumTimesToWarn) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        return 1;\n    }\n}\nexports.default = UnusableAudioWarningConnectionHealthPolicy;\n//# sourceMappingURL=UnusableAudioWarningConnectionHealthPolicy.js.map"]},"metadata":{},"sourceType":"script"}