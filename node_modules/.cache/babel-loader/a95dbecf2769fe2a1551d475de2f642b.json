{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst VideoLogEvent_1 = require(\"../statscollector/VideoLogEvent\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[AttachMediaInputTask]] adds audio and video input to peer connection.\n */\n\n\nclass AttachMediaInputTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'AttachMediaInputTask';\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const transceiverController = this.context.transceiverController;\n      transceiverController.setPeer(this.context.peer);\n      transceiverController.setupLocalTransceivers();\n      const audioInput = this.context.activeAudioInput;\n\n      if (audioInput) {\n        const audioTracks = audioInput.getAudioTracks();\n\n        if (this.context.browserBehavior.requiresUnifiedPlan()) {\n          this.context.logger.info('attaching audio track to peer connection (unified-plan)');\n          yield transceiverController.setAudioInput(audioTracks.length ? audioTracks[0] : null);\n        } else {\n          this.context.logger.info('attaching audio track to peer connection (plan-b)'); // @ts-ignore\n\n          const senders = this.context.peer.getSenders();\n          audioInput.getAudioTracks().forEach(track => {\n            if (!senders.find(sender => {\n              return sender.track.id === track.id;\n            })) {\n              // unclear why this does not deal with the case of removing\n              // an existing track as we do in attachVideoInput\n              // @ts-ignore\n              this.context.localAudioSender = this.context.peer.addTrack(track, audioInput);\n            }\n          });\n        }\n      } else {\n        yield transceiverController.setAudioInput(null);\n        this.context.logger.warn('no audio track');\n      }\n\n      const videoInput = this.context.activeVideoInput;\n\n      if (videoInput) {\n        const videoTracks = videoInput.getVideoTracks();\n        const videoTrack = videoTracks.length ? videoTracks[0] : null;\n\n        if (this.context.browserBehavior.requiresUnifiedPlan()) {\n          this.context.logger.info('attaching video track to peer connection (unified-plan)');\n          yield transceiverController.setVideoInput(videoTrack);\n\n          if (this.context.enableSimulcast && this.context.videoUplinkBandwidthPolicy) {\n            const encodingParam = this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();\n            transceiverController.setEncodingParameters(encodingParam);\n          }\n        } else {\n          this.context.logger.info('attaching video track to peer connection (plan-b)'); // @ts-ignore\n\n          const senders = this.context.peer.getSenders();\n\n          if (!senders.find(sender => {\n            return sender.track && sender.track.id === videoTracks[0].id;\n          })) {\n            if (this.context.localVideoSender) {\n              // @ts-ignore\n              this.context.peer.removeTrack(this.context.localVideoSender);\n              this.context.localVideoSender = null;\n            }\n\n            this.context.localVideoSender = this.context.peer.addTrack(videoTracks[0], videoInput);\n          }\n        }\n\n        if (videoTrack) {\n          this.context.statsCollector.logVideoEvent(VideoLogEvent_1.default.InputAttached, this.context.videoDeviceInformation);\n          this.context.videoInputAttachedTimestampMs = Date.now();\n        }\n      } else {\n        yield transceiverController.setVideoInput(null);\n        this.context.logger.info('no video track');\n\n        if (this.context.localVideoSender) {\n          this.context.logger.info('removing track from peer'); // @ts-ignore\n\n          this.context.peer.removeTrack(this.context.localVideoSender);\n          this.context.localVideoSender = null;\n        }\n      }\n\n      this.context.videoSubscriptions = transceiverController.updateVideoTransceivers(this.context.videoStreamIndex, this.context.videosToReceive);\n    });\n  }\n\n}\n\nexports.default = AttachMediaInputTask;","map":{"version":3,"sources":["../../src/task/AttachMediaInputTask.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst VideoLogEvent_1 = require(\"../statscollector/VideoLogEvent\");\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[AttachMediaInputTask]] adds audio and video input to peer connection.\n */\nclass AttachMediaInputTask extends BaseTask_1.default {\n    constructor(context) {\n        super(context.logger);\n        this.context = context;\n        this.taskName = 'AttachMediaInputTask';\n    }\n    run() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const transceiverController = this.context.transceiverController;\n            transceiverController.setPeer(this.context.peer);\n            transceiverController.setupLocalTransceivers();\n            const audioInput = this.context.activeAudioInput;\n            if (audioInput) {\n                const audioTracks = audioInput.getAudioTracks();\n                if (this.context.browserBehavior.requiresUnifiedPlan()) {\n                    this.context.logger.info('attaching audio track to peer connection (unified-plan)');\n                    yield transceiverController.setAudioInput(audioTracks.length ? audioTracks[0] : null);\n                }\n                else {\n                    this.context.logger.info('attaching audio track to peer connection (plan-b)');\n                    // @ts-ignore\n                    const senders = this.context.peer.getSenders();\n                    audioInput.getAudioTracks().forEach((track) => {\n                        if (!senders.find((sender) => {\n                            return sender.track.id === track.id;\n                        })) {\n                            // unclear why this does not deal with the case of removing\n                            // an existing track as we do in attachVideoInput\n                            // @ts-ignore\n                            this.context.localAudioSender = this.context.peer.addTrack(track, audioInput);\n                        }\n                    });\n                }\n            }\n            else {\n                yield transceiverController.setAudioInput(null);\n                this.context.logger.warn('no audio track');\n            }\n            const videoInput = this.context.activeVideoInput;\n            if (videoInput) {\n                const videoTracks = videoInput.getVideoTracks();\n                const videoTrack = videoTracks.length ? videoTracks[0] : null;\n                if (this.context.browserBehavior.requiresUnifiedPlan()) {\n                    this.context.logger.info('attaching video track to peer connection (unified-plan)');\n                    yield transceiverController.setVideoInput(videoTrack);\n                    if (this.context.enableSimulcast && this.context.videoUplinkBandwidthPolicy) {\n                        const encodingParam = this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();\n                        transceiverController.setEncodingParameters(encodingParam);\n                    }\n                }\n                else {\n                    this.context.logger.info('attaching video track to peer connection (plan-b)');\n                    // @ts-ignore\n                    const senders = this.context.peer.getSenders();\n                    if (!senders.find((sender) => {\n                        return sender.track && sender.track.id === videoTracks[0].id;\n                    })) {\n                        if (this.context.localVideoSender) {\n                            // @ts-ignore\n                            this.context.peer.removeTrack(this.context.localVideoSender);\n                            this.context.localVideoSender = null;\n                        }\n                        this.context.localVideoSender = this.context.peer.addTrack(videoTracks[0], videoInput);\n                    }\n                }\n                if (videoTrack) {\n                    this.context.statsCollector.logVideoEvent(VideoLogEvent_1.default.InputAttached, this.context.videoDeviceInformation);\n                    this.context.videoInputAttachedTimestampMs = Date.now();\n                }\n            }\n            else {\n                yield transceiverController.setVideoInput(null);\n                this.context.logger.info('no video track');\n                if (this.context.localVideoSender) {\n                    this.context.logger.info('removing track from peer');\n                    // @ts-ignore\n                    this.context.peer.removeTrack(this.context.localVideoSender);\n                    this.context.localVideoSender = null;\n                }\n            }\n            this.context.videoSubscriptions = transceiverController.updateVideoTransceivers(this.context.videoStreamIndex, this.context.videosToReceive);\n        });\n    }\n}\nexports.default = AttachMediaInputTask;\n//# sourceMappingURL=AttachMediaInputTask.js.map"]},"metadata":{},"sourceType":"script"}