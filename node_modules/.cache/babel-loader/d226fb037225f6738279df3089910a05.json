{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst LogLevel_1 = require(\"./LogLevel\");\n/**\n * ConsoleLogger writes logs with console\n *\n * ```typescript\n *   // working with the ConsoleLogger\n *   const logger = new ConsoleLogger('demo'); //default level is LogLevel.WARN\n *   logger.info('info');\n *   logger.debug('debug');\n *   logger.warn('warn');\n *   logger.error('error');\n *\n *   // setting logging levels\n *   const logger = new ConsoleLogger('demo', LogLevel.INFO)\n *   logger.debug(debugFunc()); // this will not show up\n *   logger.setLogLevel(LogLevel.DEBUG)\n *   logger.debug(debugFunc()); // this will show up\n *\n * ```\n */\n\n\nclass ConsoleLogger {\n  constructor(name, level = LogLevel_1.default.WARN) {\n    this.name = name;\n    this.level = level;\n  }\n\n  info(msg) {\n    this.log(LogLevel_1.default.INFO, msg);\n  }\n\n  warn(msg) {\n    this.log(LogLevel_1.default.WARN, msg);\n  }\n\n  error(msg) {\n    this.log(LogLevel_1.default.ERROR, msg);\n  }\n\n  debug(debugFunction) {\n    if (LogLevel_1.default.DEBUG < this.level) {\n      return;\n    }\n\n    if (typeof debugFunction === 'string') {\n      this.log(LogLevel_1.default.DEBUG, debugFunction);\n    } else if (debugFunction) {\n      this.log(LogLevel_1.default.DEBUG, debugFunction());\n    } else {\n      this.log(LogLevel_1.default.DEBUG, '' + debugFunction);\n    }\n  }\n\n  setLogLevel(level) {\n    this.level = level;\n  }\n\n  getLogLevel() {\n    return this.level;\n  }\n\n  log(type, msg) {\n    if (type < this.level) {\n      return;\n    }\n\n    const timestamp = new Date().toISOString();\n    const logMessage = `${timestamp} [${LogLevel_1.default[type]}] ${this.name} - ${msg}`;\n\n    switch (type) {\n      case LogLevel_1.default.ERROR:\n        console.error(logMessage);\n        break;\n\n      case LogLevel_1.default.WARN:\n        console.warn(logMessage);\n        break;\n\n      case LogLevel_1.default.DEBUG:\n        console.debug(logMessage.replace(/\\\\r\\\\n/g, '\\n'));\n        break;\n\n      case LogLevel_1.default.INFO:\n        console.info(logMessage);\n        break;\n    }\n  }\n\n}\n\nexports.default = ConsoleLogger;","map":{"version":3,"sources":["../../src/logger/ConsoleLogger.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAGA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;;;;;;;;;;;;;;;;;AAkBG;;;AACH,MAAqB,aAArB,CAAkC;AAIhC,EAAA,WAAA,CAAY,IAAZ,EAA0B,KAAK,GAAG,UAAA,CAAA,OAAA,CAAS,IAA3C,EAA+C;AAC7C,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,KAAL,GAAa,KAAb;AACD;;AAED,EAAA,IAAI,CAAC,GAAD,EAAY;AACd,SAAK,GAAL,CAAS,UAAA,CAAA,OAAA,CAAS,IAAlB,EAAwB,GAAxB;AACD;;AAED,EAAA,IAAI,CAAC,GAAD,EAAY;AACd,SAAK,GAAL,CAAS,UAAA,CAAA,OAAA,CAAS,IAAlB,EAAwB,GAAxB;AACD;;AAED,EAAA,KAAK,CAAC,GAAD,EAAY;AACf,SAAK,GAAL,CAAS,UAAA,CAAA,OAAA,CAAS,KAAlB,EAAyB,GAAzB;AACD;;AAED,EAAA,KAAK,CAAC,aAAD,EAAuC;AAC1C,QAAI,UAAA,CAAA,OAAA,CAAS,KAAT,GAAiB,KAAK,KAA1B,EAAiC;AAC/B;AACD;;AAED,QAAI,OAAO,aAAP,KAAyB,QAA7B,EAAuC;AACrC,WAAK,GAAL,CAAS,UAAA,CAAA,OAAA,CAAS,KAAlB,EAAyB,aAAzB;AACD,KAFD,MAEO,IAAI,aAAJ,EAAmB;AACxB,WAAK,GAAL,CAAS,UAAA,CAAA,OAAA,CAAS,KAAlB,EAAyB,aAAa,EAAtC;AACD,KAFM,MAEA;AACL,WAAK,GAAL,CAAS,UAAA,CAAA,OAAA,CAAS,KAAlB,EAAyB,KAAK,aAA9B;AACD;AACF;;AAED,EAAA,WAAW,CAAC,KAAD,EAAgB;AACzB,SAAK,KAAL,GAAa,KAAb;AACD;;AAED,EAAA,WAAW,GAAA;AACT,WAAO,KAAK,KAAZ;AACD;;AAEO,EAAA,GAAG,CAAC,IAAD,EAAiB,GAAjB,EAA4B;AACrC,QAAI,IAAI,GAAG,KAAK,KAAhB,EAAuB;AACrB;AACD;;AAED,UAAM,SAAS,GAAG,IAAI,IAAJ,GAAW,WAAX,EAAlB;AACA,UAAM,UAAU,GAAG,GAAG,SAAS,KAAK,UAAA,CAAA,OAAA,CAAS,IAAT,CAAc,KAAK,KAAK,IAAI,MAAM,GAAG,EAAzE;;AAEA,YAAQ,IAAR;AACE,WAAK,UAAA,CAAA,OAAA,CAAS,KAAd;AACE,QAAA,OAAO,CAAC,KAAR,CAAc,UAAd;AACA;;AACF,WAAK,UAAA,CAAA,OAAA,CAAS,IAAd;AACE,QAAA,OAAO,CAAC,IAAR,CAAa,UAAb;AACA;;AACF,WAAK,UAAA,CAAA,OAAA,CAAS,KAAd;AACE,QAAA,OAAO,CAAC,KAAR,CAAc,UAAU,CAAC,OAAX,CAAmB,SAAnB,EAA8B,IAA9B,CAAd;AACA;;AACF,WAAK,UAAA,CAAA,OAAA,CAAS,IAAd;AACE,QAAA,OAAO,CAAC,IAAR,CAAa,UAAb;AACA;AAZJ;AAcD;;AAjE+B;;AAAlC,OAAA,CAAA,OAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst LogLevel_1 = require(\"./LogLevel\");\n/**\n * ConsoleLogger writes logs with console\n *\n * ```typescript\n *   // working with the ConsoleLogger\n *   const logger = new ConsoleLogger('demo'); //default level is LogLevel.WARN\n *   logger.info('info');\n *   logger.debug('debug');\n *   logger.warn('warn');\n *   logger.error('error');\n *\n *   // setting logging levels\n *   const logger = new ConsoleLogger('demo', LogLevel.INFO)\n *   logger.debug(debugFunc()); // this will not show up\n *   logger.setLogLevel(LogLevel.DEBUG)\n *   logger.debug(debugFunc()); // this will show up\n *\n * ```\n */\nclass ConsoleLogger {\n    constructor(name, level = LogLevel_1.default.WARN) {\n        this.name = name;\n        this.level = level;\n    }\n    info(msg) {\n        this.log(LogLevel_1.default.INFO, msg);\n    }\n    warn(msg) {\n        this.log(LogLevel_1.default.WARN, msg);\n    }\n    error(msg) {\n        this.log(LogLevel_1.default.ERROR, msg);\n    }\n    debug(debugFunction) {\n        if (LogLevel_1.default.DEBUG < this.level) {\n            return;\n        }\n        if (typeof debugFunction === 'string') {\n            this.log(LogLevel_1.default.DEBUG, debugFunction);\n        }\n        else if (debugFunction) {\n            this.log(LogLevel_1.default.DEBUG, debugFunction());\n        }\n        else {\n            this.log(LogLevel_1.default.DEBUG, '' + debugFunction);\n        }\n    }\n    setLogLevel(level) {\n        this.level = level;\n    }\n    getLogLevel() {\n        return this.level;\n    }\n    log(type, msg) {\n        if (type < this.level) {\n            return;\n        }\n        const timestamp = new Date().toISOString();\n        const logMessage = `${timestamp} [${LogLevel_1.default[type]}] ${this.name} - ${msg}`;\n        switch (type) {\n            case LogLevel_1.default.ERROR:\n                console.error(logMessage);\n                break;\n            case LogLevel_1.default.WARN:\n                console.warn(logMessage);\n                break;\n            case LogLevel_1.default.DEBUG:\n                console.debug(logMessage.replace(/\\\\r\\\\n/g, '\\n'));\n                break;\n            case LogLevel_1.default.INFO:\n                console.info(logMessage);\n                break;\n        }\n    }\n}\nexports.default = ConsoleLogger;\n//# sourceMappingURL=ConsoleLogger.js.map"]},"metadata":{},"sourceType":"script"}