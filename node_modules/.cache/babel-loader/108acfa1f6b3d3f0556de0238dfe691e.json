{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BaseTask_1 = require(\"./BaseTask\");\n\nconst TaskStatus_1 = require(\"./TaskStatus\");\n/**\n * [[SerialGroupTask]] runs a set of tasks in series. When canceled, it stops\n * any currently running task and runs no further tasks in the group.\n */\n\n\nclass SerialGroupTask extends BaseTask_1.default {\n  constructor(logger, taskName, tasksToRunSerially) {\n    super(logger);\n    this.taskName = taskName;\n    this.tasksToRunSerially = tasksToRunSerially;\n    this.currentTask = null;\n\n    for (const task of tasksToRunSerially) {\n      task.setParent(this);\n    }\n  }\n\n  cancel() {\n    if (this.currentTask) {\n      this.logger.info(`canceling serial group task ${this.name()} subtask ${this.currentTask.name()}`);\n      this.currentTask.cancel();\n    }\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (const task of this.tasksToRunSerially) {\n        if (this.getStatus() === TaskStatus_1.default.CANCELED) {\n          this.logAndThrow(`serial group task ${this.name()} was canceled`);\n        }\n\n        try {\n          this.logger.info(`serial group task ${this.name()} running subtask ${task.name()}`);\n          this.currentTask = task;\n          yield task.run();\n          this.logger.info(`serial group task ${this.name()} completed subtask ${task.name()}`);\n        } catch (err) {\n          this.logAndThrow(`serial group task ${this.name()} was canceled due to subtask ` + `${this.currentTask.name()} error: ${err.message}`);\n        } finally {\n          this.currentTask = null;\n        }\n      }\n\n      this.logger.info(`serial group task ${this.name()} completed`);\n    });\n  }\n\n}\n\nexports.default = SerialGroupTask;","map":{"version":3,"sources":["../../src/task/SerialGroupTask.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAEA,MAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAEA;;;AAGG;;;AACH,MAAqB,eAArB,SAA6C,UAAA,CAAA,OAA7C,CAAqD;AAGnD,EAAA,WAAA,CAAY,MAAZ,EAAsC,QAAtC,EAAgE,kBAAhE,EAA0F;AACxF,UAAM,MAAN;AADoC,SAAA,QAAA,GAAA,QAAA;AAA0B,SAAA,kBAAA,GAAA,kBAAA;AAFxD,SAAA,WAAA,GAA2B,IAA3B;;AAIN,SAAK,MAAM,IAAX,IAAmB,kBAAnB,EAAuC;AACrC,MAAA,IAAI,CAAC,SAAL,CAAe,IAAf;AACD;AACF;;AAED,EAAA,MAAM,GAAA;AACJ,QAAI,KAAK,WAAT,EAAsB;AACpB,WAAK,MAAL,CAAY,IAAZ,CACE,+BAA+B,KAAK,IAAL,EAAW,YAAY,KAAK,WAAL,CAAiB,IAAjB,EAAuB,EAD/E;AAGA,WAAK,WAAL,CAAiB,MAAjB;AACD;AACF;;AAEK,EAAA,GAAG,GAAA;;AACP,WAAK,MAAM,IAAX,IAAmB,KAAK,kBAAxB,EAA4C;AAC1C,YAAI,KAAK,SAAL,OAAqB,YAAA,CAAA,OAAA,CAAW,QAApC,EAA8C;AAC5C,eAAK,WAAL,CAAiB,qBAAqB,KAAK,IAAL,EAAW,eAAjD;AACD;;AACD,YAAI;AACF,eAAK,MAAL,CAAY,IAAZ,CAAiB,qBAAqB,KAAK,IAAL,EAAW,oBAAoB,IAAI,CAAC,IAAL,EAAW,EAAhF;AACA,eAAK,WAAL,GAAmB,IAAnB;AACA,gBAAM,IAAI,CAAC,GAAL,EAAN;AACA,eAAK,MAAL,CAAY,IAAZ,CAAiB,qBAAqB,KAAK,IAAL,EAAW,sBAAsB,IAAI,CAAC,IAAL,EAAW,EAAlF;AACD,SALD,CAKE,OAAO,GAAP,EAAY;AACZ,eAAK,WAAL,CACE,qBAAqB,KAAK,IAAL,EAAW,+BAAhC,GACE,GAAG,KAAK,WAAL,CAAiB,IAAjB,EAAuB,WAAW,GAAG,CAAC,OAAO,EAFpD;AAID,SAVD,SAUU;AACR,eAAK,WAAL,GAAmB,IAAnB;AACD;AACF;;AACD,WAAK,MAAL,CAAY,IAAZ,CAAiB,qBAAqB,KAAK,IAAL,EAAW,YAAjD;AACD,K;AAAA;;AAvCkD;;AAArD,OAAA,CAAA,OAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BaseTask_1 = require(\"./BaseTask\");\nconst TaskStatus_1 = require(\"./TaskStatus\");\n/**\n * [[SerialGroupTask]] runs a set of tasks in series. When canceled, it stops\n * any currently running task and runs no further tasks in the group.\n */\nclass SerialGroupTask extends BaseTask_1.default {\n    constructor(logger, taskName, tasksToRunSerially) {\n        super(logger);\n        this.taskName = taskName;\n        this.tasksToRunSerially = tasksToRunSerially;\n        this.currentTask = null;\n        for (const task of tasksToRunSerially) {\n            task.setParent(this);\n        }\n    }\n    cancel() {\n        if (this.currentTask) {\n            this.logger.info(`canceling serial group task ${this.name()} subtask ${this.currentTask.name()}`);\n            this.currentTask.cancel();\n        }\n    }\n    run() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (const task of this.tasksToRunSerially) {\n                if (this.getStatus() === TaskStatus_1.default.CANCELED) {\n                    this.logAndThrow(`serial group task ${this.name()} was canceled`);\n                }\n                try {\n                    this.logger.info(`serial group task ${this.name()} running subtask ${task.name()}`);\n                    this.currentTask = task;\n                    yield task.run();\n                    this.logger.info(`serial group task ${this.name()} completed subtask ${task.name()}`);\n                }\n                catch (err) {\n                    this.logAndThrow(`serial group task ${this.name()} was canceled due to subtask ` +\n                        `${this.currentTask.name()} error: ${err.message}`);\n                }\n                finally {\n                    this.currentTask = null;\n                }\n            }\n            this.logger.info(`serial group task ${this.name()} completed`);\n        });\n    }\n}\nexports.default = SerialGroupTask;\n//# sourceMappingURL=SerialGroupTask.js.map"]},"metadata":{},"sourceType":"script"}