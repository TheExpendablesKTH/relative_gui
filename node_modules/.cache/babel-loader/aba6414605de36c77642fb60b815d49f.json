{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst SessionStateControllerAction_1 = require(\"./SessionStateControllerAction\");\n\nconst SessionStateControllerDeferPriority_1 = require(\"./SessionStateControllerDeferPriority\");\n\nconst SessionStateControllerState_1 = require(\"./SessionStateControllerState\");\n\nconst SessionStateControllerTransitionResult_1 = require(\"./SessionStateControllerTransitionResult\");\n\nclass DefaultSessionStateController {\n  constructor(logger) {\n    this.logger = logger;\n    this.currentState = SessionStateControllerState_1.SessionStateControllerState.NotConnected;\n    this.deferredAction = null;\n    this.deferredWork = null;\n  }\n\n  perform(action, work) {\n    const state = this.currentState;\n\n    if (state === SessionStateControllerState_1.SessionStateControllerState.NotConnected && action === SessionStateControllerAction_1.SessionStateControllerAction.Connect) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Connecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connecting && action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connecting && action === SessionStateControllerAction_1.SessionStateControllerAction.FinishConnecting) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Connected, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected && action === SessionStateControllerAction_1.SessionStateControllerAction.Disconnect) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected && action === SessionStateControllerAction_1.SessionStateControllerAction.Reconnect) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Connecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected && action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected && action === SessionStateControllerAction_1.SessionStateControllerAction.Update) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Updating, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Updating && action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Updating && action === SessionStateControllerAction_1.SessionStateControllerAction.FinishUpdating) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.Connected, action);\n    } else if (state === SessionStateControllerState_1.SessionStateControllerState.Disconnecting && action === SessionStateControllerAction_1.SessionStateControllerAction.FinishDisconnecting) {\n      this.transition(SessionStateControllerState_1.SessionStateControllerState.NotConnected, action);\n    } else if (this.canDefer(action)) {\n      this.logger.info(`deferring transition from ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]} with ${SessionStateControllerAction_1.SessionStateControllerAction[action]}`);\n      this.deferAction(action, work);\n      return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.DeferredTransition;\n    } else {\n      this.logger.warn(`no transition found from ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]} with ${SessionStateControllerAction_1.SessionStateControllerAction[action]}`);\n      return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.NoTransitionAvailable;\n    }\n\n    try {\n      work();\n    } catch (e) {\n      this.logger.error(`error during state ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]} with action ${SessionStateControllerAction_1.SessionStateControllerAction[action]}: ${e}`);\n      this.logger.info(`rolling back transition to ${SessionStateControllerState_1.SessionStateControllerState[state]}`);\n      this.currentState = state;\n      return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.TransitionFailed;\n    }\n\n    this.performDeferredAction();\n    return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.Transitioned;\n  }\n\n  state() {\n    return this.currentState;\n  }\n\n  transition(newState, action) {\n    this.logger.info(`transitioning from ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]} to ${SessionStateControllerState_1.SessionStateControllerState[newState]} with ${SessionStateControllerAction_1.SessionStateControllerAction[action]}`);\n    this.currentState = newState;\n  }\n\n  deferPriority(action) {\n    switch (action) {\n      case SessionStateControllerAction_1.SessionStateControllerAction.Disconnect:\n        return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.VeryHigh;\n\n      case SessionStateControllerAction_1.SessionStateControllerAction.Fail:\n        return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.High;\n\n      case SessionStateControllerAction_1.SessionStateControllerAction.Reconnect:\n        return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.Medium;\n\n      case SessionStateControllerAction_1.SessionStateControllerAction.Update:\n        return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.Low;\n\n      default:\n        return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.DoNotDefer;\n    }\n  }\n\n  deferAction(action, work) {\n    if (this.deferredAction !== null && this.deferPriority(this.deferredAction) > this.deferPriority(action)) {\n      return;\n    }\n\n    this.deferredAction = action;\n    this.deferredWork = work;\n  }\n\n  canDefer(action) {\n    return this.deferPriority(action) !== SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.DoNotDefer && (this.currentState === SessionStateControllerState_1.SessionStateControllerState.Connecting || this.currentState === SessionStateControllerState_1.SessionStateControllerState.Updating);\n  }\n\n  performDeferredAction() {\n    if (!this.deferredAction) {\n      return;\n    }\n\n    const deferredAction = this.deferredAction;\n    const deferredWork = this.deferredWork;\n    this.deferredAction = null;\n    this.deferredWork = null;\n    this.logger.info(`performing deferred action ${SessionStateControllerAction_1.SessionStateControllerAction[deferredAction]}`);\n\n    if (this.perform(deferredAction, deferredWork) !== SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.Transitioned) {\n      this.logger.info(`unable to perform deferred action ${SessionStateControllerAction_1.SessionStateControllerAction[deferredAction]} in state ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]}`);\n    }\n  }\n\n}\n\nexports.default = DefaultSessionStateController;","map":{"version":3,"sources":["../../src/sessionstatecontroller/DefaultSessionStateController.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst SessionStateControllerAction_1 = require(\"./SessionStateControllerAction\");\nconst SessionStateControllerDeferPriority_1 = require(\"./SessionStateControllerDeferPriority\");\nconst SessionStateControllerState_1 = require(\"./SessionStateControllerState\");\nconst SessionStateControllerTransitionResult_1 = require(\"./SessionStateControllerTransitionResult\");\nclass DefaultSessionStateController {\n    constructor(logger) {\n        this.logger = logger;\n        this.currentState = SessionStateControllerState_1.SessionStateControllerState.NotConnected;\n        this.deferredAction = null;\n        this.deferredWork = null;\n    }\n    perform(action, work) {\n        const state = this.currentState;\n        if (state === SessionStateControllerState_1.SessionStateControllerState.NotConnected &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.Connect) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Connecting, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connecting &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connecting &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.FinishConnecting) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Connected, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.Disconnect) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.Reconnect) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Connecting, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Connected &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.Update) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Updating, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Updating &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.Fail) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Disconnecting, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Updating &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.FinishUpdating) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.Connected, action);\n        }\n        else if (state === SessionStateControllerState_1.SessionStateControllerState.Disconnecting &&\n            action === SessionStateControllerAction_1.SessionStateControllerAction.FinishDisconnecting) {\n            this.transition(SessionStateControllerState_1.SessionStateControllerState.NotConnected, action);\n        }\n        else if (this.canDefer(action)) {\n            this.logger.info(`deferring transition from ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]} with ${SessionStateControllerAction_1.SessionStateControllerAction[action]}`);\n            this.deferAction(action, work);\n            return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.DeferredTransition;\n        }\n        else {\n            this.logger.warn(`no transition found from ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]} with ${SessionStateControllerAction_1.SessionStateControllerAction[action]}`);\n            return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.NoTransitionAvailable;\n        }\n        try {\n            work();\n        }\n        catch (e) {\n            this.logger.error(`error during state ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]} with action ${SessionStateControllerAction_1.SessionStateControllerAction[action]}: ${e}`);\n            this.logger.info(`rolling back transition to ${SessionStateControllerState_1.SessionStateControllerState[state]}`);\n            this.currentState = state;\n            return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.TransitionFailed;\n        }\n        this.performDeferredAction();\n        return SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.Transitioned;\n    }\n    state() {\n        return this.currentState;\n    }\n    transition(newState, action) {\n        this.logger.info(`transitioning from ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]} to ${SessionStateControllerState_1.SessionStateControllerState[newState]} with ${SessionStateControllerAction_1.SessionStateControllerAction[action]}`);\n        this.currentState = newState;\n    }\n    deferPriority(action) {\n        switch (action) {\n            case SessionStateControllerAction_1.SessionStateControllerAction.Disconnect:\n                return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.VeryHigh;\n            case SessionStateControllerAction_1.SessionStateControllerAction.Fail:\n                return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.High;\n            case SessionStateControllerAction_1.SessionStateControllerAction.Reconnect:\n                return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.Medium;\n            case SessionStateControllerAction_1.SessionStateControllerAction.Update:\n                return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.Low;\n            default:\n                return SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.DoNotDefer;\n        }\n    }\n    deferAction(action, work) {\n        if (this.deferredAction !== null &&\n            this.deferPriority(this.deferredAction) > this.deferPriority(action)) {\n            return;\n        }\n        this.deferredAction = action;\n        this.deferredWork = work;\n    }\n    canDefer(action) {\n        return (this.deferPriority(action) !== SessionStateControllerDeferPriority_1.SessionStateControllerDeferPriority.DoNotDefer &&\n            (this.currentState === SessionStateControllerState_1.SessionStateControllerState.Connecting ||\n                this.currentState === SessionStateControllerState_1.SessionStateControllerState.Updating));\n    }\n    performDeferredAction() {\n        if (!this.deferredAction) {\n            return;\n        }\n        const deferredAction = this.deferredAction;\n        const deferredWork = this.deferredWork;\n        this.deferredAction = null;\n        this.deferredWork = null;\n        this.logger.info(`performing deferred action ${SessionStateControllerAction_1.SessionStateControllerAction[deferredAction]}`);\n        if (this.perform(deferredAction, deferredWork) !==\n            SessionStateControllerTransitionResult_1.SessionStateControllerTransitionResult.Transitioned) {\n            this.logger.info(`unable to perform deferred action ${SessionStateControllerAction_1.SessionStateControllerAction[deferredAction]} in state ${SessionStateControllerState_1.SessionStateControllerState[this.currentState]}`);\n        }\n    }\n}\nexports.default = DefaultSessionStateController;\n//# sourceMappingURL=DefaultSessionStateController.js.map"]},"metadata":{},"sourceType":"script"}