{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[WaitForAttendeePresenceTask]] waits until an attendee presence event happens.\n */\n\n\nclass WaitForAttendeePresenceTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'WaitForAttendeePresenceTask';\n  }\n\n  cancel() {\n    // Just in case. The baseCancel behavior should prevent this.\n\n    /* istanbul ignore else */\n    if (this.cancelPromise) {\n      const error = new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.NoAttendeePresent}`);\n      this.cancelPromise(error);\n      delete this.cancelPromise;\n    }\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const attendeeId = this.context.meetingSessionConfiguration.credentials.attendeeId;\n      return new Promise((resolve, reject) => {\n        const handler = (presentAttendeeId, present, _externalUserId, _dropped, _pos) => {\n          if (attendeeId === presentAttendeeId && present) {\n            this.context.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(handler);\n            resolve();\n            delete this.cancelPromise;\n          }\n        };\n\n        this.cancelPromise = error => {\n          this.context.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(handler);\n          reject(error);\n        };\n\n        this.context.realtimeController.realtimeSubscribeToAttendeeIdPresence(handler);\n      });\n    });\n  }\n\n}\n\nexports.default = WaitForAttendeePresenceTask;","map":{"version":3,"sources":["../../src/task/WaitForAttendeePresenceTask.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAA,0BAAA,GAAA,OAAA,CAAA,4CAAA,CAAA;;AAEA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;AAEG;;;AACH,MAAqB,2BAArB,SAAyD,UAAA,CAAA,OAAzD,CAAiE;AAK/D,EAAA,WAAA,CAAoB,OAApB,EAAsD;AACpD,UAAM,OAAO,CAAC,MAAd;AADkB,SAAA,OAAA,GAAA,OAAA;AAJV,SAAA,QAAA,GAAW,6BAAX;AAMT;;AAED,EAAA,MAAM,GAAA;AACJ;;AACA;AACA,QAAI,KAAK,aAAT,EAAwB;AACtB,YAAM,KAAK,GAAG,IAAI,KAAJ,CACZ,aAAa,KAAK,IAAL,EAAW,oCACtB,0BAAA,CAAA,OAAA,CAAyB,iBAC3B,EAHY,CAAd;AAKA,WAAK,aAAL,CAAmB,KAAnB;AACA,aAAO,KAAK,aAAZ;AACD;AACF;;AAEK,EAAA,GAAG,GAAA;;AACP,YAAM,UAAU,GAAG,KAAK,OAAL,CAAa,2BAAb,CAAyC,WAAzC,CAAqD,UAAxE;AACA,aAAO,IAAI,OAAJ,CAAkB,CAAC,OAAD,EAAU,MAAV,KAAoB;AAC3C,cAAM,OAAO,GAAG,CACd,iBADc,EAEd,OAFc,EAGd,eAHc,EAId,QAJc,EAKd,IALc,KAMN;AACR,cAAI,UAAU,KAAK,iBAAf,IAAoC,OAAxC,EAAiD;AAC/C,iBAAK,OAAL,CAAa,kBAAb,CAAgC,uCAAhC,CAAwE,OAAxE;AACA,YAAA,OAAO;AACP,mBAAO,KAAK,aAAZ;AACD;AACF,SAZD;;AAcA,aAAK,aAAL,GAAsB,KAAD,IAAiB;AACpC,eAAK,OAAL,CAAa,kBAAb,CAAgC,uCAAhC,CAAwE,OAAxE;AACA,UAAA,MAAM,CAAC,KAAD,CAAN;AACD,SAHD;;AAKA,aAAK,OAAL,CAAa,kBAAb,CAAgC,qCAAhC,CAAsE,OAAtE;AACD,OArBM,CAAP;AAsBD,K;AAAA;;AA/C8D;;AAAjE,OAAA,CAAA,OAAA,GAAA,2BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[WaitForAttendeePresenceTask]] waits until an attendee presence event happens.\n */\nclass WaitForAttendeePresenceTask extends BaseTask_1.default {\n    constructor(context) {\n        super(context.logger);\n        this.context = context;\n        this.taskName = 'WaitForAttendeePresenceTask';\n    }\n    cancel() {\n        // Just in case. The baseCancel behavior should prevent this.\n        /* istanbul ignore else */\n        if (this.cancelPromise) {\n            const error = new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.NoAttendeePresent}`);\n            this.cancelPromise(error);\n            delete this.cancelPromise;\n        }\n    }\n    run() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const attendeeId = this.context.meetingSessionConfiguration.credentials.attendeeId;\n            return new Promise((resolve, reject) => {\n                const handler = (presentAttendeeId, present, _externalUserId, _dropped, _pos) => {\n                    if (attendeeId === presentAttendeeId && present) {\n                        this.context.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(handler);\n                        resolve();\n                        delete this.cancelPromise;\n                    }\n                };\n                this.cancelPromise = (error) => {\n                    this.context.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(handler);\n                    reject(error);\n                };\n                this.context.realtimeController.realtimeSubscribeToAttendeeIdPresence(handler);\n            });\n        });\n    }\n}\nexports.default = WaitForAttendeePresenceTask;\n//# sourceMappingURL=WaitForAttendeePresenceTask.js.map"]},"metadata":{},"sourceType":"script"}