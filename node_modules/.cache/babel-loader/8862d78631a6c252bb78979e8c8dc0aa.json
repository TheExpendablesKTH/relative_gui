{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nconst ClientMetricReportDirection_1 = require(\"./ClientMetricReportDirection\");\n\nconst ClientMetricReportMediaType_1 = require(\"./ClientMetricReportMediaType\");\n\nconst GlobalMetricReport_1 = require(\"./GlobalMetricReport\");\n\nclass DefaultClientMetricReport {\n  constructor(logger) {\n    this.logger = logger;\n    this.globalMetricReport = new GlobalMetricReport_1.default();\n    this.streamMetricReports = {};\n    this.currentTimestampMs = 0;\n    this.previousTimestampMs = 0;\n    this.currentSsrcs = {};\n    /**\n     *  Metric transform functions\n     */\n\n    this.identityValue = (metricName, ssrc) => {\n      const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n      return Number(metricReport.currentMetrics[metricName]);\n    };\n\n    this.decoderLossPercent = (metricName, ssrc) => {\n      const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n      const decoderNormal = metricReport.currentMetrics['googDecodingNormal'] - (metricReport.previousMetrics['googDecodingNormal'] || 0);\n      const decoderCalls = metricReport.currentMetrics['googDecodingCTN'] - (metricReport.previousMetrics['googDecodingCTN'] || 0);\n\n      if (decoderCalls <= 0) {\n        return 0;\n      }\n\n      const decoderAbnormal = decoderCalls - decoderNormal;\n\n      if (decoderAbnormal <= 0) {\n        return 0;\n      }\n\n      return decoderAbnormal * 100 / decoderCalls;\n    };\n\n    this.packetLossPercent = (sourceMetricName, ssrc) => {\n      const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n      const sentOrReceived = metricReport.currentMetrics[sourceMetricName] - (metricReport.previousMetrics[sourceMetricName] || 0);\n      const lost = metricReport.currentMetrics['packetsLost'] - (metricReport.previousMetrics['packetsLost'] || 0);\n      const total = sentOrReceived + lost;\n\n      if (total <= 0 || lost <= 0) {\n        return 0;\n      }\n\n      return lost * 100 / total;\n    };\n\n    this.countPerSecond = (metricName, ssrc) => {\n      const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n      let intervalSeconds = (this.currentTimestampMs - this.previousTimestampMs) / 1000;\n\n      if (intervalSeconds <= 0) {\n        return 0;\n      }\n\n      if (this.previousTimestampMs <= 0) {\n        intervalSeconds = 1;\n      }\n\n      const diff = metricReport.currentMetrics[metricName] - (metricReport.previousMetrics[metricName] || 0);\n\n      if (diff <= 0) {\n        return 0;\n      }\n\n      return Math.trunc(diff / intervalSeconds);\n    };\n\n    this.bitsPerSecond = (metricName, ssrc) => {\n      const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n      let intervalSeconds = (this.currentTimestampMs - this.previousTimestampMs) / 1000;\n\n      if (intervalSeconds <= 0) {\n        return 0;\n      }\n\n      if (this.previousTimestampMs <= 0) {\n        intervalSeconds = 1;\n      }\n\n      const diff = (metricReport.currentMetrics[metricName] - (metricReport.previousMetrics[metricName] || 0)) * 8;\n\n      if (diff <= 0) {\n        return 0;\n      }\n\n      return Math.trunc(diff / intervalSeconds);\n    };\n\n    this.secondsToMilliseconds = (metricName, ssrc) => {\n      const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n      return Number(metricReport.currentMetrics[metricName] * 1000);\n    };\n    /**\n     *  Canonical and derived metric maps\n     */\n\n\n    this.globalMetricMap = {\n      googActualEncBitrate: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_ACTUAL_ENCODER_BITRATE\n      },\n      googAvailableSendBandwidth: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_AVAILABLE_SEND_BANDWIDTH\n      },\n      googRetransmitBitrate: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RETRANSMIT_BITRATE\n      },\n      googAvailableReceiveBandwidth: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_AVAILABLE_RECEIVE_BANDWIDTH\n      },\n      googTargetEncBitrate: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_TARGET_ENCODER_BITRATE\n      },\n      googBucketDelay: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_BUCKET_DELAY_MS\n      },\n      googRtt: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.STUN_RTT_MS\n      },\n      packetsDiscardedOnSend: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.SOCKET_DISCARDED_PPS\n      },\n      availableIncomingBitrate: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_AVAILABLE_RECEIVE_BANDWIDTH\n      },\n      availableOutgoingBitrate: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_AVAILABLE_SEND_BANDWIDTH\n      },\n      currentRoundTripTime: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.STUN_RTT_MS\n      }\n    };\n    this.audioUpstreamMetricMap = {\n      googJitterReceived: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_JITTER_MS\n      },\n      jitter: {\n        transform: this.secondsToMilliseconds,\n        type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_JITTER_MS\n      },\n      packetsSent: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_PPS\n      },\n      bytesSent: {\n        transform: this.bitsPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_BITRATE\n      },\n      googRtt: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_RTT_MS\n      },\n      packetsLost: {\n        transform: this.packetLossPercent,\n        type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_FRACTION_PACKET_LOST_PERCENT,\n        source: 'packetsSent'\n      }\n    };\n    this.audioDownstreamMetricMap = {\n      packetsReceived: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_PPS\n      },\n      packetsLost: {\n        transform: this.packetLossPercent,\n        type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_FRACTION_PACKET_LOST_PERCENT,\n        source: 'packetsReceived'\n      },\n      googJitterReceived: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_JITTER_MS\n      },\n      jitter: {\n        transform: this.secondsToMilliseconds,\n        type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_JITTER_MS\n      },\n      googDecodingCTN: {\n        transform: this.countPerSecond\n      },\n      googDecodingNormal: {\n        transform: this.decoderLossPercent,\n        type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_FRACTION_DECODER_LOSS_PERCENT,\n        source: 'googDecodingCTN'\n      },\n      bytesReceived: {\n        transform: this.bitsPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_BITRATE\n      },\n      googCurrentDelayMs: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_CURRENT_DELAY_MS\n      },\n      googJitterBufferMs: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_JITTER_BUFFER_MS\n      }\n    };\n    this.videoUpstreamMetricMap = {\n      googRtt: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_RTT_MS\n      },\n      googEncodeUsagePercent: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_ENCODE_USAGE_PERCENT\n      },\n      googNacksReceived: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_NACKS_RECEIVED\n      },\n      nackCount: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_NACKS_RECEIVED\n      },\n      googPlisReceived: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_PLIS_RECEIVED\n      },\n      pliCount: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_PLIS_RECEIVED\n      },\n      googFirsReceived: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_FIRS_RECEIVED\n      },\n      firCount: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_FIRS_RECEIVED\n      },\n      googAvgEncodeMs: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_AVERAGE_ENCODE_MS\n      },\n      googFrameRateInput: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_INPUT_FPS\n      },\n      framesEncoded: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_ENCODE_FPS\n      },\n      googFrameRateSent: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_FPS\n      },\n      framerateMean: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_FPS\n      },\n      packetsSent: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_PPS\n      },\n      packetsLost: {\n        transform: this.packetLossPercent,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_FRACTION_PACKET_LOST_PERCENT,\n        source: 'packetsSent'\n      },\n      bytesSent: {\n        transform: this.bitsPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_BITRATE\n      },\n      droppedFrames: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_DROPPED_FPS\n      },\n      qpSum: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_QP_SUM\n      }\n    };\n    this.videoDownstreamMetricMap = {\n      googTargetDelayMs: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_TARGET_DELAY_MS\n      },\n      googDecodeMs: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_DECODE_MS\n      },\n      googFrameRateOutput: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_OUTPUT_FPS\n      },\n      packetsReceived: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_PPS\n      },\n      packetsLost: {\n        transform: this.packetLossPercent,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_FRACTION_PACKET_LOST_PERCENT,\n        source: 'packetsReceived'\n      },\n      googRenderDelayMs: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RENDER_DELAY_MS\n      },\n      googFrameRateReceived: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_FPS\n      },\n      framerateMean: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_FPS\n      },\n      framesDecoded: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_DECODE_FPS\n      },\n      googNacksSent: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_NACKS_SENT\n      },\n      nackCount: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_NACKS_SENT\n      },\n      googFirsSent: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_FIRS_SENT\n      },\n      firCount: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_FIRS_SENT\n      },\n      googPlisSent: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_PLIS_SENT\n      },\n      pliCount: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_PLIS_SENT\n      },\n      bytesReceived: {\n        transform: this.bitsPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_BITRATE\n      },\n      googCurrentDelayMs: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_CURRENT_DELAY_MS\n      },\n      googJitterBufferMs: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_JITTER_BUFFER_MS\n      },\n      discardedPackets: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_DISCARDED_PPS\n      },\n      googJitterReceived: {\n        transform: this.identityValue,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_JITTER_MS\n      },\n      jitter: {\n        transform: this.secondsToMilliseconds,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_JITTER_MS\n      },\n      qpSum: {\n        transform: this.countPerSecond,\n        type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_QP_SUM\n      }\n    };\n    /**\n     * Observable metrics and related APIs\n     */\n\n    this.observableMetricSpec = {\n      audioPacketsReceived: {\n        source: 'packetsReceived',\n        media: ClientMetricReportMediaType_1.default.AUDIO,\n        dir: ClientMetricReportDirection_1.default.DOWNSTREAM\n      },\n      audioPacketsReceivedFractionLoss: {\n        source: 'packetsLost',\n        media: ClientMetricReportMediaType_1.default.AUDIO,\n        dir: ClientMetricReportDirection_1.default.DOWNSTREAM\n      },\n      audioDecoderLoss: {\n        source: 'googDecodingNormal',\n        media: ClientMetricReportMediaType_1.default.AUDIO,\n        dir: ClientMetricReportDirection_1.default.DOWNSTREAM\n      },\n      videoUpstreamBitrate: {\n        source: 'bytesSent',\n        media: ClientMetricReportMediaType_1.default.VIDEO,\n        dir: ClientMetricReportDirection_1.default.UPSTREAM\n      },\n      videoPacketSentPerSecond: {\n        source: 'packetsSent',\n        media: ClientMetricReportMediaType_1.default.VIDEO,\n        dir: ClientMetricReportDirection_1.default.UPSTREAM\n      },\n      availableSendBandwidth: {\n        source: 'googAvailableSendBandwidth'\n      },\n      availableReceiveBandwidth: {\n        source: 'googAvailableReceiveBandwidth'\n      },\n      audioSpeakerDelayMs: {\n        source: 'googCurrentDelayMs',\n        media: ClientMetricReportMediaType_1.default.AUDIO,\n        dir: ClientMetricReportDirection_1.default.DOWNSTREAM\n      },\n      // new getStats() API\n      availableIncomingBitrate: {\n        source: 'availableIncomingBitrate'\n      },\n      availableOutgoingBitrate: {\n        source: 'availableOutgoingBitrate'\n      },\n      nackCountReceivedPerSecond: {\n        source: 'nackCount',\n        media: ClientMetricReportMediaType_1.default.VIDEO,\n        dir: ClientMetricReportDirection_1.default.UPSTREAM\n      },\n      googNackCountReceivedPerSecond: {\n        source: 'googNacksReceived',\n        media: ClientMetricReportMediaType_1.default.VIDEO,\n        dir: ClientMetricReportDirection_1.default.UPSTREAM\n      }\n    };\n  }\n\n  getMetricMap(mediaType, direction) {\n    switch (mediaType) {\n      case ClientMetricReportMediaType_1.default.AUDIO:\n        switch (direction) {\n          case ClientMetricReportDirection_1.default.UPSTREAM:\n            return this.audioUpstreamMetricMap;\n\n          case ClientMetricReportDirection_1.default.DOWNSTREAM:\n            return this.audioDownstreamMetricMap;\n        }\n\n      case ClientMetricReportMediaType_1.default.VIDEO:\n        switch (direction) {\n          case ClientMetricReportDirection_1.default.UPSTREAM:\n            return this.videoUpstreamMetricMap;\n\n          case ClientMetricReportDirection_1.default.DOWNSTREAM:\n            return this.videoDownstreamMetricMap;\n        }\n\n      default:\n        return this.globalMetricMap;\n    }\n  }\n\n  getObservableMetricValue(metricName) {\n    const observableMetricSpec = this.observableMetricSpec[metricName];\n    const metricMap = this.getMetricMap(observableMetricSpec.media, observableMetricSpec.dir);\n    const metricSpec = metricMap[observableMetricSpec.source];\n    const transform = metricSpec.transform;\n    const source = metricSpec.source;\n\n    if (observableMetricSpec.hasOwnProperty('media')) {\n      for (const ssrc in this.streamMetricReports) {\n        const streamMetricReport = this.streamMetricReports[ssrc];\n\n        if (observableMetricSpec.source in streamMetricReport.currentMetrics && streamMetricReport.direction === observableMetricSpec.dir && streamMetricReport.mediaType === observableMetricSpec.media) {\n          return source ? transform(source, Number(ssrc)) : transform(observableMetricSpec.source, Number(ssrc));\n        }\n      }\n    } else {\n      return source ? transform(source) : transform(observableMetricSpec.source);\n    }\n\n    return 0;\n  }\n\n  getObservableMetrics() {\n    const metric = {};\n\n    for (const metricName in this.observableMetricSpec) {\n      metric[metricName] = this.getObservableMetricValue(metricName);\n    }\n\n    return metric;\n  }\n  /**\n   * Utilities\n   */\n\n\n  clone() {\n    const cloned = new DefaultClientMetricReport(this.logger);\n    cloned.globalMetricReport = this.globalMetricReport;\n    cloned.streamMetricReports = this.streamMetricReports;\n    cloned.currentTimestampMs = this.currentTimestampMs;\n    cloned.previousTimestampMs = this.previousTimestampMs;\n    return cloned;\n  }\n\n  print() {\n    const clientMetricReport = {\n      globalMetricReport: this.globalMetricReport,\n      streamMetricReports: this.streamMetricReports,\n      currentTimestampMs: this.currentTimestampMs,\n      previousTimestampMs: this.previousTimestampMs\n    };\n    this.logger.debug(() => {\n      return `Client Metric Report: ${JSON.stringify(clientMetricReport)}`;\n    });\n  }\n\n  removeDestroyedSsrcs() {\n    for (const ssrc in this.streamMetricReports) {\n      if (!this.currentSsrcs[ssrc]) {\n        delete this.streamMetricReports[ssrc];\n      }\n    }\n  }\n\n}\n\nexports.default = DefaultClientMetricReport;","map":{"version":3,"sources":["../../src/clientmetricreport/DefaultClientMetricReport.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\nconst ClientMetricReportDirection_1 = require(\"./ClientMetricReportDirection\");\nconst ClientMetricReportMediaType_1 = require(\"./ClientMetricReportMediaType\");\nconst GlobalMetricReport_1 = require(\"./GlobalMetricReport\");\nclass DefaultClientMetricReport {\n    constructor(logger) {\n        this.logger = logger;\n        this.globalMetricReport = new GlobalMetricReport_1.default();\n        this.streamMetricReports = {};\n        this.currentTimestampMs = 0;\n        this.previousTimestampMs = 0;\n        this.currentSsrcs = {};\n        /**\n         *  Metric transform functions\n         */\n        this.identityValue = (metricName, ssrc) => {\n            const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n            return Number(metricReport.currentMetrics[metricName]);\n        };\n        this.decoderLossPercent = (metricName, ssrc) => {\n            const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n            const decoderNormal = metricReport.currentMetrics['googDecodingNormal'] -\n                (metricReport.previousMetrics['googDecodingNormal'] || 0);\n            const decoderCalls = metricReport.currentMetrics['googDecodingCTN'] -\n                (metricReport.previousMetrics['googDecodingCTN'] || 0);\n            if (decoderCalls <= 0) {\n                return 0;\n            }\n            const decoderAbnormal = decoderCalls - decoderNormal;\n            if (decoderAbnormal <= 0) {\n                return 0;\n            }\n            return (decoderAbnormal * 100) / decoderCalls;\n        };\n        this.packetLossPercent = (sourceMetricName, ssrc) => {\n            const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n            const sentOrReceived = metricReport.currentMetrics[sourceMetricName] -\n                (metricReport.previousMetrics[sourceMetricName] || 0);\n            const lost = metricReport.currentMetrics['packetsLost'] -\n                (metricReport.previousMetrics['packetsLost'] || 0);\n            const total = sentOrReceived + lost;\n            if (total <= 0 || lost <= 0) {\n                return 0;\n            }\n            return (lost * 100) / total;\n        };\n        this.countPerSecond = (metricName, ssrc) => {\n            const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n            let intervalSeconds = (this.currentTimestampMs - this.previousTimestampMs) / 1000;\n            if (intervalSeconds <= 0) {\n                return 0;\n            }\n            if (this.previousTimestampMs <= 0) {\n                intervalSeconds = 1;\n            }\n            const diff = metricReport.currentMetrics[metricName] - (metricReport.previousMetrics[metricName] || 0);\n            if (diff <= 0) {\n                return 0;\n            }\n            return Math.trunc(diff / intervalSeconds);\n        };\n        this.bitsPerSecond = (metricName, ssrc) => {\n            const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n            let intervalSeconds = (this.currentTimestampMs - this.previousTimestampMs) / 1000;\n            if (intervalSeconds <= 0) {\n                return 0;\n            }\n            if (this.previousTimestampMs <= 0) {\n                intervalSeconds = 1;\n            }\n            const diff = (metricReport.currentMetrics[metricName] - (metricReport.previousMetrics[metricName] || 0)) *\n                8;\n            if (diff <= 0) {\n                return 0;\n            }\n            return Math.trunc(diff / intervalSeconds);\n        };\n        this.secondsToMilliseconds = (metricName, ssrc) => {\n            const metricReport = ssrc ? this.streamMetricReports[ssrc] : this.globalMetricReport;\n            return Number(metricReport.currentMetrics[metricName] * 1000);\n        };\n        /**\n         *  Canonical and derived metric maps\n         */\n        this.globalMetricMap = {\n            googActualEncBitrate: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_ACTUAL_ENCODER_BITRATE,\n            },\n            googAvailableSendBandwidth: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_AVAILABLE_SEND_BANDWIDTH,\n            },\n            googRetransmitBitrate: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RETRANSMIT_BITRATE,\n            },\n            googAvailableReceiveBandwidth: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_AVAILABLE_RECEIVE_BANDWIDTH,\n            },\n            googTargetEncBitrate: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_TARGET_ENCODER_BITRATE,\n            },\n            googBucketDelay: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_BUCKET_DELAY_MS },\n            googRtt: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.STUN_RTT_MS },\n            packetsDiscardedOnSend: {\n                transform: this.countPerSecond,\n                type: SignalingProtocol_js_1.SdkMetric.Type.SOCKET_DISCARDED_PPS,\n            },\n            availableIncomingBitrate: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_AVAILABLE_RECEIVE_BANDWIDTH,\n            },\n            availableOutgoingBitrate: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_AVAILABLE_SEND_BANDWIDTH,\n            },\n            currentRoundTripTime: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.STUN_RTT_MS },\n        };\n        this.audioUpstreamMetricMap = {\n            googJitterReceived: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_JITTER_MS },\n            jitter: { transform: this.secondsToMilliseconds, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_JITTER_MS },\n            packetsSent: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_PPS },\n            bytesSent: { transform: this.bitsPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_BITRATE },\n            googRtt: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_RTT_MS },\n            packetsLost: {\n                transform: this.packetLossPercent,\n                type: SignalingProtocol_js_1.SdkMetric.Type.RTC_MIC_FRACTION_PACKET_LOST_PERCENT,\n                source: 'packetsSent',\n            },\n        };\n        this.audioDownstreamMetricMap = {\n            packetsReceived: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_PPS },\n            packetsLost: {\n                transform: this.packetLossPercent,\n                type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_FRACTION_PACKET_LOST_PERCENT,\n                source: 'packetsReceived',\n            },\n            googJitterReceived: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_JITTER_MS },\n            jitter: { transform: this.secondsToMilliseconds, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_JITTER_MS },\n            googDecodingCTN: { transform: this.countPerSecond },\n            googDecodingNormal: {\n                transform: this.decoderLossPercent,\n                type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_FRACTION_DECODER_LOSS_PERCENT,\n                source: 'googDecodingCTN',\n            },\n            bytesReceived: { transform: this.bitsPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_BITRATE },\n            googCurrentDelayMs: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_CURRENT_DELAY_MS,\n            },\n            googJitterBufferMs: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.RTC_SPK_JITTER_BUFFER_MS,\n            },\n        };\n        this.videoUpstreamMetricMap = {\n            googRtt: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_RTT_MS },\n            googEncodeUsagePercent: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_ENCODE_USAGE_PERCENT,\n            },\n            googNacksReceived: {\n                transform: this.countPerSecond,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_NACKS_RECEIVED,\n            },\n            nackCount: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_NACKS_RECEIVED },\n            googPlisReceived: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_PLIS_RECEIVED },\n            pliCount: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_PLIS_RECEIVED },\n            googFirsReceived: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_FIRS_RECEIVED },\n            firCount: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_FIRS_RECEIVED },\n            googAvgEncodeMs: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_AVERAGE_ENCODE_MS,\n            },\n            googFrameRateInput: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_INPUT_FPS },\n            framesEncoded: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_ENCODE_FPS },\n            googFrameRateSent: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_FPS },\n            framerateMean: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_FPS },\n            packetsSent: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_PPS },\n            packetsLost: {\n                transform: this.packetLossPercent,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_FRACTION_PACKET_LOST_PERCENT,\n                source: 'packetsSent',\n            },\n            bytesSent: { transform: this.bitsPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_BITRATE },\n            droppedFrames: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_DROPPED_FPS },\n            qpSum: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_SENT_QP_SUM },\n        };\n        this.videoDownstreamMetricMap = {\n            googTargetDelayMs: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_TARGET_DELAY_MS,\n            },\n            googDecodeMs: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_DECODE_MS },\n            googFrameRateOutput: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_OUTPUT_FPS },\n            packetsReceived: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_PPS },\n            packetsLost: {\n                transform: this.packetLossPercent,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_FRACTION_PACKET_LOST_PERCENT,\n                source: 'packetsReceived',\n            },\n            googRenderDelayMs: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RENDER_DELAY_MS,\n            },\n            googFrameRateReceived: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_FPS,\n            },\n            framerateMean: { transform: this.identityValue, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_FPS },\n            framesDecoded: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_DECODE_FPS },\n            googNacksSent: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_NACKS_SENT },\n            nackCount: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_NACKS_SENT },\n            googFirsSent: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_FIRS_SENT },\n            firCount: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_FIRS_SENT },\n            googPlisSent: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_PLIS_SENT },\n            pliCount: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_PLIS_SENT },\n            bytesReceived: { transform: this.bitsPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_BITRATE },\n            googCurrentDelayMs: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_CURRENT_DELAY_MS,\n            },\n            googJitterBufferMs: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_JITTER_BUFFER_MS,\n            },\n            discardedPackets: { transform: this.countPerSecond, type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_DISCARDED_PPS },\n            googJitterReceived: {\n                transform: this.identityValue,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_JITTER_MS,\n            },\n            jitter: {\n                transform: this.secondsToMilliseconds,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_JITTER_MS,\n            },\n            qpSum: {\n                transform: this.countPerSecond,\n                type: SignalingProtocol_js_1.SdkMetric.Type.VIDEO_RECEIVED_QP_SUM,\n            },\n        };\n        /**\n         * Observable metrics and related APIs\n         */\n        this.observableMetricSpec = {\n            audioPacketsReceived: {\n                source: 'packetsReceived',\n                media: ClientMetricReportMediaType_1.default.AUDIO,\n                dir: ClientMetricReportDirection_1.default.DOWNSTREAM,\n            },\n            audioPacketsReceivedFractionLoss: {\n                source: 'packetsLost',\n                media: ClientMetricReportMediaType_1.default.AUDIO,\n                dir: ClientMetricReportDirection_1.default.DOWNSTREAM,\n            },\n            audioDecoderLoss: {\n                source: 'googDecodingNormal',\n                media: ClientMetricReportMediaType_1.default.AUDIO,\n                dir: ClientMetricReportDirection_1.default.DOWNSTREAM,\n            },\n            videoUpstreamBitrate: { source: 'bytesSent', media: ClientMetricReportMediaType_1.default.VIDEO, dir: ClientMetricReportDirection_1.default.UPSTREAM },\n            videoPacketSentPerSecond: {\n                source: 'packetsSent',\n                media: ClientMetricReportMediaType_1.default.VIDEO,\n                dir: ClientMetricReportDirection_1.default.UPSTREAM,\n            },\n            availableSendBandwidth: { source: 'googAvailableSendBandwidth' },\n            availableReceiveBandwidth: { source: 'googAvailableReceiveBandwidth' },\n            audioSpeakerDelayMs: {\n                source: 'googCurrentDelayMs',\n                media: ClientMetricReportMediaType_1.default.AUDIO,\n                dir: ClientMetricReportDirection_1.default.DOWNSTREAM,\n            },\n            // new getStats() API\n            availableIncomingBitrate: { source: 'availableIncomingBitrate' },\n            availableOutgoingBitrate: { source: 'availableOutgoingBitrate' },\n            nackCountReceivedPerSecond: {\n                source: 'nackCount',\n                media: ClientMetricReportMediaType_1.default.VIDEO,\n                dir: ClientMetricReportDirection_1.default.UPSTREAM,\n            },\n            googNackCountReceivedPerSecond: {\n                source: 'googNacksReceived',\n                media: ClientMetricReportMediaType_1.default.VIDEO,\n                dir: ClientMetricReportDirection_1.default.UPSTREAM,\n            },\n        };\n    }\n    getMetricMap(mediaType, direction) {\n        switch (mediaType) {\n            case ClientMetricReportMediaType_1.default.AUDIO:\n                switch (direction) {\n                    case ClientMetricReportDirection_1.default.UPSTREAM:\n                        return this.audioUpstreamMetricMap;\n                    case ClientMetricReportDirection_1.default.DOWNSTREAM:\n                        return this.audioDownstreamMetricMap;\n                }\n            case ClientMetricReportMediaType_1.default.VIDEO:\n                switch (direction) {\n                    case ClientMetricReportDirection_1.default.UPSTREAM:\n                        return this.videoUpstreamMetricMap;\n                    case ClientMetricReportDirection_1.default.DOWNSTREAM:\n                        return this.videoDownstreamMetricMap;\n                }\n            default:\n                return this.globalMetricMap;\n        }\n    }\n    getObservableMetricValue(metricName) {\n        const observableMetricSpec = this.observableMetricSpec[metricName];\n        const metricMap = this.getMetricMap(observableMetricSpec.media, observableMetricSpec.dir);\n        const metricSpec = metricMap[observableMetricSpec.source];\n        const transform = metricSpec.transform;\n        const source = metricSpec.source;\n        if (observableMetricSpec.hasOwnProperty('media')) {\n            for (const ssrc in this.streamMetricReports) {\n                const streamMetricReport = this.streamMetricReports[ssrc];\n                if (observableMetricSpec.source in streamMetricReport.currentMetrics &&\n                    streamMetricReport.direction === observableMetricSpec.dir &&\n                    streamMetricReport.mediaType === observableMetricSpec.media) {\n                    return source\n                        ? transform(source, Number(ssrc))\n                        : transform(observableMetricSpec.source, Number(ssrc));\n                }\n            }\n        }\n        else {\n            return source ? transform(source) : transform(observableMetricSpec.source);\n        }\n        return 0;\n    }\n    getObservableMetrics() {\n        const metric = {};\n        for (const metricName in this.observableMetricSpec) {\n            metric[metricName] = this.getObservableMetricValue(metricName);\n        }\n        return metric;\n    }\n    /**\n     * Utilities\n     */\n    clone() {\n        const cloned = new DefaultClientMetricReport(this.logger);\n        cloned.globalMetricReport = this.globalMetricReport;\n        cloned.streamMetricReports = this.streamMetricReports;\n        cloned.currentTimestampMs = this.currentTimestampMs;\n        cloned.previousTimestampMs = this.previousTimestampMs;\n        return cloned;\n    }\n    print() {\n        const clientMetricReport = {\n            globalMetricReport: this.globalMetricReport,\n            streamMetricReports: this.streamMetricReports,\n            currentTimestampMs: this.currentTimestampMs,\n            previousTimestampMs: this.previousTimestampMs,\n        };\n        this.logger.debug(() => {\n            return `Client Metric Report: ${JSON.stringify(clientMetricReport)}`;\n        });\n    }\n    removeDestroyedSsrcs() {\n        for (const ssrc in this.streamMetricReports) {\n            if (!this.currentSsrcs[ssrc]) {\n                delete this.streamMetricReports[ssrc];\n            }\n        }\n    }\n}\nexports.default = DefaultClientMetricReport;\n//# sourceMappingURL=DefaultClientMetricReport.js.map"]},"metadata":{},"sourceType":"script"}