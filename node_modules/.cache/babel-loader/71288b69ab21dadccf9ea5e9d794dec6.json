{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\n\nconst DefaultSDP_1 = require(\"../sdp/DefaultSDP\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[CreateSDPTask]] asynchronously calls [[createOffer]] on peer connection.\n */\n\n\nclass CreateSDPTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'CreateSDPTask';\n  }\n\n  cancel() {\n    // Just in case. The baseCancel behavior should prevent this.\n\n    /* istanbul ignore else */\n    if (this.cancelPromise) {\n      const error = new Error(`canceling ${this.name()}`);\n      this.cancelPromise(error);\n      delete this.cancelPromise;\n    }\n  }\n\n  sessionUsesAudio() {\n    return true;\n  }\n\n  sessionUsesVideo() {\n    const enabled = true;\n    let sending;\n\n    if (this.context.transceiverController.useTransceivers()) {\n      sending = this.context.transceiverController.hasVideoInput();\n    } else {\n      sending = this.context.videoTileController.hasStartedLocalVideoTile();\n    }\n\n    const receiving = !!this.context.videosToReceive && !this.context.videosToReceive.empty();\n    const usesVideo = enabled && (sending || receiving);\n    this.context.logger.info(`uses video: ${usesVideo} (enabled: ${enabled}, sending: ${sending}, receiving: ${receiving})`);\n    return usesVideo;\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const offerOptions = {\n        offerToReceiveAudio: this.sessionUsesAudio(),\n        offerToReceiveVideo: this.sessionUsesVideo()\n      };\n      this.logger.info(`peer connection offerOptions: ${JSON.stringify(offerOptions)}`);\n      yield new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n        this.cancelPromise = error => {\n          reject(error);\n        };\n\n        try {\n          this.context.sdpOfferInit = yield this.context.peer.createOffer(offerOptions);\n          this.context.logger.info('peer connection created offer');\n\n          if (this.context.previousSdpOffer) {\n            if (new DefaultSDP_1.default(this.context.sdpOfferInit.sdp).videoSendSectionHasDifferentSSRC(this.context.previousSdpOffer)) {\n              const error = new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.IncompatibleSDP}`);\n              this.context.previousSdpOffer = null;\n              reject(error);\n              return;\n            }\n          }\n\n          resolve();\n        } catch (error) {\n          reject(error);\n        } finally {\n          delete this.cancelPromise;\n        }\n      }));\n    });\n  }\n\n}\n\nexports.default = CreateSDPTask;","map":{"version":3,"sources":["../../src/task/CreateSDPTask.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\nconst DefaultSDP_1 = require(\"../sdp/DefaultSDP\");\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[CreateSDPTask]] asynchronously calls [[createOffer]] on peer connection.\n */\nclass CreateSDPTask extends BaseTask_1.default {\n    constructor(context) {\n        super(context.logger);\n        this.context = context;\n        this.taskName = 'CreateSDPTask';\n    }\n    cancel() {\n        // Just in case. The baseCancel behavior should prevent this.\n        /* istanbul ignore else */\n        if (this.cancelPromise) {\n            const error = new Error(`canceling ${this.name()}`);\n            this.cancelPromise(error);\n            delete this.cancelPromise;\n        }\n    }\n    sessionUsesAudio() {\n        return true;\n    }\n    sessionUsesVideo() {\n        const enabled = true;\n        let sending;\n        if (this.context.transceiverController.useTransceivers()) {\n            sending = this.context.transceiverController.hasVideoInput();\n        }\n        else {\n            sending = this.context.videoTileController.hasStartedLocalVideoTile();\n        }\n        const receiving = !!this.context.videosToReceive && !this.context.videosToReceive.empty();\n        const usesVideo = enabled && (sending || receiving);\n        this.context.logger.info(`uses video: ${usesVideo} (enabled: ${enabled}, sending: ${sending}, receiving: ${receiving})`);\n        return usesVideo;\n    }\n    run() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const offerOptions = {\n                offerToReceiveAudio: this.sessionUsesAudio(),\n                offerToReceiveVideo: this.sessionUsesVideo(),\n            };\n            this.logger.info(`peer connection offerOptions: ${JSON.stringify(offerOptions)}`);\n            yield new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                this.cancelPromise = (error) => {\n                    reject(error);\n                };\n                try {\n                    this.context.sdpOfferInit = yield this.context.peer.createOffer(offerOptions);\n                    this.context.logger.info('peer connection created offer');\n                    if (this.context.previousSdpOffer) {\n                        if (new DefaultSDP_1.default(this.context.sdpOfferInit.sdp).videoSendSectionHasDifferentSSRC(this.context.previousSdpOffer)) {\n                            const error = new Error(`canceling ${this.name()} due to the meeting status code: ${MeetingSessionStatusCode_1.default.IncompatibleSDP}`);\n                            this.context.previousSdpOffer = null;\n                            reject(error);\n                            return;\n                        }\n                    }\n                    resolve();\n                }\n                catch (error) {\n                    reject(error);\n                }\n                finally {\n                    delete this.cancelPromise;\n                }\n            }));\n        });\n    }\n}\nexports.default = CreateSDPTask;\n//# sourceMappingURL=CreateSDPTask.js.map"]},"metadata":{},"sourceType":"script"}