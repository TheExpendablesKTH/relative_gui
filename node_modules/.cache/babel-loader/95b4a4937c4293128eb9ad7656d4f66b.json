{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Maybe_1 = require(\"../maybe/Maybe\");\n\nconst AsyncScheduler_1 = require(\"../scheduler/AsyncScheduler\");\n\nconst IntervalScheduler_1 = require(\"../scheduler/IntervalScheduler\");\n\nconst SignalingClientEventType_1 = require(\"../signalingclient/SignalingClientEventType\");\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n/**\n * [[DefaultPingPong]] implements the PingPong and SignalingClientObserver interface.\n */\n\n\nclass DefaultPingPong {\n  constructor(signalingClient, intervalMs, logger) {\n    this.signalingClient = signalingClient;\n    this.intervalMs = intervalMs;\n    this.logger = logger;\n    this.observerQueue = new Set();\n    this.consecutivePongsUnaccountedFor = 0;\n    this.intervalScheduler = new IntervalScheduler_1.default(this.intervalMs);\n    this.pingId = 0;\n  }\n\n  addObserver(observer) {\n    this.logger.info('adding a ping-pong observer');\n    this.observerQueue.add(observer);\n  }\n\n  removeObserver(observer) {\n    this.logger.info('removing a ping-pong observer');\n    this.observerQueue.delete(observer);\n  }\n\n  forEachObserver(observerFunc) {\n    for (const observer of this.observerQueue) {\n      AsyncScheduler_1.default.nextTick(() => {\n        if (this.observerQueue.has(observer)) {\n          observerFunc(observer);\n        }\n      });\n    }\n  }\n\n  start() {\n    this.stop();\n    this.signalingClient.registerObserver(this);\n\n    if (this.signalingClient.ready()) {\n      this.startPingInterval();\n    }\n  }\n\n  stop() {\n    this.stopPingInterval();\n    this.signalingClient.removeObserver(this);\n  }\n\n  startPingInterval() {\n    this.intervalScheduler.start(() => {\n      this.ping();\n    });\n    this.ping();\n  }\n\n  stopPingInterval() {\n    this.intervalScheduler.stop();\n    this.pingId = 0;\n    this.consecutivePongsUnaccountedFor = 0;\n  }\n\n  ping() {\n    if (this.consecutivePongsUnaccountedFor > 0) {\n      this.logger.warn(`missed pong ${this.consecutivePongsUnaccountedFor} time(s)`);\n      this.forEachObserver(observer => {\n        Maybe_1.default.of(observer.didMissPongs).map(f => f.bind(observer)(this.consecutivePongsUnaccountedFor));\n      });\n    }\n\n    this.consecutivePongsUnaccountedFor += 1;\n    this.pingId = this.pingId + 1 & 0xffffffff;\n    const ping = SignalingProtocol_js_1.SdkPingPongFrame.create();\n    ping.pingId = this.pingId;\n    ping.type = SignalingProtocol_js_1.SdkPingPongType.PING;\n    this.pingTimestampLocalMs = this.signalingClient.pingPong(ping);\n    this.logger.debug(() => {\n      return `sent ping ${this.pingId}`;\n    });\n  }\n\n  pong(pingId) {\n    const pong = SignalingProtocol_js_1.SdkPingPongFrame.create();\n    pong.pingId = pingId;\n    pong.type = SignalingProtocol_js_1.SdkPingPongType.PONG;\n    this.signalingClient.pingPong(pong);\n  }\n\n  handleSignalingClientEvent(event) {\n    switch (event.type) {\n      case SignalingClientEventType_1.default.WebSocketOpen:\n        this.startPingInterval();\n        break;\n\n      case SignalingClientEventType_1.default.WebSocketFailed:\n      case SignalingClientEventType_1.default.WebSocketError:\n        this.logger.warn(`stopped pinging (${SignalingClientEventType_1.default[event.type]})`);\n        this.stopPingInterval();\n        break;\n\n      case SignalingClientEventType_1.default.WebSocketClosing:\n      case SignalingClientEventType_1.default.WebSocketClosed:\n        this.logger.info(`stopped pinging (${SignalingClientEventType_1.default[event.type]})`);\n        this.stopPingInterval();\n        break;\n\n      case SignalingClientEventType_1.default.ReceivedSignalFrame:\n        if (event.message.type !== SignalingProtocol_js_1.SdkSignalFrame.Type.PING_PONG) {\n          break;\n        }\n\n        if (event.message.pingPong.type === SignalingProtocol_js_1.SdkPingPongType.PONG) {\n          const pingId = event.message.pingPong.pingId;\n\n          if (pingId !== this.pingId) {\n            this.logger.warn(`unexpected ping id ${pingId} (expected ${this.pingId})`);\n            break;\n          }\n\n          this.consecutivePongsUnaccountedFor = 0;\n          let pongTimestampRemoteMs;\n\n          if (typeof event.message.timestampMs === 'number') {\n            pongTimestampRemoteMs = event.message.timestampMs;\n          } else {\n            break;\n          }\n\n          this.logger.debug(() => {\n            return `received pong ${pingId} with timestamp ${pongTimestampRemoteMs}`;\n          });\n          const pongTimestampLocalMs = event.timestampMs;\n          const pingPongLocalIntervalMs = pongTimestampLocalMs - this.pingTimestampLocalMs;\n          const estimatedPingTimestampRemoteMs = Math.round(pongTimestampRemoteMs - pingPongLocalIntervalMs / 2);\n          const estimatedClockSkewMs = this.pingTimestampLocalMs - estimatedPingTimestampRemoteMs;\n          this.logger.info(`local clock skew estimate=${estimatedClockSkewMs}ms from ping-pong time=${pingPongLocalIntervalMs}ms`);\n          this.forEachObserver(observer => {\n            Maybe_1.default.of(observer.didReceivePong).map(f => f.bind(observer)(pingId, estimatedClockSkewMs, pingPongLocalIntervalMs));\n          });\n        } else {\n          this.pong(event.message.pingPong.pingId);\n        }\n\n        break;\n    }\n  }\n\n}\n\nexports.default = DefaultPingPong;","map":{"version":3,"sources":["../../src/pingpong/DefaultPingPong.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Maybe_1 = require(\"../maybe/Maybe\");\nconst AsyncScheduler_1 = require(\"../scheduler/AsyncScheduler\");\nconst IntervalScheduler_1 = require(\"../scheduler/IntervalScheduler\");\nconst SignalingClientEventType_1 = require(\"../signalingclient/SignalingClientEventType\");\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n/**\n * [[DefaultPingPong]] implements the PingPong and SignalingClientObserver interface.\n */\nclass DefaultPingPong {\n    constructor(signalingClient, intervalMs, logger) {\n        this.signalingClient = signalingClient;\n        this.intervalMs = intervalMs;\n        this.logger = logger;\n        this.observerQueue = new Set();\n        this.consecutivePongsUnaccountedFor = 0;\n        this.intervalScheduler = new IntervalScheduler_1.default(this.intervalMs);\n        this.pingId = 0;\n    }\n    addObserver(observer) {\n        this.logger.info('adding a ping-pong observer');\n        this.observerQueue.add(observer);\n    }\n    removeObserver(observer) {\n        this.logger.info('removing a ping-pong observer');\n        this.observerQueue.delete(observer);\n    }\n    forEachObserver(observerFunc) {\n        for (const observer of this.observerQueue) {\n            AsyncScheduler_1.default.nextTick(() => {\n                if (this.observerQueue.has(observer)) {\n                    observerFunc(observer);\n                }\n            });\n        }\n    }\n    start() {\n        this.stop();\n        this.signalingClient.registerObserver(this);\n        if (this.signalingClient.ready()) {\n            this.startPingInterval();\n        }\n    }\n    stop() {\n        this.stopPingInterval();\n        this.signalingClient.removeObserver(this);\n    }\n    startPingInterval() {\n        this.intervalScheduler.start(() => {\n            this.ping();\n        });\n        this.ping();\n    }\n    stopPingInterval() {\n        this.intervalScheduler.stop();\n        this.pingId = 0;\n        this.consecutivePongsUnaccountedFor = 0;\n    }\n    ping() {\n        if (this.consecutivePongsUnaccountedFor > 0) {\n            this.logger.warn(`missed pong ${this.consecutivePongsUnaccountedFor} time(s)`);\n            this.forEachObserver((observer) => {\n                Maybe_1.default.of(observer.didMissPongs).map(f => f.bind(observer)(this.consecutivePongsUnaccountedFor));\n            });\n        }\n        this.consecutivePongsUnaccountedFor += 1;\n        this.pingId = (this.pingId + 1) & 0xffffffff;\n        const ping = SignalingProtocol_js_1.SdkPingPongFrame.create();\n        ping.pingId = this.pingId;\n        ping.type = SignalingProtocol_js_1.SdkPingPongType.PING;\n        this.pingTimestampLocalMs = this.signalingClient.pingPong(ping);\n        this.logger.debug(() => {\n            return `sent ping ${this.pingId}`;\n        });\n    }\n    pong(pingId) {\n        const pong = SignalingProtocol_js_1.SdkPingPongFrame.create();\n        pong.pingId = pingId;\n        pong.type = SignalingProtocol_js_1.SdkPingPongType.PONG;\n        this.signalingClient.pingPong(pong);\n    }\n    handleSignalingClientEvent(event) {\n        switch (event.type) {\n            case SignalingClientEventType_1.default.WebSocketOpen:\n                this.startPingInterval();\n                break;\n            case SignalingClientEventType_1.default.WebSocketFailed:\n            case SignalingClientEventType_1.default.WebSocketError:\n                this.logger.warn(`stopped pinging (${SignalingClientEventType_1.default[event.type]})`);\n                this.stopPingInterval();\n                break;\n            case SignalingClientEventType_1.default.WebSocketClosing:\n            case SignalingClientEventType_1.default.WebSocketClosed:\n                this.logger.info(`stopped pinging (${SignalingClientEventType_1.default[event.type]})`);\n                this.stopPingInterval();\n                break;\n            case SignalingClientEventType_1.default.ReceivedSignalFrame:\n                if (event.message.type !== SignalingProtocol_js_1.SdkSignalFrame.Type.PING_PONG) {\n                    break;\n                }\n                if (event.message.pingPong.type === SignalingProtocol_js_1.SdkPingPongType.PONG) {\n                    const pingId = event.message.pingPong.pingId;\n                    if (pingId !== this.pingId) {\n                        this.logger.warn(`unexpected ping id ${pingId} (expected ${this.pingId})`);\n                        break;\n                    }\n                    this.consecutivePongsUnaccountedFor = 0;\n                    let pongTimestampRemoteMs;\n                    if (typeof event.message.timestampMs === 'number') {\n                        pongTimestampRemoteMs = event.message.timestampMs;\n                    }\n                    else {\n                        break;\n                    }\n                    this.logger.debug(() => {\n                        return `received pong ${pingId} with timestamp ${pongTimestampRemoteMs}`;\n                    });\n                    const pongTimestampLocalMs = event.timestampMs;\n                    const pingPongLocalIntervalMs = pongTimestampLocalMs - this.pingTimestampLocalMs;\n                    const estimatedPingTimestampRemoteMs = Math.round(pongTimestampRemoteMs - pingPongLocalIntervalMs / 2);\n                    const estimatedClockSkewMs = this.pingTimestampLocalMs - estimatedPingTimestampRemoteMs;\n                    this.logger.info(`local clock skew estimate=${estimatedClockSkewMs}ms from ping-pong time=${pingPongLocalIntervalMs}ms`);\n                    this.forEachObserver((observer) => {\n                        Maybe_1.default.of(observer.didReceivePong).map(f => f.bind(observer)(pingId, estimatedClockSkewMs, pingPongLocalIntervalMs));\n                    });\n                }\n                else {\n                    this.pong(event.message.pingPong.pingId);\n                }\n                break;\n        }\n    }\n}\nexports.default = DefaultPingPong;\n//# sourceMappingURL=DefaultPingPong.js.map"]},"metadata":{},"sourceType":"script"}