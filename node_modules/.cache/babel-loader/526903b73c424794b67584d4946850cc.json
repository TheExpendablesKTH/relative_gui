{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ClientMetricReportDirection_1 = require(\"../clientmetricreport/ClientMetricReportDirection\");\n\nconst ClientMetricReportMediaType_1 = require(\"../clientmetricreport/ClientMetricReportMediaType\");\n\nconst ClientVideoStreamReceivingReport_1 = require(\"../clientmetricreport/ClientVideoStreamReceivingReport\");\n\nconst ReconnectionHealthPolicy_1 = require(\"../connectionhealthpolicy/ReconnectionHealthPolicy\");\n\nconst UnusableAudioWarningConnectionHealthPolicy_1 = require(\"../connectionhealthpolicy/UnusableAudioWarningConnectionHealthPolicy\");\n\nconst Maybe_1 = require(\"../maybe/Maybe\");\n\nconst MeetingSessionStatus_1 = require(\"../meetingsession/MeetingSessionStatus\");\n\nconst MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\n\nconst SignalingClientEventType_1 = require(\"../signalingclient/SignalingClientEventType\");\n\nconst AudioLogEvent_1 = require(\"../statscollector/AudioLogEvent\");\n\nconst VideoLogEvent_1 = require(\"../statscollector/VideoLogEvent\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[MonitorTask]] monitors connections using SignalingAndMetricsConnectionMonitor.\n */\n\n\nclass MonitorTask extends BaseTask_1.default {\n  constructor(context, connectionHealthPolicyConfiguration, initialConnectionHealthData) {\n    super(context.logger);\n    this.context = context;\n    this.initialConnectionHealthData = initialConnectionHealthData;\n    this.taskName = 'MonitorTask';\n    this.prevSignalStrength = 1;\n    this.currentVideoDownlinkBandwidthEstimationKbps = 10000;\n    this.currentAvailableStreamAvgBitrates = null;\n    this.hasSignalingError = false;\n    this.presenceHandlerCalled = false;\n\n    this.checkAndSendWeakSignalEvent = signalStrength => {\n      const isCurrentSignalBad = signalStrength < 1;\n      const isPrevSignalBad = this.prevSignalStrength < 1;\n      const signalStrengthEventType = isCurrentSignalBad ? !isPrevSignalBad ? AudioLogEvent_1.default.RedmicStartLoss : null : isPrevSignalBad ? AudioLogEvent_1.default.RedmicEndLoss : null;\n\n      if (signalStrengthEventType) {\n        this.context.statsCollector.logAudioEvent(signalStrengthEventType);\n      }\n\n      this.prevSignalStrength = signalStrength;\n    };\n\n    this.realtimeFatalErrorCallback = error => {\n      this.logger.error(`realtime error: ${error}: ${error.stack}`);\n      this.context.audioVideoController.handleMeetingSessionStatus(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.RealtimeApiFailed), error);\n    };\n\n    this.realtimeAttendeeIdPresenceHandler = (presentAttendeeId, present) => {\n      const attendeeId = this.context.meetingSessionConfiguration.credentials.attendeeId;\n\n      if (attendeeId === presentAttendeeId && present && !this.presenceHandlerCalled) {\n        this.presenceHandlerCalled = true;\n        this.context.attendeePresenceDurationMs = Date.now() - this.context.startAudioVideoTimestamp;\n        /* istanbul ignore else */\n\n        if (this.context.eventController) {\n          this.context.eventController.publishEvent('attendeePresenceReceived', {\n            attendeePresenceDurationMs: this.context.attendeePresenceDurationMs\n          });\n        }\n      }\n    };\n\n    this.reconnectionHealthPolicy = new ReconnectionHealthPolicy_1.default(context.logger, Object.assign({}, connectionHealthPolicyConfiguration), this.initialConnectionHealthData.clone());\n    this.unusableAudioWarningHealthPolicy = new UnusableAudioWarningConnectionHealthPolicy_1.default(Object.assign({}, connectionHealthPolicyConfiguration), this.initialConnectionHealthData.clone());\n  }\n\n  removeObserver() {\n    this.context.audioVideoController.removeObserver(this);\n    this.context.realtimeController.realtimeUnsubscribeToFatalError(this.realtimeFatalErrorCallback);\n    this.context.realtimeController.realtimeUnsubscribeToLocalSignalStrengthChange(this.checkAndSendWeakSignalEvent);\n    this.context.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(this.realtimeAttendeeIdPresenceHandler);\n    this.context.signalingClient.removeObserver(this);\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.context.removableObservers.push(this);\n      this.context.audioVideoController.addObserver(this);\n      this.context.realtimeController.realtimeSubscribeToFatalError(this.realtimeFatalErrorCallback);\n      this.context.realtimeController.realtimeSubscribeToLocalSignalStrengthChange(this.checkAndSendWeakSignalEvent);\n      this.context.realtimeController.realtimeSubscribeToAttendeeIdPresence(this.realtimeAttendeeIdPresenceHandler);\n      this.context.connectionMonitor.start();\n      this.context.statsCollector.start(this.context.signalingClient, this.context.videoStreamIndex);\n      this.context.signalingClient.registerObserver(this);\n    });\n  }\n\n  videoTileDidUpdate(_tileState) {\n    this.context.maxVideoTileCount = Math.max(this.context.maxVideoTileCount, this.context.videoTileController.getAllVideoTiles().length);\n  }\n\n  videoSendHealthDidChange(bitrateKbps, packetsPerSecond) {\n    if (this.context.videoInputAttachedTimestampMs === 0 || !this.context.videoTileController.hasStartedLocalVideoTile() || !this.context.lastKnownVideoAvailability.canStartLocalVideo) {\n      return;\n    }\n\n    const tracks = this.context.activeVideoInput !== null ? this.context.activeVideoInput.getTracks() : null;\n\n    if (!tracks || !tracks[0]) {\n      return;\n    }\n\n    const durationMs = Date.now() - this.context.videoInputAttachedTimestampMs;\n\n    if (packetsPerSecond > 0 || bitrateKbps > 0) {\n      this.context.statsCollector.logVideoEvent(VideoLogEvent_1.default.SendingSuccess, this.context.videoDeviceInformation);\n      this.context.statsCollector.logLatency('video_start_sending', durationMs, this.context.videoDeviceInformation);\n      this.context.videoInputAttachedTimestampMs = 0;\n    } else if (durationMs > MonitorTask.DEFAULT_TIMEOUT_FOR_START_SENDING_VIDEO_MS) {\n      this.context.statsCollector.logVideoEvent(VideoLogEvent_1.default.SendingFailed, this.context.videoDeviceInformation);\n      this.context.videoInputAttachedTimestampMs = 0;\n    }\n  }\n\n  videoReceiveBandwidthDidChange(newBandwidthKbps, oldBandwidthKbps) {\n    this.logger.debug(() => {\n      return `receiving bandwidth changed from prev=${oldBandwidthKbps} Kbps to curr=${newBandwidthKbps} Kbps`;\n    });\n    this.currentVideoDownlinkBandwidthEstimationKbps = newBandwidthKbps;\n  }\n\n  checkResubscribe(clientMetricReport) {\n    const metricReport = clientMetricReport.getObservableMetrics();\n\n    if (!metricReport) {\n      return false;\n    }\n\n    const availableSendBandwidth = metricReport.availableSendBandwidth || metricReport.availableOutgoingBitrate;\n    const nackCountPerSecond = metricReport.nackCountReceivedPerSecond || metricReport.googNackCountReceivedPerSecond;\n    let needResubscribe = false;\n    this.context.videoDownlinkBandwidthPolicy.updateMetrics(clientMetricReport);\n    const resubscribeForDownlink = this.context.videoDownlinkBandwidthPolicy.wantsResubscribe();\n    needResubscribe = needResubscribe || resubscribeForDownlink;\n\n    if (resubscribeForDownlink) {\n      this.context.videosToReceive = this.context.videoDownlinkBandwidthPolicy.chooseSubscriptions();\n      this.logger.info(`trigger resubscribe for down=${resubscribeForDownlink}; videosToReceive=[${this.context.videosToReceive.array()}]`);\n    }\n\n    if (this.context.videoTileController.hasStartedLocalVideoTile()) {\n      this.context.videoUplinkBandwidthPolicy.updateConnectionMetric({\n        uplinkKbps: availableSendBandwidth / 1000,\n        nackCountPerSecond: nackCountPerSecond\n      });\n      const resubscribeForUplink = this.context.videoUplinkBandwidthPolicy.wantsResubscribe();\n      needResubscribe = needResubscribe || resubscribeForUplink;\n\n      if (resubscribeForUplink) {\n        this.logger.info(`trigger resubscribe for up=${resubscribeForUplink}; videosToReceive=[${this.context.videosToReceive.array()}]`);\n        this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();\n        this.context.videoUplinkBandwidthPolicy.chooseMediaTrackConstraints();\n      }\n    }\n\n    return needResubscribe;\n  }\n\n  metricsDidReceive(clientMetricReport) {\n    const defaultClientMetricReport = clientMetricReport;\n\n    if (!defaultClientMetricReport) {\n      return;\n    }\n\n    if (this.checkResubscribe(clientMetricReport)) {\n      this.context.audioVideoController.update();\n    }\n\n    if (!this.currentAvailableStreamAvgBitrates) {\n      return;\n    }\n\n    const streamMetricReport = defaultClientMetricReport.streamMetricReports;\n\n    if (!streamMetricReport) {\n      return;\n    }\n\n    const downlinkVideoStream = new Map();\n    const videoReceivingBitrateMap = new Map(); // TODO: move those logic to stats collector.\n\n    for (const ssrc in streamMetricReport) {\n      if (streamMetricReport[ssrc].mediaType === ClientMetricReportMediaType_1.default.VIDEO && streamMetricReport[ssrc].direction === ClientMetricReportDirection_1.default.DOWNSTREAM) {\n        downlinkVideoStream.set(streamMetricReport[ssrc].streamId, streamMetricReport[ssrc]);\n      }\n    }\n\n    let fireCallback = false;\n\n    for (const bitrate of this.currentAvailableStreamAvgBitrates.bitrates) {\n      if (downlinkVideoStream.has(bitrate.sourceStreamId)) {\n        const report = downlinkVideoStream.get(bitrate.sourceStreamId);\n        const attendeeId = this.context.videoStreamIndex.attendeeIdForStreamId(bitrate.sourceStreamId);\n\n        if (!attendeeId) {\n          continue;\n        }\n\n        const newReport = new ClientVideoStreamReceivingReport_1.default();\n        const prevBytesReceived = report.previousMetrics['bytesReceived'];\n        const currBytesReceived = report.currentMetrics['bytesReceived'];\n\n        if (!prevBytesReceived || !currBytesReceived) {\n          continue;\n        }\n\n        const receivedBitrate = (currBytesReceived - prevBytesReceived) * 8 / 1000;\n        newReport.expectedAverageBitrateKbps = bitrate.avgBitrateBps / 1000;\n        newReport.receivedAverageBitrateKbps = receivedBitrate;\n        newReport.attendeeId = attendeeId;\n\n        if (receivedBitrate < bitrate.avgBitrateBps / 1000 * MonitorTask.DEFAULT_DOWNLINK_CALLRATE_UNDERSHOOT_FACTOR) {\n          fireCallback = true;\n        }\n\n        videoReceivingBitrateMap.set(attendeeId, newReport);\n      }\n    }\n\n    if (fireCallback) {\n      this.logger.debug(() => {\n        return `Downlink video streams are not receiving enough data`;\n      });\n      this.context.audioVideoController.forEachObserver(observer => {\n        Maybe_1.default.of(observer.videoNotReceivingEnoughData).map(f => f.bind(observer)(Array.from(videoReceivingBitrateMap.values())));\n      });\n    }\n  }\n\n  connectionHealthDidChange(connectionHealthData) {\n    var _a;\n\n    if (connectionHealthData.consecutiveMissedPongs === 0) {\n      if (this.context.reconnectController) {\n        this.context.reconnectController.setLastActiveTimestampMs(Date.now());\n      }\n    }\n\n    this.reconnectionHealthPolicy.update(connectionHealthData);\n    const reconnectionValue = this.reconnectionHealthPolicy.healthIfChanged();\n\n    if (reconnectionValue !== null) {\n      this.logger.info(`reconnection health is now: ${reconnectionValue}`);\n\n      if (reconnectionValue === 0) {\n        this.context.audioVideoController.handleMeetingSessionStatus(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.ConnectionHealthReconnect), null);\n      }\n    }\n\n    this.unusableAudioWarningHealthPolicy.update(connectionHealthData);\n    const unusableAudioWarningValue = this.unusableAudioWarningHealthPolicy.healthIfChanged();\n\n    if (unusableAudioWarningValue !== null) {\n      this.logger.info(`unusable audio warning is now: ${unusableAudioWarningValue}`);\n\n      if (unusableAudioWarningValue === 0) {\n        this.context.poorConnectionCount += 1;\n        (_a = this.context.eventController) === null || _a === void 0 ? void 0 : _a.pushMeetingState('receivingAudioDropped');\n\n        if (this.context.videoTileController.haveVideoTilesWithStreams()) {\n          this.context.audioVideoController.forEachObserver(observer => {\n            Maybe_1.default.of(observer.connectionDidSuggestStopVideo).map(f => f.bind(observer)());\n          });\n        } else {\n          this.context.audioVideoController.forEachObserver(observer => {\n            Maybe_1.default.of(observer.connectionDidBecomePoor).map(f => f.bind(observer)());\n          });\n        }\n      } else {\n        this.context.audioVideoController.forEachObserver(observer => {\n          Maybe_1.default.of(observer.connectionDidBecomeGood).map(f => f.bind(observer)());\n        });\n      }\n    }\n  }\n\n  handleBitrateFrame(bitrates) {\n    const videoSubscription = this.context.videoSubscriptions || [];\n    let requiredBandwidthKbps = 0;\n    this.currentAvailableStreamAvgBitrates = bitrates;\n    this.logger.debug(() => {\n      return `simulcast: bitrates from server ${JSON.stringify(bitrates)}`;\n    });\n\n    for (const bitrate of bitrates.bitrates) {\n      if (videoSubscription.indexOf(bitrate.sourceStreamId) !== -1) {\n        requiredBandwidthKbps += bitrate.avgBitrateBps;\n      }\n    }\n\n    requiredBandwidthKbps /= 1000;\n\n    if (this.currentVideoDownlinkBandwidthEstimationKbps * MonitorTask.DEFAULT_DOWNLINK_CALLRATE_OVERSHOOT_FACTOR < requiredBandwidthKbps) {\n      this.logger.info(`Downlink bandwidth pressure is high: estimated bandwidth ${this.currentVideoDownlinkBandwidthEstimationKbps}Kbps, required bandwidth ${requiredBandwidthKbps}Kbps`);\n      this.context.audioVideoController.forEachObserver(observer => {\n        Maybe_1.default.of(observer.estimatedDownlinkBandwidthLessThanRequired).map(f => f.bind(observer)(this.currentVideoDownlinkBandwidthEstimationKbps, requiredBandwidthKbps));\n      });\n    }\n  }\n\n  handleSignalingClientEvent(event) {\n    var _a; // Don't add two or more consecutive \"signalingDropped\" states.\n\n\n    if (event.type === SignalingClientEventType_1.default.WebSocketClosed && (event.closeCode === 4410 || event.closeCode >= 4500 && event.closeCode < 4600) || event.type === SignalingClientEventType_1.default.WebSocketError || event.type === SignalingClientEventType_1.default.WebSocketFailed) {\n      if (!this.hasSignalingError) {\n        (_a = this.context.eventController) === null || _a === void 0 ? void 0 : _a.pushMeetingState('signalingDropped');\n        this.hasSignalingError = true;\n      }\n    } else if (event.type === SignalingClientEventType_1.default.WebSocketOpen) {\n      this.hasSignalingError = false;\n    }\n\n    if (event.type === SignalingClientEventType_1.default.ReceivedSignalFrame) {\n      if (!!event.message.bitrates) {\n        const bitrateFrame = event.message.bitrates;\n        this.context.videoStreamIndex.integrateBitratesFrame(bitrateFrame);\n        this.context.videoDownlinkBandwidthPolicy.updateIndex(this.context.videoStreamIndex);\n        this.handleBitrateFrame(event.message.bitrates);\n      }\n\n      const status = MeetingSessionStatus_1.default.fromSignalFrame(event.message);\n\n      if (status.statusCode() !== MeetingSessionStatusCode_1.default.OK) {\n        this.context.audioVideoController.handleMeetingSessionStatus(status, null);\n      }\n    }\n  }\n\n}\n\nexports.default = MonitorTask;\nMonitorTask.DEFAULT_TIMEOUT_FOR_START_SENDING_VIDEO_MS = 30000;\nMonitorTask.DEFAULT_DOWNLINK_CALLRATE_OVERSHOOT_FACTOR = 1.5;\nMonitorTask.DEFAULT_DOWNLINK_CALLRATE_UNDERSHOOT_FACTOR = 0.5;","map":{"version":3,"sources":["../../src/task/MonitorTask.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ClientMetricReportDirection_1 = require(\"../clientmetricreport/ClientMetricReportDirection\");\nconst ClientMetricReportMediaType_1 = require(\"../clientmetricreport/ClientMetricReportMediaType\");\nconst ClientVideoStreamReceivingReport_1 = require(\"../clientmetricreport/ClientVideoStreamReceivingReport\");\nconst ReconnectionHealthPolicy_1 = require(\"../connectionhealthpolicy/ReconnectionHealthPolicy\");\nconst UnusableAudioWarningConnectionHealthPolicy_1 = require(\"../connectionhealthpolicy/UnusableAudioWarningConnectionHealthPolicy\");\nconst Maybe_1 = require(\"../maybe/Maybe\");\nconst MeetingSessionStatus_1 = require(\"../meetingsession/MeetingSessionStatus\");\nconst MeetingSessionStatusCode_1 = require(\"../meetingsession/MeetingSessionStatusCode\");\nconst SignalingClientEventType_1 = require(\"../signalingclient/SignalingClientEventType\");\nconst AudioLogEvent_1 = require(\"../statscollector/AudioLogEvent\");\nconst VideoLogEvent_1 = require(\"../statscollector/VideoLogEvent\");\nconst BaseTask_1 = require(\"./BaseTask\");\n/*\n * [[MonitorTask]] monitors connections using SignalingAndMetricsConnectionMonitor.\n */\nclass MonitorTask extends BaseTask_1.default {\n    constructor(context, connectionHealthPolicyConfiguration, initialConnectionHealthData) {\n        super(context.logger);\n        this.context = context;\n        this.initialConnectionHealthData = initialConnectionHealthData;\n        this.taskName = 'MonitorTask';\n        this.prevSignalStrength = 1;\n        this.currentVideoDownlinkBandwidthEstimationKbps = 10000;\n        this.currentAvailableStreamAvgBitrates = null;\n        this.hasSignalingError = false;\n        this.presenceHandlerCalled = false;\n        this.checkAndSendWeakSignalEvent = (signalStrength) => {\n            const isCurrentSignalBad = signalStrength < 1;\n            const isPrevSignalBad = this.prevSignalStrength < 1;\n            const signalStrengthEventType = isCurrentSignalBad\n                ? !isPrevSignalBad\n                    ? AudioLogEvent_1.default.RedmicStartLoss\n                    : null\n                : isPrevSignalBad\n                    ? AudioLogEvent_1.default.RedmicEndLoss\n                    : null;\n            if (signalStrengthEventType) {\n                this.context.statsCollector.logAudioEvent(signalStrengthEventType);\n            }\n            this.prevSignalStrength = signalStrength;\n        };\n        this.realtimeFatalErrorCallback = (error) => {\n            this.logger.error(`realtime error: ${error}: ${error.stack}`);\n            this.context.audioVideoController.handleMeetingSessionStatus(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.RealtimeApiFailed), error);\n        };\n        this.realtimeAttendeeIdPresenceHandler = (presentAttendeeId, present) => {\n            const attendeeId = this.context.meetingSessionConfiguration.credentials.attendeeId;\n            if (attendeeId === presentAttendeeId && present && !this.presenceHandlerCalled) {\n                this.presenceHandlerCalled = true;\n                this.context.attendeePresenceDurationMs = Date.now() - this.context.startAudioVideoTimestamp;\n                /* istanbul ignore else */\n                if (this.context.eventController) {\n                    this.context.eventController.publishEvent('attendeePresenceReceived', {\n                        attendeePresenceDurationMs: this.context.attendeePresenceDurationMs,\n                    });\n                }\n            }\n        };\n        this.reconnectionHealthPolicy = new ReconnectionHealthPolicy_1.default(context.logger, Object.assign({}, connectionHealthPolicyConfiguration), this.initialConnectionHealthData.clone());\n        this.unusableAudioWarningHealthPolicy = new UnusableAudioWarningConnectionHealthPolicy_1.default(Object.assign({}, connectionHealthPolicyConfiguration), this.initialConnectionHealthData.clone());\n    }\n    removeObserver() {\n        this.context.audioVideoController.removeObserver(this);\n        this.context.realtimeController.realtimeUnsubscribeToFatalError(this.realtimeFatalErrorCallback);\n        this.context.realtimeController.realtimeUnsubscribeToLocalSignalStrengthChange(this.checkAndSendWeakSignalEvent);\n        this.context.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(this.realtimeAttendeeIdPresenceHandler);\n        this.context.signalingClient.removeObserver(this);\n    }\n    run() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.context.removableObservers.push(this);\n            this.context.audioVideoController.addObserver(this);\n            this.context.realtimeController.realtimeSubscribeToFatalError(this.realtimeFatalErrorCallback);\n            this.context.realtimeController.realtimeSubscribeToLocalSignalStrengthChange(this.checkAndSendWeakSignalEvent);\n            this.context.realtimeController.realtimeSubscribeToAttendeeIdPresence(this.realtimeAttendeeIdPresenceHandler);\n            this.context.connectionMonitor.start();\n            this.context.statsCollector.start(this.context.signalingClient, this.context.videoStreamIndex);\n            this.context.signalingClient.registerObserver(this);\n        });\n    }\n    videoTileDidUpdate(_tileState) {\n        this.context.maxVideoTileCount = Math.max(this.context.maxVideoTileCount, this.context.videoTileController.getAllVideoTiles().length);\n    }\n    videoSendHealthDidChange(bitrateKbps, packetsPerSecond) {\n        if (this.context.videoInputAttachedTimestampMs === 0 ||\n            !this.context.videoTileController.hasStartedLocalVideoTile() ||\n            !this.context.lastKnownVideoAvailability.canStartLocalVideo) {\n            return;\n        }\n        const tracks = this.context.activeVideoInput !== null ? this.context.activeVideoInput.getTracks() : null;\n        if (!tracks || !tracks[0]) {\n            return;\n        }\n        const durationMs = Date.now() - this.context.videoInputAttachedTimestampMs;\n        if (packetsPerSecond > 0 || bitrateKbps > 0) {\n            this.context.statsCollector.logVideoEvent(VideoLogEvent_1.default.SendingSuccess, this.context.videoDeviceInformation);\n            this.context.statsCollector.logLatency('video_start_sending', durationMs, this.context.videoDeviceInformation);\n            this.context.videoInputAttachedTimestampMs = 0;\n        }\n        else if (durationMs > MonitorTask.DEFAULT_TIMEOUT_FOR_START_SENDING_VIDEO_MS) {\n            this.context.statsCollector.logVideoEvent(VideoLogEvent_1.default.SendingFailed, this.context.videoDeviceInformation);\n            this.context.videoInputAttachedTimestampMs = 0;\n        }\n    }\n    videoReceiveBandwidthDidChange(newBandwidthKbps, oldBandwidthKbps) {\n        this.logger.debug(() => {\n            return `receiving bandwidth changed from prev=${oldBandwidthKbps} Kbps to curr=${newBandwidthKbps} Kbps`;\n        });\n        this.currentVideoDownlinkBandwidthEstimationKbps = newBandwidthKbps;\n    }\n    checkResubscribe(clientMetricReport) {\n        const metricReport = clientMetricReport.getObservableMetrics();\n        if (!metricReport) {\n            return false;\n        }\n        const availableSendBandwidth = metricReport.availableSendBandwidth || metricReport.availableOutgoingBitrate;\n        const nackCountPerSecond = metricReport.nackCountReceivedPerSecond || metricReport.googNackCountReceivedPerSecond;\n        let needResubscribe = false;\n        this.context.videoDownlinkBandwidthPolicy.updateMetrics(clientMetricReport);\n        const resubscribeForDownlink = this.context.videoDownlinkBandwidthPolicy.wantsResubscribe();\n        needResubscribe = needResubscribe || resubscribeForDownlink;\n        if (resubscribeForDownlink) {\n            this.context.videosToReceive = this.context.videoDownlinkBandwidthPolicy.chooseSubscriptions();\n            this.logger.info(`trigger resubscribe for down=${resubscribeForDownlink}; videosToReceive=[${this.context.videosToReceive.array()}]`);\n        }\n        if (this.context.videoTileController.hasStartedLocalVideoTile()) {\n            this.context.videoUplinkBandwidthPolicy.updateConnectionMetric({\n                uplinkKbps: availableSendBandwidth / 1000,\n                nackCountPerSecond: nackCountPerSecond,\n            });\n            const resubscribeForUplink = this.context.videoUplinkBandwidthPolicy.wantsResubscribe();\n            needResubscribe = needResubscribe || resubscribeForUplink;\n            if (resubscribeForUplink) {\n                this.logger.info(`trigger resubscribe for up=${resubscribeForUplink}; videosToReceive=[${this.context.videosToReceive.array()}]`);\n                this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();\n                this.context.videoUplinkBandwidthPolicy.chooseMediaTrackConstraints();\n            }\n        }\n        return needResubscribe;\n    }\n    metricsDidReceive(clientMetricReport) {\n        const defaultClientMetricReport = clientMetricReport;\n        if (!defaultClientMetricReport) {\n            return;\n        }\n        if (this.checkResubscribe(clientMetricReport)) {\n            this.context.audioVideoController.update();\n        }\n        if (!this.currentAvailableStreamAvgBitrates) {\n            return;\n        }\n        const streamMetricReport = defaultClientMetricReport.streamMetricReports;\n        if (!streamMetricReport) {\n            return;\n        }\n        const downlinkVideoStream = new Map();\n        const videoReceivingBitrateMap = new Map();\n        // TODO: move those logic to stats collector.\n        for (const ssrc in streamMetricReport) {\n            if (streamMetricReport[ssrc].mediaType === ClientMetricReportMediaType_1.default.VIDEO &&\n                streamMetricReport[ssrc].direction === ClientMetricReportDirection_1.default.DOWNSTREAM) {\n                downlinkVideoStream.set(streamMetricReport[ssrc].streamId, streamMetricReport[ssrc]);\n            }\n        }\n        let fireCallback = false;\n        for (const bitrate of this.currentAvailableStreamAvgBitrates.bitrates) {\n            if (downlinkVideoStream.has(bitrate.sourceStreamId)) {\n                const report = downlinkVideoStream.get(bitrate.sourceStreamId);\n                const attendeeId = this.context.videoStreamIndex.attendeeIdForStreamId(bitrate.sourceStreamId);\n                if (!attendeeId) {\n                    continue;\n                }\n                const newReport = new ClientVideoStreamReceivingReport_1.default();\n                const prevBytesReceived = report.previousMetrics['bytesReceived'];\n                const currBytesReceived = report.currentMetrics['bytesReceived'];\n                if (!prevBytesReceived || !currBytesReceived) {\n                    continue;\n                }\n                const receivedBitrate = ((currBytesReceived - prevBytesReceived) * 8) / 1000;\n                newReport.expectedAverageBitrateKbps = bitrate.avgBitrateBps / 1000;\n                newReport.receivedAverageBitrateKbps = receivedBitrate;\n                newReport.attendeeId = attendeeId;\n                if (receivedBitrate <\n                    (bitrate.avgBitrateBps / 1000) * MonitorTask.DEFAULT_DOWNLINK_CALLRATE_UNDERSHOOT_FACTOR) {\n                    fireCallback = true;\n                }\n                videoReceivingBitrateMap.set(attendeeId, newReport);\n            }\n        }\n        if (fireCallback) {\n            this.logger.debug(() => {\n                return `Downlink video streams are not receiving enough data`;\n            });\n            this.context.audioVideoController.forEachObserver((observer) => {\n                Maybe_1.default.of(observer.videoNotReceivingEnoughData).map(f => f.bind(observer)(Array.from(videoReceivingBitrateMap.values())));\n            });\n        }\n    }\n    connectionHealthDidChange(connectionHealthData) {\n        var _a;\n        if (connectionHealthData.consecutiveMissedPongs === 0) {\n            if (this.context.reconnectController) {\n                this.context.reconnectController.setLastActiveTimestampMs(Date.now());\n            }\n        }\n        this.reconnectionHealthPolicy.update(connectionHealthData);\n        const reconnectionValue = this.reconnectionHealthPolicy.healthIfChanged();\n        if (reconnectionValue !== null) {\n            this.logger.info(`reconnection health is now: ${reconnectionValue}`);\n            if (reconnectionValue === 0) {\n                this.context.audioVideoController.handleMeetingSessionStatus(new MeetingSessionStatus_1.default(MeetingSessionStatusCode_1.default.ConnectionHealthReconnect), null);\n            }\n        }\n        this.unusableAudioWarningHealthPolicy.update(connectionHealthData);\n        const unusableAudioWarningValue = this.unusableAudioWarningHealthPolicy.healthIfChanged();\n        if (unusableAudioWarningValue !== null) {\n            this.logger.info(`unusable audio warning is now: ${unusableAudioWarningValue}`);\n            if (unusableAudioWarningValue === 0) {\n                this.context.poorConnectionCount += 1;\n                (_a = this.context.eventController) === null || _a === void 0 ? void 0 : _a.pushMeetingState('receivingAudioDropped');\n                if (this.context.videoTileController.haveVideoTilesWithStreams()) {\n                    this.context.audioVideoController.forEachObserver((observer) => {\n                        Maybe_1.default.of(observer.connectionDidSuggestStopVideo).map(f => f.bind(observer)());\n                    });\n                }\n                else {\n                    this.context.audioVideoController.forEachObserver((observer) => {\n                        Maybe_1.default.of(observer.connectionDidBecomePoor).map(f => f.bind(observer)());\n                    });\n                }\n            }\n            else {\n                this.context.audioVideoController.forEachObserver((observer) => {\n                    Maybe_1.default.of(observer.connectionDidBecomeGood).map(f => f.bind(observer)());\n                });\n            }\n        }\n    }\n    handleBitrateFrame(bitrates) {\n        const videoSubscription = this.context.videoSubscriptions || [];\n        let requiredBandwidthKbps = 0;\n        this.currentAvailableStreamAvgBitrates = bitrates;\n        this.logger.debug(() => {\n            return `simulcast: bitrates from server ${JSON.stringify(bitrates)}`;\n        });\n        for (const bitrate of bitrates.bitrates) {\n            if (videoSubscription.indexOf(bitrate.sourceStreamId) !== -1) {\n                requiredBandwidthKbps += bitrate.avgBitrateBps;\n            }\n        }\n        requiredBandwidthKbps /= 1000;\n        if (this.currentVideoDownlinkBandwidthEstimationKbps *\n            MonitorTask.DEFAULT_DOWNLINK_CALLRATE_OVERSHOOT_FACTOR <\n            requiredBandwidthKbps) {\n            this.logger.info(`Downlink bandwidth pressure is high: estimated bandwidth ${this.currentVideoDownlinkBandwidthEstimationKbps}Kbps, required bandwidth ${requiredBandwidthKbps}Kbps`);\n            this.context.audioVideoController.forEachObserver((observer) => {\n                Maybe_1.default.of(observer.estimatedDownlinkBandwidthLessThanRequired).map(f => f.bind(observer)(this.currentVideoDownlinkBandwidthEstimationKbps, requiredBandwidthKbps));\n            });\n        }\n    }\n    handleSignalingClientEvent(event) {\n        var _a;\n        // Don't add two or more consecutive \"signalingDropped\" states.\n        if ((event.type === SignalingClientEventType_1.default.WebSocketClosed &&\n            (event.closeCode === 4410 || (event.closeCode >= 4500 && event.closeCode < 4600))) ||\n            event.type === SignalingClientEventType_1.default.WebSocketError ||\n            event.type === SignalingClientEventType_1.default.WebSocketFailed) {\n            if (!this.hasSignalingError) {\n                (_a = this.context.eventController) === null || _a === void 0 ? void 0 : _a.pushMeetingState('signalingDropped');\n                this.hasSignalingError = true;\n            }\n        }\n        else if (event.type === SignalingClientEventType_1.default.WebSocketOpen) {\n            this.hasSignalingError = false;\n        }\n        if (event.type === SignalingClientEventType_1.default.ReceivedSignalFrame) {\n            if (!!event.message.bitrates) {\n                const bitrateFrame = event.message.bitrates;\n                this.context.videoStreamIndex.integrateBitratesFrame(bitrateFrame);\n                this.context.videoDownlinkBandwidthPolicy.updateIndex(this.context.videoStreamIndex);\n                this.handleBitrateFrame(event.message.bitrates);\n            }\n            const status = MeetingSessionStatus_1.default.fromSignalFrame(event.message);\n            if (status.statusCode() !== MeetingSessionStatusCode_1.default.OK) {\n                this.context.audioVideoController.handleMeetingSessionStatus(status, null);\n            }\n        }\n    }\n}\nexports.default = MonitorTask;\nMonitorTask.DEFAULT_TIMEOUT_FOR_START_SENDING_VIDEO_MS = 30000;\nMonitorTask.DEFAULT_DOWNLINK_CALLRATE_OVERSHOOT_FACTOR = 1.5;\nMonitorTask.DEFAULT_DOWNLINK_CALLRATE_UNDERSHOOT_FACTOR = 0.5;\n//# sourceMappingURL=MonitorTask.js.map"]},"metadata":{},"sourceType":"script"}