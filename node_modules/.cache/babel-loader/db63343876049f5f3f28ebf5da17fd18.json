{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BaseConnectionHealthPolicy_1 = require(\"./BaseConnectionHealthPolicy\");\n\nclass ReconnectionHealthPolicy extends BaseConnectionHealthPolicy_1.default {\n  constructor(logger, configuration, data) {\n    super(configuration, data);\n    this.logger = logger;\n    this.audioDelayPointsOverMaximum = 0;\n    ReconnectionHealthPolicy.CONNECTION_UNHEALTHY_THRESHOLD = configuration.connectionUnhealthyThreshold;\n    ReconnectionHealthPolicy.CONNECTION_WAIT_TIME_MS = configuration.connectionWaitTimeMs;\n    ReconnectionHealthPolicy.MISSED_PONGS_THRESHOLD = configuration.missedPongsUpperThreshold;\n    ReconnectionHealthPolicy.MAXIMUM_AUDIO_DELAY_MS = configuration.maximumAudioDelayMs;\n    ReconnectionHealthPolicy.MAXIMUM_AUDIO_DELAY_DATA_POINTS = configuration.maximumAudioDelayDataPoints;\n  }\n\n  health() {\n    const connectionStartedRecently = this.currentData.isConnectionStartRecent(ReconnectionHealthPolicy.CONNECTION_WAIT_TIME_MS);\n\n    if (connectionStartedRecently) {\n      return 1;\n    }\n\n    const noPacketsReceivedRecently = this.currentData.consecutiveStatsWithNoPackets >= ReconnectionHealthPolicy.CONNECTION_UNHEALTHY_THRESHOLD;\n    const missedPongsRecently = this.currentData.consecutiveMissedPongs >= ReconnectionHealthPolicy.MISSED_PONGS_THRESHOLD;\n\n    if (this.currentData.audioSpeakerDelayMs > ReconnectionHealthPolicy.MAXIMUM_AUDIO_DELAY_MS) {\n      this.audioDelayPointsOverMaximum += 1;\n    } else {\n      this.audioDelayPointsOverMaximum = 0;\n    }\n\n    const hasBadAudioDelay = this.audioDelayPointsOverMaximum > ReconnectionHealthPolicy.MAXIMUM_AUDIO_DELAY_DATA_POINTS;\n\n    if (hasBadAudioDelay) {\n      this.audioDelayPointsOverMaximum = 0;\n    }\n\n    const needsReconnect = noPacketsReceivedRecently || missedPongsRecently || hasBadAudioDelay;\n\n    if (needsReconnect) {\n      this.logger.warn(`reconnection recommended due to: no packets received: ${noPacketsReceivedRecently}, missed pongs: ${missedPongsRecently}, bad audio delay: ${hasBadAudioDelay}`);\n      return 0;\n    }\n\n    return 1;\n  }\n\n}\n\nexports.default = ReconnectionHealthPolicy;","map":{"version":3,"sources":["../../src/connectionhealthpolicy/ReconnectionHealthPolicy.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAGA,MAAA,4BAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AAKA,MAAqB,wBAArB,SACU,4BAAA,CAAA,OADV,CACoC;AAUlC,EAAA,WAAA,CACU,MADV,EAEE,aAFF,EAGE,IAHF,EAG4B;AAE1B,UAAM,aAAN,EAAqB,IAArB;AAJQ,SAAA,MAAA,GAAA,MAAA;AAHF,SAAA,2BAAA,GAA8B,CAA9B;AAQN,IAAA,wBAAwB,CAAC,8BAAzB,GACE,aAAa,CAAC,4BADhB;AAEA,IAAA,wBAAwB,CAAC,uBAAzB,GAAmD,aAAa,CAAC,oBAAjE;AACA,IAAA,wBAAwB,CAAC,sBAAzB,GAAkD,aAAa,CAAC,yBAAhE;AACA,IAAA,wBAAwB,CAAC,sBAAzB,GAAkD,aAAa,CAAC,mBAAhE;AACA,IAAA,wBAAwB,CAAC,+BAAzB,GACE,aAAa,CAAC,2BADhB;AAED;;AAED,EAAA,MAAM,GAAA;AACJ,UAAM,yBAAyB,GAAG,KAAK,WAAL,CAAiB,uBAAjB,CAChC,wBAAwB,CAAC,uBADO,CAAlC;;AAGA,QAAI,yBAAJ,EAA+B;AAC7B,aAAO,CAAP;AACD;;AACD,UAAM,yBAAyB,GAC7B,KAAK,WAAL,CAAiB,6BAAjB,IACA,wBAAwB,CAAC,8BAF3B;AAGA,UAAM,mBAAmB,GACvB,KAAK,WAAL,CAAiB,sBAAjB,IAA2C,wBAAwB,CAAC,sBADtE;;AAEA,QAAI,KAAK,WAAL,CAAiB,mBAAjB,GAAuC,wBAAwB,CAAC,sBAApE,EAA4F;AAC1F,WAAK,2BAAL,IAAoC,CAApC;AACD,KAFD,MAEO;AACL,WAAK,2BAAL,GAAmC,CAAnC;AACD;;AACD,UAAM,gBAAgB,GACpB,KAAK,2BAAL,GAAmC,wBAAwB,CAAC,+BAD9D;;AAEA,QAAI,gBAAJ,EAAsB;AACpB,WAAK,2BAAL,GAAmC,CAAnC;AACD;;AACD,UAAM,cAAc,GAAG,yBAAyB,IAAI,mBAA7B,IAAoD,gBAA3E;;AACA,QAAI,cAAJ,EAAoB;AAClB,WAAK,MAAL,CAAY,IAAZ,CACE,yDAAyD,yBAAyB,mBAAmB,mBAAmB,sBAAsB,gBAAgB,EADhK;AAGA,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD;;AAvDiC;;AADpC,OAAA,CAAA,OAAA,GAAA,wBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BaseConnectionHealthPolicy_1 = require(\"./BaseConnectionHealthPolicy\");\nclass ReconnectionHealthPolicy extends BaseConnectionHealthPolicy_1.default {\n    constructor(logger, configuration, data) {\n        super(configuration, data);\n        this.logger = logger;\n        this.audioDelayPointsOverMaximum = 0;\n        ReconnectionHealthPolicy.CONNECTION_UNHEALTHY_THRESHOLD =\n            configuration.connectionUnhealthyThreshold;\n        ReconnectionHealthPolicy.CONNECTION_WAIT_TIME_MS = configuration.connectionWaitTimeMs;\n        ReconnectionHealthPolicy.MISSED_PONGS_THRESHOLD = configuration.missedPongsUpperThreshold;\n        ReconnectionHealthPolicy.MAXIMUM_AUDIO_DELAY_MS = configuration.maximumAudioDelayMs;\n        ReconnectionHealthPolicy.MAXIMUM_AUDIO_DELAY_DATA_POINTS =\n            configuration.maximumAudioDelayDataPoints;\n    }\n    health() {\n        const connectionStartedRecently = this.currentData.isConnectionStartRecent(ReconnectionHealthPolicy.CONNECTION_WAIT_TIME_MS);\n        if (connectionStartedRecently) {\n            return 1;\n        }\n        const noPacketsReceivedRecently = this.currentData.consecutiveStatsWithNoPackets >=\n            ReconnectionHealthPolicy.CONNECTION_UNHEALTHY_THRESHOLD;\n        const missedPongsRecently = this.currentData.consecutiveMissedPongs >= ReconnectionHealthPolicy.MISSED_PONGS_THRESHOLD;\n        if (this.currentData.audioSpeakerDelayMs > ReconnectionHealthPolicy.MAXIMUM_AUDIO_DELAY_MS) {\n            this.audioDelayPointsOverMaximum += 1;\n        }\n        else {\n            this.audioDelayPointsOverMaximum = 0;\n        }\n        const hasBadAudioDelay = this.audioDelayPointsOverMaximum > ReconnectionHealthPolicy.MAXIMUM_AUDIO_DELAY_DATA_POINTS;\n        if (hasBadAudioDelay) {\n            this.audioDelayPointsOverMaximum = 0;\n        }\n        const needsReconnect = noPacketsReceivedRecently || missedPongsRecently || hasBadAudioDelay;\n        if (needsReconnect) {\n            this.logger.warn(`reconnection recommended due to: no packets received: ${noPacketsReceivedRecently}, missed pongs: ${missedPongsRecently}, bad audio delay: ${hasBadAudioDelay}`);\n            return 0;\n        }\n        return 1;\n    }\n}\nexports.default = ReconnectionHealthPolicy;\n//# sourceMappingURL=ReconnectionHealthPolicy.js.map"]},"metadata":{},"sourceType":"script"}