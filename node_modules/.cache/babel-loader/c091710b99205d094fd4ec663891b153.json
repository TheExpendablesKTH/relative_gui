{"ast":null,"code":"import axios from 'axios';\nimport { ConsoleLogger, DefaultDeviceController, DefaultMeetingSession, LogLevel, MeetingSessionConfiguration } from 'amazon-chime-sdk-js';\nexport default class CallWrapper {\n  constructor(endpoint, code) {\n    this.endpoint = endpoint; // private\n\n    this.session = null; //From AWS SDK, intern prop för sdk'n\n  }\n  /**\n   * Check if there is an active call\n   *\n   * @return  {Boolean}\n   */\n\n\n  hasActiveCall() {\n    return this.session !== null;\n  }\n  /**\n   * Connect to a chime meeting\n   *\n   *\n   */\n\n\n  async connectToChimeMeeting(relativeCode) {\n    if (this.hasActiveCall()) {\n      throw new Error('meeting session already in progress');\n    }\n\n    let meetingConfig;\n\n    try {\n      const response = await axios(this.endpoint + '/call/relative/' + relativeCode, {\n        //\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      meetingConfig = new MeetingSessionConfiguration({\n        'Meeting': {\n          'MeetingId': response.data.meetingId,\n          'MediaPlacement': {\n            'AudioHostUrl': response.data.audioHostUrl,\n            'AudioFallbackUrl': response.data.audioFallbackUrl,\n            'ScreenDataUrl': response.data.screenDataUrl,\n            'ScreenSharingUrl': response.data.screenSharingUrl,\n            'ScreenViewingUrl': response.data.screenViewingUrl,\n            'SignalingUrl': response.data.signalingUrl,\n            'TurnControlUrl': response.data.turnControlUrl\n          }\n        }\n      }, {\n        'Attendee': {\n          'ExternalUserId': response.data.externalUserId,\n          'AttendeeId': response.data.attendeeId,\n          'JoinToken': response.data.joinToken\n        }\n      });\n    } catch (e) {\n      console.error('failed to connect to api');\n      console.error(e);\n      return;\n    }\n\n    const logger = new ConsoleLogger('Chime Logs', LogLevel.WARN);\n    const deviceController = new DefaultDeviceController(logger);\n    this.session = new DefaultMeetingSession(meetingConfig, logger, deviceController);\n    console.log('successfully connected to chime meeting');\n  }\n  /**\n   * Set the audio input device to the default microphone\n   */\n\n\n  async setAudioInputDeviceToDefault() {\n    if (!this.hasActiveCall()) {\n      throw new Error('no active meeting session');\n    } // Sets it to the default device\n\n\n    const availableAudioInputDevices = await this.session.audioVideo.listAudioInputDevices();\n    const deviceId = availableAudioInputDevices[0].deviceId;\n    await this.session.audioVideo.chooseAudioInputDevice(deviceId);\n  }\n  /**\n   * Get a stream from the users webcam\n   *\n   * @return  {MediaStream}\n   */\n\n\n  async getVideoMediaStream() {\n    if (!this.hasActiveCall()) {\n      throw new Error('no active meeting session');\n    }\n\n    const stream = await window.navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: true\n    });\n    return stream;\n  }\n  /**\n   * Start streaming a media stream\n   *\n   * @param   {MediaStream}  videoStream\n   */\n\n\n  async broadcastVideo(videoStream) {\n    if (!this.hasActiveCall()) {\n      throw new Error('no active meeting session');\n    }\n\n    await this.session.audioVideo.startContentShare(videoStream);\n  }\n  /**\n   * Start watching other streams\n   */\n\n\n  async startWatching() {\n    if (!this.hasActiveCall()) {\n      throw new Error('no active meeting session');\n    }\n\n    const observer = {\n      /**\n       * A video tile was updated\n       *\n       * @param   {VideoTile}  tile\n       */\n      videoTileDidUpdate: async tile => {\n        console.log('Received a tile with id:', tile.tileId); // Should probably not do native DOM manipulation here\n\n        let videoEl = document.getElementById(`tile-video-${tile.tileId}`);\n\n        if (!videoEl) {\n          videoEl = document.createElement('video');\n          videoEl.setAttribute('id', `tile-video-${tile.tileId}`);\n          const parent = document.getElementById('tiles');\n          parent.appendChild(videoEl);\n        }\n\n        this.session.audioVideo.bindVideoElement(tile.tileId, videoEl);\n      },\n      audioVideoDidStart: () => {\n        console.log('audioVideoDidStart');\n      },\n      audioVideoDidStop: sessionStatus => {\n        console.log('audioVideoDidStop: ', sessionStatus.statusCode());\n      }\n    };\n    this.session.audioVideo.addObserver(observer);\n    const audioElement = document.getElementById('audio-out');\n    this.session.audioVideo.bindAudioElement(audioElement);\n    await this.session.audioVideo.start();\n  }\n\n}","map":{"version":3,"sources":["/Users/torarvill/Documents/Pip/relative_gui/relative_ui/src/caller.js"],"names":["axios","ConsoleLogger","DefaultDeviceController","DefaultMeetingSession","LogLevel","MeetingSessionConfiguration","CallWrapper","constructor","endpoint","code","session","hasActiveCall","connectToChimeMeeting","relativeCode","Error","meetingConfig","response","headers","data","meetingId","audioHostUrl","audioFallbackUrl","screenDataUrl","screenSharingUrl","screenViewingUrl","signalingUrl","turnControlUrl","externalUserId","attendeeId","joinToken","e","console","error","logger","WARN","deviceController","log","setAudioInputDeviceToDefault","availableAudioInputDevices","audioVideo","listAudioInputDevices","deviceId","chooseAudioInputDevice","getVideoMediaStream","stream","window","navigator","mediaDevices","getUserMedia","audio","video","broadcastVideo","videoStream","startContentShare","startWatching","observer","videoTileDidUpdate","tile","tileId","videoEl","document","getElementById","createElement","setAttribute","parent","appendChild","bindVideoElement","audioVideoDidStart","audioVideoDidStop","sessionStatus","statusCode","addObserver","audioElement","bindAudioElement","start"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    ConsoleLogger,\n    DefaultDeviceController,\n    DefaultMeetingSession,\n    LogLevel,\n    MeetingSessionConfiguration\n} from 'amazon-chime-sdk-js';\n\n\nexport default class CallWrapper {\n    constructor(endpoint, code) {\n        this.endpoint = endpoint;\n       \n\n        // private\n        this.session = null;  //From AWS SDK, intern prop för sdk'n\n    }\n\n    /**\n     * Check if there is an active call\n     *\n     * @return  {Boolean}\n     */\n    hasActiveCall() {\n        return this.session !== null;\n    }\n\n    /**\n     * Connect to a chime meeting\n     *\n     *\n     */\n    async connectToChimeMeeting(relativeCode) {\n        if (this.hasActiveCall()) {\n            throw new Error('meeting session already in progress');\n        }\n\n        let meetingConfig;\n        try {\n            const response = await axios(this.endpoint+'/call/relative/'+relativeCode, { //\n                headers: {                \n                    'Content-Type':'application/json'\n                }\n            });\n            meetingConfig = new MeetingSessionConfiguration(\n                {\n                    'Meeting': {\n                        'MeetingId': response.data.meetingId,\n                        'MediaPlacement': {\n                            'AudioHostUrl': response.data.audioHostUrl,\n                            'AudioFallbackUrl': response.data.audioFallbackUrl,\n                            'ScreenDataUrl': response.data.screenDataUrl,\n                            'ScreenSharingUrl': response.data.screenSharingUrl,\n                            'ScreenViewingUrl': response.data.screenViewingUrl,\n                            'SignalingUrl': response.data.signalingUrl,\n                            'TurnControlUrl': response.data.turnControlUrl,\n                        },\n                    },\n                },\n                {\n                    'Attendee': {\n                        'ExternalUserId': response.data.externalUserId,\n                        'AttendeeId': response.data.attendeeId,\n                        'JoinToken': response.data.joinToken,\n                    },\n                }\n            );\n        } catch (e) {\n            console.error('failed to connect to api');\n            console.error(e);\n            return;\n        }\n\n        const logger = new ConsoleLogger('Chime Logs', LogLevel.WARN);\n        const deviceController = new DefaultDeviceController(logger);\n        this.session = new DefaultMeetingSession(meetingConfig, logger, deviceController);\n        console.log('successfully connected to chime meeting');\n    }\n\n    /**\n     * Set the audio input device to the default microphone\n     */\n    async setAudioInputDeviceToDefault() {\n        if (!this.hasActiveCall()) {\n            throw new Error('no active meeting session');\n        }\n\n        // Sets it to the default device\n        const availableAudioInputDevices = await this.session.audioVideo.listAudioInputDevices();\n        const deviceId = availableAudioInputDevices[0].deviceId;\n        await this.session.audioVideo.chooseAudioInputDevice(deviceId);\n    }\n\n    /**\n     * Get a stream from the users webcam\n     *\n     * @return  {MediaStream}\n     */\n    async getVideoMediaStream() {\n        if (!this.hasActiveCall()) {\n            throw new Error('no active meeting session');\n        }\n\n        const stream = await window.navigator.mediaDevices.getUserMedia({\n            audio: true,\n            video: true,\n        });\n        return stream;\n    }\n\n    /**\n     * Start streaming a media stream\n     *\n     * @param   {MediaStream}  videoStream\n     */\n    async broadcastVideo(videoStream) {\n        if (!this.hasActiveCall()) {\n            throw new Error('no active meeting session');\n        }\n        await this.session.audioVideo.startContentShare(videoStream);\n    }\n\n    /**\n     * Start watching other streams\n     */\n    async startWatching() {\n        if (!this.hasActiveCall()) {\n            throw new Error('no active meeting session');\n        }\n\n        const observer = {\n            /**\n             * A video tile was updated\n             *\n             * @param   {VideoTile}  tile\n             */\n             videoTileDidUpdate: async tile => {\n                console.log('Received a tile with id:', tile.tileId);\n\n                // Should probably not do native DOM manipulation here\n                let videoEl = document.getElementById(`tile-video-${tile.tileId}`);\n                if (!videoEl) {\n                    videoEl = document.createElement('video');\n                    videoEl.setAttribute('id', `tile-video-${tile.tileId}`);\n\n                    const parent = document.getElementById('tiles');\n                    parent.appendChild(videoEl);\n                }\n                this.session.audioVideo.bindVideoElement(tile.tileId, videoEl);\n            },\n            audioVideoDidStart: () => {\n                console.log('audioVideoDidStart');\n            },\n            audioVideoDidStop: sessionStatus => {\n                console.log('audioVideoDidStop: ', sessionStatus.statusCode());\n            },\n        };\n\n        this.session.audioVideo.addObserver(observer);\n\n        const audioElement = document.getElementById('audio-out');\n        this.session.audioVideo.bindAudioElement(audioElement);\n        await this.session.audioVideo.start();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}