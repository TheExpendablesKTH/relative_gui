{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst TimeoutScheduler_1 = require(\"../scheduler/TimeoutScheduler\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/**\n * [[TimeoutTask]] runs a subtask until it either succeeds or reaches a\n * timeout, at which point the subtask is canceled.\n */\n\n\nclass TimeoutTask extends BaseTask_1.default {\n  constructor(logger, taskToRunBeforeTimeout, timeoutMs) {\n    super(logger);\n    this.taskToRunBeforeTimeout = taskToRunBeforeTimeout;\n    this.timeoutMs = timeoutMs;\n    this.taskName = `Timeout${this.timeoutMs}ms`;\n    taskToRunBeforeTimeout.setParent(this);\n  }\n\n  cancel() {\n    this.logger.info(`canceling timeout task ${this.name()} subtask ${this.taskToRunBeforeTimeout}`);\n    this.taskToRunBeforeTimeout.cancel();\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const timer = new TimeoutScheduler_1.default(this.timeoutMs);\n      timer.start(() => {\n        this.logger.info(`timeout reached for task ${this.name()}`);\n        this.taskToRunBeforeTimeout.cancel();\n      });\n\n      try {\n        yield this.taskToRunBeforeTimeout.run();\n      } finally {\n        timer.stop();\n      }\n\n      this.logger.info(`timeout task ${this.name()} completed`);\n    });\n  }\n\n}\n\nexports.default = TimeoutTask;","map":{"version":3,"sources":["../../src/task/TimeoutTask.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAA,kBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAGA;;;AAGG;;;AACH,MAAqB,WAArB,SAAyC,UAAA,CAAA,OAAzC,CAAiD;AAG/C,EAAA,WAAA,CAAY,MAAZ,EAAoC,sBAApC,EAA0E,SAA1E,EAA2F;AACzF,UAAM,MAAN;AADkC,SAAA,sBAAA,GAAA,sBAAA;AAAsC,SAAA,SAAA,GAAA,SAAA;AAExE,SAAK,QAAL,GAAgB,UAAU,KAAK,SAAS,IAAxC;AACA,IAAA,sBAAsB,CAAC,SAAvB,CAAiC,IAAjC;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,SAAK,MAAL,CAAY,IAAZ,CACE,0BAA0B,KAAK,IAAL,EAAW,YAAY,KAAK,sBAAsB,EAD9E;AAGA,SAAK,sBAAL,CAA4B,MAA5B;AACD;;AAEK,EAAA,GAAG,GAAA;;AACP,YAAM,KAAK,GAAG,IAAI,kBAAA,CAAA,OAAJ,CAAqB,KAAK,SAA1B,CAAd;AACA,MAAA,KAAK,CAAC,KAAN,CAAY,MAAK;AACf,aAAK,MAAL,CAAY,IAAZ,CAAiB,4BAA4B,KAAK,IAAL,EAAW,EAAxD;AACA,aAAK,sBAAL,CAA4B,MAA5B;AACD,OAHD;;AAIA,UAAI;AACF,cAAM,KAAK,sBAAL,CAA4B,GAA5B,EAAN;AACD,OAFD,SAEU;AACR,QAAA,KAAK,CAAC,IAAN;AACD;;AACD,WAAK,MAAL,CAAY,IAAZ,CAAiB,gBAAgB,KAAK,IAAL,EAAW,YAA5C;AACD,K;AAAA;;AA5B8C;;AAAjD,OAAA,CAAA,OAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst TimeoutScheduler_1 = require(\"../scheduler/TimeoutScheduler\");\nconst BaseTask_1 = require(\"./BaseTask\");\n/**\n * [[TimeoutTask]] runs a subtask until it either succeeds or reaches a\n * timeout, at which point the subtask is canceled.\n */\nclass TimeoutTask extends BaseTask_1.default {\n    constructor(logger, taskToRunBeforeTimeout, timeoutMs) {\n        super(logger);\n        this.taskToRunBeforeTimeout = taskToRunBeforeTimeout;\n        this.timeoutMs = timeoutMs;\n        this.taskName = `Timeout${this.timeoutMs}ms`;\n        taskToRunBeforeTimeout.setParent(this);\n    }\n    cancel() {\n        this.logger.info(`canceling timeout task ${this.name()} subtask ${this.taskToRunBeforeTimeout}`);\n        this.taskToRunBeforeTimeout.cancel();\n    }\n    run() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const timer = new TimeoutScheduler_1.default(this.timeoutMs);\n            timer.start(() => {\n                this.logger.info(`timeout reached for task ${this.name()}`);\n                this.taskToRunBeforeTimeout.cancel();\n            });\n            try {\n                yield this.taskToRunBeforeTimeout.run();\n            }\n            finally {\n                timer.stop();\n            }\n            this.logger.info(`timeout task ${this.name()} completed`);\n        });\n    }\n}\nexports.default = TimeoutTask;\n//# sourceMappingURL=TimeoutTask.js.map"]},"metadata":{},"sourceType":"script"}