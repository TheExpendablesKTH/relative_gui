{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/**\n * [[ReceiveVideoInputTask]] acquires a video input from [[DeviceController]].\n */\n\n\nclass ReceiveVideoInputTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'ReceiveVideoInputTask';\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // TODO: move videoDuplexMode and videoCaptureAndEncodeParameters to video tile controller\n      const receiveEnabled = this.context.videoDuplexMode === SignalingProtocol_js_1.SdkStreamServiceType.RX || this.context.videoDuplexMode === SignalingProtocol_js_1.SdkStreamServiceType.DUPLEX;\n\n      if (this.context.videoTileController.hasStartedLocalVideoTile()) {\n        this.context.videoDuplexMode = receiveEnabled ? SignalingProtocol_js_1.SdkStreamServiceType.DUPLEX : SignalingProtocol_js_1.SdkStreamServiceType.TX;\n      } else {\n        this.context.videoDuplexMode = receiveEnabled ? SignalingProtocol_js_1.SdkStreamServiceType.RX : 0;\n      }\n\n      this.context.videoCaptureAndEncodeParameter = this.context.videoUplinkBandwidthPolicy.chooseCaptureAndEncodeParameters();\n\n      if (!this.context.videoTileController.hasStartedLocalVideoTile()) {\n        this.context.logger.info('has not started local video tile');\n\n        if (this.context.activeVideoInput) {\n          this.stopVideoInput();\n        }\n\n        return;\n      } // TODO: bind after ICE connection started in case of a failure to resubscribe\n      //       or perform error handling to unbind video stream.\n\n\n      const localTile = this.context.videoTileController.getLocalVideoTile();\n      let videoInput = null;\n\n      try {\n        videoInput = yield this.context.mediaStreamBroker.acquireVideoInputStream();\n      } catch (error) {\n        this.context.logger.warn('could not acquire video input from current device');\n      }\n\n      if (this.context.enableSimulcast) {\n        const encodingParams = this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();\n        this.context.videoStreamIndex.integrateUplinkPolicyDecision(Array.from(encodingParams.values()));\n      }\n\n      this.context.activeVideoInput = videoInput;\n\n      if (videoInput) {\n        const videoTracks = videoInput.getVideoTracks();\n        const attendeeId = this.context.meetingSessionConfiguration.credentials.attendeeId;\n        const trackSettings = videoTracks[0].getSettings();\n\n        if (this.context.enableSimulcast) {\n          const constraint = this.context.videoUplinkBandwidthPolicy.chooseMediaTrackConstraints();\n          this.context.logger.info(`simulcast: choose constraint ${JSON.stringify(constraint)}`);\n\n          try {\n            yield videoTracks[0].applyConstraints(constraint);\n          } catch (error) {\n            this.context.logger.info('simulcast: pass video without more constraint');\n          }\n        }\n\n        const externalUserId = this.context.audioVideoController.configuration.credentials.externalUserId;\n        localTile.bindVideoStream(attendeeId, true, videoInput, trackSettings.width, trackSettings.height, null, externalUserId);\n\n        for (let i = 0; i < videoTracks.length; i++) {\n          const track = videoTracks[i];\n          this.logger.info(`using video device label=${track.label} id=${track.id}`);\n          this.context.videoDeviceInformation['current_camera_name'] = track.label;\n          this.context.videoDeviceInformation['current_camera_id'] = track.id;\n        }\n      }\n    });\n  }\n\n  stopVideoInput() {\n    this.context.mediaStreamBroker.releaseMediaStream(this.context.activeVideoInput);\n    this.context.activeVideoInput = null;\n  }\n\n}\n\nexports.default = ReceiveVideoInputTask;","map":{"version":3,"sources":["../../src/task/ReceiveVideoInputTask.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\nconst BaseTask_1 = require(\"./BaseTask\");\n/**\n * [[ReceiveVideoInputTask]] acquires a video input from [[DeviceController]].\n */\nclass ReceiveVideoInputTask extends BaseTask_1.default {\n    constructor(context) {\n        super(context.logger);\n        this.context = context;\n        this.taskName = 'ReceiveVideoInputTask';\n    }\n    run() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO: move videoDuplexMode and videoCaptureAndEncodeParameters to video tile controller\n            const receiveEnabled = this.context.videoDuplexMode === SignalingProtocol_js_1.SdkStreamServiceType.RX ||\n                this.context.videoDuplexMode === SignalingProtocol_js_1.SdkStreamServiceType.DUPLEX;\n            if (this.context.videoTileController.hasStartedLocalVideoTile()) {\n                this.context.videoDuplexMode = receiveEnabled\n                    ? SignalingProtocol_js_1.SdkStreamServiceType.DUPLEX\n                    : SignalingProtocol_js_1.SdkStreamServiceType.TX;\n            }\n            else {\n                this.context.videoDuplexMode = receiveEnabled ? SignalingProtocol_js_1.SdkStreamServiceType.RX : 0;\n            }\n            this.context.videoCaptureAndEncodeParameter = this.context.videoUplinkBandwidthPolicy.chooseCaptureAndEncodeParameters();\n            if (!this.context.videoTileController.hasStartedLocalVideoTile()) {\n                this.context.logger.info('has not started local video tile');\n                if (this.context.activeVideoInput) {\n                    this.stopVideoInput();\n                }\n                return;\n            }\n            // TODO: bind after ICE connection started in case of a failure to resubscribe\n            //       or perform error handling to unbind video stream.\n            const localTile = this.context.videoTileController.getLocalVideoTile();\n            let videoInput = null;\n            try {\n                videoInput = yield this.context.mediaStreamBroker.acquireVideoInputStream();\n            }\n            catch (error) {\n                this.context.logger.warn('could not acquire video input from current device');\n            }\n            if (this.context.enableSimulcast) {\n                const encodingParams = this.context.videoUplinkBandwidthPolicy.chooseEncodingParameters();\n                this.context.videoStreamIndex.integrateUplinkPolicyDecision(Array.from(encodingParams.values()));\n            }\n            this.context.activeVideoInput = videoInput;\n            if (videoInput) {\n                const videoTracks = videoInput.getVideoTracks();\n                const attendeeId = this.context.meetingSessionConfiguration.credentials.attendeeId;\n                const trackSettings = videoTracks[0].getSettings();\n                if (this.context.enableSimulcast) {\n                    const constraint = this.context.videoUplinkBandwidthPolicy.chooseMediaTrackConstraints();\n                    this.context.logger.info(`simulcast: choose constraint ${JSON.stringify(constraint)}`);\n                    try {\n                        yield videoTracks[0].applyConstraints(constraint);\n                    }\n                    catch (error) {\n                        this.context.logger.info('simulcast: pass video without more constraint');\n                    }\n                }\n                const externalUserId = this.context.audioVideoController.configuration.credentials\n                    .externalUserId;\n                localTile.bindVideoStream(attendeeId, true, videoInput, trackSettings.width, trackSettings.height, null, externalUserId);\n                for (let i = 0; i < videoTracks.length; i++) {\n                    const track = videoTracks[i];\n                    this.logger.info(`using video device label=${track.label} id=${track.id}`);\n                    this.context.videoDeviceInformation['current_camera_name'] = track.label;\n                    this.context.videoDeviceInformation['current_camera_id'] = track.id;\n                }\n            }\n        });\n    }\n    stopVideoInput() {\n        this.context.mediaStreamBroker.releaseMediaStream(this.context.activeVideoInput);\n        this.context.activeVideoInput = null;\n    }\n}\nexports.default = ReceiveVideoInputTask;\n//# sourceMappingURL=ReceiveVideoInputTask.js.map"]},"metadata":{},"sourceType":"script"}