{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nconst MeetingSessionStatusCode_1 = require(\"./MeetingSessionStatusCode\");\n/**\n * [[MeetingSessionStatus]] indicates a status received regarding the session.\n */\n\n\nclass MeetingSessionStatus {\n  constructor(_statusCode) {\n    this._statusCode = _statusCode;\n  }\n\n  statusCode() {\n    return this._statusCode;\n  }\n\n  isFailure() {\n    switch (this._statusCode) {\n      case MeetingSessionStatusCode_1.default.AudioAuthenticationRejected:\n      case MeetingSessionStatusCode_1.default.AudioCallAtCapacity:\n      case MeetingSessionStatusCode_1.default.AudioInternalServerError:\n      case MeetingSessionStatusCode_1.default.AudioServiceUnavailable:\n      case MeetingSessionStatusCode_1.default.AudioDisconnected:\n      case MeetingSessionStatusCode_1.default.VideoCallAtSourceCapacity:\n      case MeetingSessionStatusCode_1.default.SignalingBadRequest:\n      case MeetingSessionStatusCode_1.default.SignalingInternalServerError:\n      case MeetingSessionStatusCode_1.default.SignalingRequestFailed:\n      case MeetingSessionStatusCode_1.default.StateMachineTransitionFailed:\n      case MeetingSessionStatusCode_1.default.ICEGatheringTimeoutWorkaround:\n      case MeetingSessionStatusCode_1.default.ConnectionHealthReconnect:\n      case MeetingSessionStatusCode_1.default.RealtimeApiFailed:\n      case MeetingSessionStatusCode_1.default.TaskFailed:\n      case MeetingSessionStatusCode_1.default.NoAttendeePresent:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  isTerminal() {\n    switch (this._statusCode) {\n      case MeetingSessionStatusCode_1.default.Left:\n      case MeetingSessionStatusCode_1.default.AudioJoinedFromAnotherDevice:\n      case MeetingSessionStatusCode_1.default.AudioAuthenticationRejected:\n      case MeetingSessionStatusCode_1.default.AudioCallAtCapacity:\n      case MeetingSessionStatusCode_1.default.MeetingEnded:\n      case MeetingSessionStatusCode_1.default.AudioDisconnected:\n      case MeetingSessionStatusCode_1.default.TURNCredentialsForbidden:\n      case MeetingSessionStatusCode_1.default.SignalingBadRequest:\n      case MeetingSessionStatusCode_1.default.SignalingRequestFailed:\n      case MeetingSessionStatusCode_1.default.VideoCallAtSourceCapacity:\n      case MeetingSessionStatusCode_1.default.RealtimeApiFailed:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  isAudioConnectionFailure() {\n    switch (this._statusCode) {\n      case MeetingSessionStatusCode_1.default.AudioAuthenticationRejected:\n      case MeetingSessionStatusCode_1.default.AudioInternalServerError:\n      case MeetingSessionStatusCode_1.default.AudioServiceUnavailable:\n      case MeetingSessionStatusCode_1.default.StateMachineTransitionFailed:\n      case MeetingSessionStatusCode_1.default.ICEGatheringTimeoutWorkaround:\n      case MeetingSessionStatusCode_1.default.SignalingBadRequest:\n      case MeetingSessionStatusCode_1.default.SignalingInternalServerError:\n      case MeetingSessionStatusCode_1.default.SignalingRequestFailed:\n      case MeetingSessionStatusCode_1.default.RealtimeApiFailed:\n      case MeetingSessionStatusCode_1.default.NoAttendeePresent:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  static fromSignalFrame(frame) {\n    if (frame.error && frame.error.status) {\n      return this.fromSignalingStatus(frame.error.status);\n    } else if (frame.type === SignalingProtocol_js_1.SdkSignalFrame.Type.AUDIO_STATUS) {\n      if (frame.audioStatus) {\n        return this.fromAudioStatus(frame.audioStatus.audioStatus);\n      }\n\n      return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.SignalingRequestFailed);\n    }\n\n    return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.OK);\n  }\n\n  static fromAudioStatus(status) {\n    // TODO: Add these numbers to proto definition and reference them here.\n    switch (status) {\n      case 200:\n        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.OK);\n\n      case 301:\n        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioJoinedFromAnotherDevice);\n\n      case 302:\n        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioDisconnectAudio);\n\n      case 403:\n        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioAuthenticationRejected);\n\n      case 409:\n        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioCallAtCapacity);\n\n      case 410:\n        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.MeetingEnded);\n\n      case 500:\n        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioInternalServerError);\n\n      case 503:\n        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioServiceUnavailable);\n\n      default:\n        switch (Math.floor(status / 100)) {\n          case 2:\n            return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.OK);\n\n          default:\n            return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioDisconnected);\n        }\n\n    }\n  }\n\n  static fromSignalingStatus(status) {\n    // TODO: Add these numbers to proto definition and reference them here.\n    switch (status) {\n      case 206:\n        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.VideoCallSwitchToViewOnly);\n\n      case 509:\n        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.VideoCallAtSourceCapacity);\n\n      default:\n        switch (Math.floor(status / 100)) {\n          case 2:\n            return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.OK);\n\n          case 4:\n            return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.SignalingBadRequest);\n\n          case 5:\n            return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.SignalingInternalServerError);\n\n          default:\n            return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.SignalingRequestFailed);\n        }\n\n    }\n  }\n\n}\n\nexports.default = MeetingSessionStatus;","map":{"version":3,"sources":["../../src/meetingsession/MeetingSessionStatus.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\nconst MeetingSessionStatusCode_1 = require(\"./MeetingSessionStatusCode\");\n/**\n * [[MeetingSessionStatus]] indicates a status received regarding the session.\n */\nclass MeetingSessionStatus {\n    constructor(_statusCode) {\n        this._statusCode = _statusCode;\n    }\n    statusCode() {\n        return this._statusCode;\n    }\n    isFailure() {\n        switch (this._statusCode) {\n            case MeetingSessionStatusCode_1.default.AudioAuthenticationRejected:\n            case MeetingSessionStatusCode_1.default.AudioCallAtCapacity:\n            case MeetingSessionStatusCode_1.default.AudioInternalServerError:\n            case MeetingSessionStatusCode_1.default.AudioServiceUnavailable:\n            case MeetingSessionStatusCode_1.default.AudioDisconnected:\n            case MeetingSessionStatusCode_1.default.VideoCallAtSourceCapacity:\n            case MeetingSessionStatusCode_1.default.SignalingBadRequest:\n            case MeetingSessionStatusCode_1.default.SignalingInternalServerError:\n            case MeetingSessionStatusCode_1.default.SignalingRequestFailed:\n            case MeetingSessionStatusCode_1.default.StateMachineTransitionFailed:\n            case MeetingSessionStatusCode_1.default.ICEGatheringTimeoutWorkaround:\n            case MeetingSessionStatusCode_1.default.ConnectionHealthReconnect:\n            case MeetingSessionStatusCode_1.default.RealtimeApiFailed:\n            case MeetingSessionStatusCode_1.default.TaskFailed:\n            case MeetingSessionStatusCode_1.default.NoAttendeePresent:\n                return true;\n            default:\n                return false;\n        }\n    }\n    isTerminal() {\n        switch (this._statusCode) {\n            case MeetingSessionStatusCode_1.default.Left:\n            case MeetingSessionStatusCode_1.default.AudioJoinedFromAnotherDevice:\n            case MeetingSessionStatusCode_1.default.AudioAuthenticationRejected:\n            case MeetingSessionStatusCode_1.default.AudioCallAtCapacity:\n            case MeetingSessionStatusCode_1.default.MeetingEnded:\n            case MeetingSessionStatusCode_1.default.AudioDisconnected:\n            case MeetingSessionStatusCode_1.default.TURNCredentialsForbidden:\n            case MeetingSessionStatusCode_1.default.SignalingBadRequest:\n            case MeetingSessionStatusCode_1.default.SignalingRequestFailed:\n            case MeetingSessionStatusCode_1.default.VideoCallAtSourceCapacity:\n            case MeetingSessionStatusCode_1.default.RealtimeApiFailed:\n                return true;\n            default:\n                return false;\n        }\n    }\n    isAudioConnectionFailure() {\n        switch (this._statusCode) {\n            case MeetingSessionStatusCode_1.default.AudioAuthenticationRejected:\n            case MeetingSessionStatusCode_1.default.AudioInternalServerError:\n            case MeetingSessionStatusCode_1.default.AudioServiceUnavailable:\n            case MeetingSessionStatusCode_1.default.StateMachineTransitionFailed:\n            case MeetingSessionStatusCode_1.default.ICEGatheringTimeoutWorkaround:\n            case MeetingSessionStatusCode_1.default.SignalingBadRequest:\n            case MeetingSessionStatusCode_1.default.SignalingInternalServerError:\n            case MeetingSessionStatusCode_1.default.SignalingRequestFailed:\n            case MeetingSessionStatusCode_1.default.RealtimeApiFailed:\n            case MeetingSessionStatusCode_1.default.NoAttendeePresent:\n                return true;\n            default:\n                return false;\n        }\n    }\n    static fromSignalFrame(frame) {\n        if (frame.error && frame.error.status) {\n            return this.fromSignalingStatus(frame.error.status);\n        }\n        else if (frame.type === SignalingProtocol_js_1.SdkSignalFrame.Type.AUDIO_STATUS) {\n            if (frame.audioStatus) {\n                return this.fromAudioStatus(frame.audioStatus.audioStatus);\n            }\n            return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.SignalingRequestFailed);\n        }\n        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.OK);\n    }\n    static fromAudioStatus(status) {\n        // TODO: Add these numbers to proto definition and reference them here.\n        switch (status) {\n            case 200:\n                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.OK);\n            case 301:\n                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioJoinedFromAnotherDevice);\n            case 302:\n                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioDisconnectAudio);\n            case 403:\n                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioAuthenticationRejected);\n            case 409:\n                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioCallAtCapacity);\n            case 410:\n                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.MeetingEnded);\n            case 500:\n                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioInternalServerError);\n            case 503:\n                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioServiceUnavailable);\n            default:\n                switch (Math.floor(status / 100)) {\n                    case 2:\n                        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.OK);\n                    default:\n                        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.AudioDisconnected);\n                }\n        }\n    }\n    static fromSignalingStatus(status) {\n        // TODO: Add these numbers to proto definition and reference them here.\n        switch (status) {\n            case 206:\n                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.VideoCallSwitchToViewOnly);\n            case 509:\n                return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.VideoCallAtSourceCapacity);\n            default:\n                switch (Math.floor(status / 100)) {\n                    case 2:\n                        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.OK);\n                    case 4:\n                        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.SignalingBadRequest);\n                    case 5:\n                        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.SignalingInternalServerError);\n                    default:\n                        return new MeetingSessionStatus(MeetingSessionStatusCode_1.default.SignalingRequestFailed);\n                }\n        }\n    }\n}\nexports.default = MeetingSessionStatus;\n//# sourceMappingURL=MeetingSessionStatus.js.map"]},"metadata":{},"sourceType":"script"}