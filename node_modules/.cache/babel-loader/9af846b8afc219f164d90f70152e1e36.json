{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst SignalingClientEventType_1 = require(\"../signalingclient/SignalingClientEventType\");\n\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\n\nconst BaseTask_1 = require(\"./BaseTask\");\n\nclass ListenForVolumeIndicatorsTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'ListenForVolumeIndicatorsTask';\n\n    this.realtimeMuteAndUnmuteHandler = muted => {\n      this.context.signalingClient.mute(muted);\n    };\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.context.removableObservers.push(this);\n      this.context.signalingClient.registerObserver(this);\n      this.context.realtimeController.realtimeSubscribeToMuteAndUnmuteLocalAudio(this.realtimeMuteAndUnmuteHandler);\n    });\n  }\n\n  removeObserver() {\n    this.context.realtimeController.realtimeUnsubscribeToMuteAndUnmuteLocalAudio(this.realtimeMuteAndUnmuteHandler);\n    this.context.signalingClient.removeObserver(this);\n  }\n\n  handleSignalingClientEvent(event) {\n    if (event.type !== SignalingClientEventType_1.default.ReceivedSignalFrame) {\n      return;\n    }\n\n    if (event.message.type === SignalingProtocol_js_1.SdkSignalFrame.Type.AUDIO_STREAM_ID_INFO) {\n      // @ts-ignore\n      const audioStreamIdInfo = event.message.audioStreamIdInfo;\n      this.context.volumeIndicatorAdapter.sendRealtimeUpdatesForAudioStreamIdInfo(audioStreamIdInfo);\n    } else if (event.message.type === SignalingProtocol_js_1.SdkSignalFrame.Type.AUDIO_METADATA) {\n      // @ts-ignore\n      const audioMetadata = event.message.audioMetadata;\n      this.context.volumeIndicatorAdapter.sendRealtimeUpdatesForAudioMetadata(audioMetadata);\n    }\n  }\n\n}\n\nexports.default = ListenForVolumeIndicatorsTask;","map":{"version":3,"sources":["../../src/task/ListenForVolumeIndicatorsTask.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,MAAA,0BAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;;AAEA,MAAA,sBAAA,GAAA,OAAA,CAAA,2CAAA,CAAA;;AAKA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAEA,MAAqB,6BAArB,SACU,UAAA,CAAA,OADV,CACkB;AAGhB,EAAA,WAAA,CAAoB,OAApB,EAAsD;AACpD,UAAM,OAAO,CAAC,MAAd;AADkB,SAAA,OAAA,GAAA,OAAA;AADV,SAAA,QAAA,GAAW,+BAAX;;AAqCV,SAAA,4BAAA,GAAgC,KAAD,IAAyB;AACtD,WAAK,OAAL,CAAa,eAAb,CAA6B,IAA7B,CAAkC,KAAlC;AACD,KAFD;AAlCC;;AAEK,EAAA,GAAG,GAAA;;AACP,WAAK,OAAL,CAAa,kBAAb,CAAgC,IAAhC,CAAqC,IAArC;AACA,WAAK,OAAL,CAAa,eAAb,CAA6B,gBAA7B,CAA8C,IAA9C;AACA,WAAK,OAAL,CAAa,kBAAb,CAAgC,0CAAhC,CACE,KAAK,4BADP;AAGD,K;AAAA;;AAED,EAAA,cAAc,GAAA;AACZ,SAAK,OAAL,CAAa,kBAAb,CAAgC,4CAAhC,CACE,KAAK,4BADP;AAGA,SAAK,OAAL,CAAa,eAAb,CAA6B,cAA7B,CAA4C,IAA5C;AACD;;AAED,EAAA,0BAA0B,CAAC,KAAD,EAA4B;AACpD,QAAI,KAAK,CAAC,IAAN,KAAe,0BAAA,CAAA,OAAA,CAAyB,mBAA5C,EAAiE;AAC/D;AACD;;AACD,QAAI,KAAK,CAAC,OAAN,CAAc,IAAd,KAAuB,sBAAA,CAAA,cAAA,CAAe,IAAf,CAAoB,oBAA/C,EAAqE;AACnE;AACA,YAAM,iBAAiB,GAA8B,KAAK,CAAC,OAAN,CAAc,iBAAnE;AACA,WAAK,OAAL,CAAa,sBAAb,CAAoC,uCAApC,CACE,iBADF;AAGD,KAND,MAMO,IAAI,KAAK,CAAC,OAAN,CAAc,IAAd,KAAuB,sBAAA,CAAA,cAAA,CAAe,IAAf,CAAoB,cAA/C,EAA+D;AACpE;AACA,YAAM,aAAa,GAA0B,KAAK,CAAC,OAAN,CAAc,aAA3D;AACA,WAAK,OAAL,CAAa,sBAAb,CAAoC,mCAApC,CAAwE,aAAxE;AACD;AACF;;AArCe;;AADlB,OAAA,CAAA,OAAA,GAAA,6BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst SignalingClientEventType_1 = require(\"../signalingclient/SignalingClientEventType\");\nconst SignalingProtocol_js_1 = require(\"../signalingprotocol/SignalingProtocol.js\");\nconst BaseTask_1 = require(\"./BaseTask\");\nclass ListenForVolumeIndicatorsTask extends BaseTask_1.default {\n    constructor(context) {\n        super(context.logger);\n        this.context = context;\n        this.taskName = 'ListenForVolumeIndicatorsTask';\n        this.realtimeMuteAndUnmuteHandler = (muted) => {\n            this.context.signalingClient.mute(muted);\n        };\n    }\n    run() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.context.removableObservers.push(this);\n            this.context.signalingClient.registerObserver(this);\n            this.context.realtimeController.realtimeSubscribeToMuteAndUnmuteLocalAudio(this.realtimeMuteAndUnmuteHandler);\n        });\n    }\n    removeObserver() {\n        this.context.realtimeController.realtimeUnsubscribeToMuteAndUnmuteLocalAudio(this.realtimeMuteAndUnmuteHandler);\n        this.context.signalingClient.removeObserver(this);\n    }\n    handleSignalingClientEvent(event) {\n        if (event.type !== SignalingClientEventType_1.default.ReceivedSignalFrame) {\n            return;\n        }\n        if (event.message.type === SignalingProtocol_js_1.SdkSignalFrame.Type.AUDIO_STREAM_ID_INFO) {\n            // @ts-ignore\n            const audioStreamIdInfo = event.message.audioStreamIdInfo;\n            this.context.volumeIndicatorAdapter.sendRealtimeUpdatesForAudioStreamIdInfo(audioStreamIdInfo);\n        }\n        else if (event.message.type === SignalingProtocol_js_1.SdkSignalFrame.Type.AUDIO_METADATA) {\n            // @ts-ignore\n            const audioMetadata = event.message.audioMetadata;\n            this.context.volumeIndicatorAdapter.sendRealtimeUpdatesForAudioMetadata(audioMetadata);\n        }\n    }\n}\nexports.default = ListenForVolumeIndicatorsTask;\n//# sourceMappingURL=ListenForVolumeIndicatorsTask.js.map"]},"metadata":{},"sourceType":"script"}