{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst DefaultDevicePixelRatioMonitor_1 = require(\"../devicepixelratiomonitor/DefaultDevicePixelRatioMonitor\");\n\nconst DevicePixelRatioWindowSource_1 = require(\"../devicepixelratiosource/DevicePixelRatioWindowSource\");\n\nconst Maybe_1 = require(\"../maybe/Maybe\");\n\nclass DefaultVideoTileController {\n  constructor(tileFactory, audioVideoController, logger) {\n    this.tileFactory = tileFactory;\n    this.audioVideoController = audioVideoController;\n    this.logger = logger;\n    this.tileMap = new Map();\n    this.nextTileId = 1;\n    this.currentLocalTile = null;\n    this.currentPausedTilesByIds = new Set();\n  }\n\n  createDevicePixelRatioMonitorIfNeeded() {\n    if (this.devicePixelRatioMonitor) {\n      return;\n    }\n\n    this.devicePixelRatioMonitor = new DefaultDevicePixelRatioMonitor_1.default(new DevicePixelRatioWindowSource_1.default(), this.logger);\n  }\n\n  discardDevicePixelRatioMonitorIfNotNeeded() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.tileMap.size || !this.devicePixelRatioMonitor) {\n        return;\n      }\n\n      const monitor = this.devicePixelRatioMonitor;\n      this.devicePixelRatioMonitor = undefined;\n      return monitor.destroy();\n    });\n  }\n\n  bindVideoElement(tileId, videoElement) {\n    const tile = this.getVideoTile(tileId);\n\n    if (tile === null) {\n      this.logger.warn(`Ignoring video element binding for unknown tile id ${tileId}`);\n      return;\n    }\n\n    tile.bindVideoElement(videoElement);\n  }\n\n  unbindVideoElement(tileId) {\n    this.bindVideoElement(tileId, null);\n  }\n\n  startLocalVideoTile() {\n    const tile = this.findOrCreateLocalVideoTile();\n    this.currentLocalTile.stateRef().localTileStarted = true;\n    this.audioVideoController.update();\n    return tile.id();\n  }\n\n  stopLocalVideoTile() {\n    if (!this.currentLocalTile) {\n      return;\n    }\n\n    this.currentLocalTile.stateRef().localTileStarted = false;\n    this.currentLocalTile.bindVideoStream(this.audioVideoController.configuration.credentials.attendeeId, true, null, null, null, null, this.audioVideoController.configuration.credentials.externalUserId);\n    this.audioVideoController.update();\n  }\n\n  hasStartedLocalVideoTile() {\n    return !!(this.currentLocalTile && this.currentLocalTile.stateRef().localTileStarted);\n  }\n\n  removeLocalVideoTile() {\n    if (this.currentLocalTile) {\n      this.removeVideoTile(this.currentLocalTile.id());\n    }\n  }\n\n  getLocalVideoTile() {\n    return this.currentLocalTile;\n  }\n\n  pauseVideoTile(tileId) {\n    const tile = this.getVideoTile(tileId);\n\n    if (tile) {\n      if (!this.currentPausedTilesByIds.has(tileId)) {\n        this.audioVideoController.pauseReceivingStream(tile.stateRef().streamId);\n        this.currentPausedTilesByIds.add(tileId);\n      }\n\n      tile.pause();\n    }\n  }\n\n  unpauseVideoTile(tileId) {\n    const tile = this.getVideoTile(tileId);\n\n    if (tile) {\n      if (this.currentPausedTilesByIds.has(tileId)) {\n        this.audioVideoController.resumeReceivingStream(tile.stateRef().streamId);\n        this.currentPausedTilesByIds.delete(tileId);\n      }\n\n      tile.unpause();\n    }\n  }\n\n  getVideoTile(tileId) {\n    return this.tileMap.has(tileId) ? this.tileMap.get(tileId) : null;\n  }\n\n  getVideoTileArea(tile) {\n    const state = tile.state();\n    let tileHeight = 0;\n    let tileWidth = 0;\n\n    if (state.boundVideoElement) {\n      tileHeight = state.boundVideoElement.clientHeight * state.devicePixelRatio;\n      tileWidth = state.boundVideoElement.clientWidth * state.devicePixelRatio;\n    }\n\n    return tileHeight * tileWidth;\n  }\n\n  getAllRemoteVideoTiles() {\n    const result = new Array();\n    this.tileMap.forEach((tile, tileId) => {\n      if (!this.currentLocalTile || tileId !== this.currentLocalTile.id()) {\n        result.push(tile);\n      }\n    });\n    return result;\n  }\n\n  getAllVideoTiles() {\n    return Array.from(this.tileMap.values());\n  }\n\n  addVideoTile(localTile = false) {\n    const tileId = this.nextTileId;\n    this.nextTileId += 1;\n    this.createDevicePixelRatioMonitorIfNeeded();\n    const tile = this.tileFactory.makeTile(tileId, localTile, this, this.devicePixelRatioMonitor);\n    this.tileMap.set(tileId, tile);\n    return tile;\n  }\n\n  removeVideoTile(tileId) {\n    if (!this.tileMap.has(tileId)) {\n      return;\n    }\n\n    const tile = this.tileMap.get(tileId);\n\n    if (this.currentLocalTile === tile) {\n      this.currentLocalTile = null;\n    }\n\n    tile.destroy();\n    this.tileMap.delete(tileId);\n    this.audioVideoController.forEachObserver(observer => {\n      Maybe_1.default.of(observer.videoTileWasRemoved).map(f => f.bind(observer)(tileId));\n    });\n    this.discardDevicePixelRatioMonitorIfNotNeeded();\n  }\n\n  removeVideoTilesByAttendeeId(attendeeId) {\n    const tilesRemoved = [];\n\n    for (const tile of this.getAllVideoTiles()) {\n      const state = tile.state();\n\n      if (state.boundAttendeeId === attendeeId) {\n        this.removeVideoTile(state.tileId);\n        tilesRemoved.push(state.tileId);\n      }\n    }\n\n    return tilesRemoved;\n  }\n\n  removeAllVideoTiles() {\n    const tileIds = Array.from(this.tileMap.keys());\n\n    for (const tileId of tileIds) {\n      this.removeVideoTile(tileId);\n    }\n  }\n\n  sendTileStateUpdate(tileState) {\n    this.audioVideoController.forEachObserver(observer => {\n      Maybe_1.default.of(observer.videoTileDidUpdate).map(f => f.bind(observer)(tileState));\n    });\n  }\n\n  haveVideoTilesWithStreams() {\n    for (const tile of this.getAllVideoTiles()) {\n      if (tile.state().boundVideoStream) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  haveVideoTileForAttendeeId(attendeeId) {\n    for (const tile of this.getAllVideoTiles()) {\n      const state = tile.state();\n\n      if (state.boundAttendeeId === attendeeId) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  captureVideoTile(tileId) {\n    const tile = this.getVideoTile(tileId);\n\n    if (!tile) {\n      return null;\n    }\n\n    return tile.capture();\n  }\n\n  findOrCreateLocalVideoTile() {\n    if (this.currentLocalTile) {\n      return this.currentLocalTile;\n    }\n\n    this.currentLocalTile = this.addVideoTile(true);\n    this.currentLocalTile.bindVideoStream(this.audioVideoController.configuration.credentials.attendeeId, true, null, null, null, null, this.audioVideoController.configuration.credentials.externalUserId);\n    return this.currentLocalTile;\n  }\n\n}\n\nexports.default = DefaultVideoTileController;","map":{"version":3,"sources":["../../src/videotilecontroller/DefaultVideoTileController.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst DefaultDevicePixelRatioMonitor_1 = require(\"../devicepixelratiomonitor/DefaultDevicePixelRatioMonitor\");\nconst DevicePixelRatioWindowSource_1 = require(\"../devicepixelratiosource/DevicePixelRatioWindowSource\");\nconst Maybe_1 = require(\"../maybe/Maybe\");\nclass DefaultVideoTileController {\n    constructor(tileFactory, audioVideoController, logger) {\n        this.tileFactory = tileFactory;\n        this.audioVideoController = audioVideoController;\n        this.logger = logger;\n        this.tileMap = new Map();\n        this.nextTileId = 1;\n        this.currentLocalTile = null;\n        this.currentPausedTilesByIds = new Set();\n    }\n    createDevicePixelRatioMonitorIfNeeded() {\n        if (this.devicePixelRatioMonitor) {\n            return;\n        }\n        this.devicePixelRatioMonitor = new DefaultDevicePixelRatioMonitor_1.default(new DevicePixelRatioWindowSource_1.default(), this.logger);\n    }\n    discardDevicePixelRatioMonitorIfNotNeeded() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.tileMap.size || !this.devicePixelRatioMonitor) {\n                return;\n            }\n            const monitor = this.devicePixelRatioMonitor;\n            this.devicePixelRatioMonitor = undefined;\n            return monitor.destroy();\n        });\n    }\n    bindVideoElement(tileId, videoElement) {\n        const tile = this.getVideoTile(tileId);\n        if (tile === null) {\n            this.logger.warn(`Ignoring video element binding for unknown tile id ${tileId}`);\n            return;\n        }\n        tile.bindVideoElement(videoElement);\n    }\n    unbindVideoElement(tileId) {\n        this.bindVideoElement(tileId, null);\n    }\n    startLocalVideoTile() {\n        const tile = this.findOrCreateLocalVideoTile();\n        this.currentLocalTile.stateRef().localTileStarted = true;\n        this.audioVideoController.update();\n        return tile.id();\n    }\n    stopLocalVideoTile() {\n        if (!this.currentLocalTile) {\n            return;\n        }\n        this.currentLocalTile.stateRef().localTileStarted = false;\n        this.currentLocalTile.bindVideoStream(this.audioVideoController.configuration.credentials.attendeeId, true, null, null, null, null, this.audioVideoController.configuration.credentials.externalUserId);\n        this.audioVideoController.update();\n    }\n    hasStartedLocalVideoTile() {\n        return !!(this.currentLocalTile && this.currentLocalTile.stateRef().localTileStarted);\n    }\n    removeLocalVideoTile() {\n        if (this.currentLocalTile) {\n            this.removeVideoTile(this.currentLocalTile.id());\n        }\n    }\n    getLocalVideoTile() {\n        return this.currentLocalTile;\n    }\n    pauseVideoTile(tileId) {\n        const tile = this.getVideoTile(tileId);\n        if (tile) {\n            if (!this.currentPausedTilesByIds.has(tileId)) {\n                this.audioVideoController.pauseReceivingStream(tile.stateRef().streamId);\n                this.currentPausedTilesByIds.add(tileId);\n            }\n            tile.pause();\n        }\n    }\n    unpauseVideoTile(tileId) {\n        const tile = this.getVideoTile(tileId);\n        if (tile) {\n            if (this.currentPausedTilesByIds.has(tileId)) {\n                this.audioVideoController.resumeReceivingStream(tile.stateRef().streamId);\n                this.currentPausedTilesByIds.delete(tileId);\n            }\n            tile.unpause();\n        }\n    }\n    getVideoTile(tileId) {\n        return this.tileMap.has(tileId) ? this.tileMap.get(tileId) : null;\n    }\n    getVideoTileArea(tile) {\n        const state = tile.state();\n        let tileHeight = 0;\n        let tileWidth = 0;\n        if (state.boundVideoElement) {\n            tileHeight = state.boundVideoElement.clientHeight * state.devicePixelRatio;\n            tileWidth = state.boundVideoElement.clientWidth * state.devicePixelRatio;\n        }\n        return tileHeight * tileWidth;\n    }\n    getAllRemoteVideoTiles() {\n        const result = new Array();\n        this.tileMap.forEach((tile, tileId) => {\n            if (!this.currentLocalTile || tileId !== this.currentLocalTile.id()) {\n                result.push(tile);\n            }\n        });\n        return result;\n    }\n    getAllVideoTiles() {\n        return Array.from(this.tileMap.values());\n    }\n    addVideoTile(localTile = false) {\n        const tileId = this.nextTileId;\n        this.nextTileId += 1;\n        this.createDevicePixelRatioMonitorIfNeeded();\n        const tile = this.tileFactory.makeTile(tileId, localTile, this, this.devicePixelRatioMonitor);\n        this.tileMap.set(tileId, tile);\n        return tile;\n    }\n    removeVideoTile(tileId) {\n        if (!this.tileMap.has(tileId)) {\n            return;\n        }\n        const tile = this.tileMap.get(tileId);\n        if (this.currentLocalTile === tile) {\n            this.currentLocalTile = null;\n        }\n        tile.destroy();\n        this.tileMap.delete(tileId);\n        this.audioVideoController.forEachObserver((observer) => {\n            Maybe_1.default.of(observer.videoTileWasRemoved).map(f => f.bind(observer)(tileId));\n        });\n        this.discardDevicePixelRatioMonitorIfNotNeeded();\n    }\n    removeVideoTilesByAttendeeId(attendeeId) {\n        const tilesRemoved = [];\n        for (const tile of this.getAllVideoTiles()) {\n            const state = tile.state();\n            if (state.boundAttendeeId === attendeeId) {\n                this.removeVideoTile(state.tileId);\n                tilesRemoved.push(state.tileId);\n            }\n        }\n        return tilesRemoved;\n    }\n    removeAllVideoTiles() {\n        const tileIds = Array.from(this.tileMap.keys());\n        for (const tileId of tileIds) {\n            this.removeVideoTile(tileId);\n        }\n    }\n    sendTileStateUpdate(tileState) {\n        this.audioVideoController.forEachObserver((observer) => {\n            Maybe_1.default.of(observer.videoTileDidUpdate).map(f => f.bind(observer)(tileState));\n        });\n    }\n    haveVideoTilesWithStreams() {\n        for (const tile of this.getAllVideoTiles()) {\n            if (tile.state().boundVideoStream) {\n                return true;\n            }\n        }\n        return false;\n    }\n    haveVideoTileForAttendeeId(attendeeId) {\n        for (const tile of this.getAllVideoTiles()) {\n            const state = tile.state();\n            if (state.boundAttendeeId === attendeeId) {\n                return true;\n            }\n        }\n        return false;\n    }\n    captureVideoTile(tileId) {\n        const tile = this.getVideoTile(tileId);\n        if (!tile) {\n            return null;\n        }\n        return tile.capture();\n    }\n    findOrCreateLocalVideoTile() {\n        if (this.currentLocalTile) {\n            return this.currentLocalTile;\n        }\n        this.currentLocalTile = this.addVideoTile(true);\n        this.currentLocalTile.bindVideoStream(this.audioVideoController.configuration.credentials.attendeeId, true, null, null, null, null, this.audioVideoController.configuration.credentials.externalUserId);\n        return this.currentLocalTile;\n    }\n}\nexports.default = DefaultVideoTileController;\n//# sourceMappingURL=DefaultVideoTileController.js.map"]},"metadata":{},"sourceType":"script"}