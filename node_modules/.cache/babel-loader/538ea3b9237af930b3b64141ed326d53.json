{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Versioning_1 = require(\"../versioning/Versioning\");\n\nclass DefaultSigV4 {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  constructor(chimeClient, awsClient) {\n    this.chimeClient = chimeClient;\n    this.awsClient = awsClient;\n  }\n\n  makeTwoDigits(n) {\n    /* istanbul ignore if */\n\n    /* istanbul ignore else */\n    if (n > 9) {\n      return n.toString();\n    } else {\n      return '0' + n.toString();\n    }\n  }\n\n  getDateTimeString() {\n    const d = new Date();\n    return d.getUTCFullYear() + this.makeTwoDigits(d.getUTCMonth() + 1) + this.makeTwoDigits(d.getUTCDate()) + 'T' + this.makeTwoDigits(d.getUTCHours()) + this.makeTwoDigits(d.getUTCMinutes()) + this.makeTwoDigits(d.getUTCSeconds()) + 'Z';\n  }\n\n  getDateString(dateTimeString) {\n    return dateTimeString.substring(0, dateTimeString.indexOf('T'));\n  }\n\n  getSignatureKey(key, date, regionName, serviceName) {\n    const kDate = this.awsClient.util.crypto.hmac('AWS4' + key, date, 'buffer');\n    const kRegion = this.awsClient.util.crypto.hmac(kDate, regionName, 'buffer');\n    const kService = this.awsClient.util.crypto.hmac(kRegion, serviceName, 'buffer');\n    const kSigning = this.awsClient.util.crypto.hmac(kService, 'aws4_request', 'buffer');\n    return kSigning;\n  }\n\n  signURL(method, scheme, serviceName, hostname, path, payload, queryParams) {\n    const now = this.getDateTimeString();\n    const today = this.getDateString(now);\n    const algorithm = 'AWS4-HMAC-SHA256';\n    const region = this.chimeClient.config.region;\n    const signedHeaders = 'host';\n    const canonicalHeaders = 'host:' + hostname.toLowerCase() + '\\n';\n    const credentialScope = today + '/' + region + '/' + serviceName + '/' + 'aws4_request';\n    const credentials = this.chimeClient.config.credentials;\n    let params = new Map();\n    params.set('X-Amz-Algorithm', [algorithm]);\n    params.set('X-Amz-Credential', [encodeURIComponent(credentials.accessKeyId + '/' + credentialScope)]);\n    params.set('X-Amz-Date', [now]);\n    params.set('X-Amz-Expires', ['10']);\n    params.set('X-Amz-SignedHeaders', ['host']);\n\n    if (credentials.sessionToken) {\n      params.set('X-Amz-Security-Token', [encodeURIComponent(credentials.sessionToken)]);\n    }\n\n    params.set(Versioning_1.default.X_AMZN_VERSION, [encodeURIComponent(Versioning_1.default.sdkVersion)]);\n    params.set(Versioning_1.default.X_AMZN_USER_AGENT, [encodeURIComponent(Versioning_1.default.sdkUserAgentLowResolution)]);\n    queryParams === null || queryParams === void 0 ? void 0 : queryParams.forEach((values, key) => {\n      const encodedKey = encodeURIComponent(key);\n      values.sort().forEach(value => {\n        if (!params.has(encodedKey)) {\n          params.set(encodedKey, []);\n        }\n\n        params.get(encodedKey).push(encodeURIComponent(value));\n      });\n    });\n    let canonicalQuerystring = '';\n    params = new Map([...params.entries()].sort());\n    params.forEach((values, key) => {\n      values.forEach(value => {\n        if (canonicalQuerystring.length) {\n          canonicalQuerystring += '&';\n        }\n\n        canonicalQuerystring += key + '=' + value;\n      });\n    });\n    const canonicalRequest = method + '\\n' + path + '\\n' + canonicalQuerystring + '\\n' + canonicalHeaders + '\\n' + signedHeaders + '\\n' + this.awsClient.util.crypto.sha256(payload, 'hex');\n    const hashedCanonicalRequest = this.awsClient.util.crypto.sha256(canonicalRequest, 'hex');\n    const stringToSign = 'AWS4-HMAC-SHA256\\n' + now + '\\n' + today + '/' + region + '/' + serviceName + '/aws4_request\\n' + hashedCanonicalRequest;\n    const signingKey = this.getSignatureKey(credentials.secretAccessKey, today, region, serviceName);\n    const signature = this.awsClient.util.crypto.hmac(signingKey, stringToSign, 'hex');\n    const finalParams = canonicalQuerystring + '&X-Amz-Signature=' + signature;\n    return scheme + '://' + hostname + path + '?' + finalParams;\n  }\n\n}\n\nexports.default = DefaultSigV4;","map":{"version":3,"sources":["../../src/sigv4/DefaultSigV4.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Versioning_1 = require(\"../versioning/Versioning\");\nclass DefaultSigV4 {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n    constructor(chimeClient, awsClient) {\n        this.chimeClient = chimeClient;\n        this.awsClient = awsClient;\n    }\n    makeTwoDigits(n) {\n        /* istanbul ignore if */\n        /* istanbul ignore else */\n        if (n > 9) {\n            return n.toString();\n        }\n        else {\n            return '0' + n.toString();\n        }\n    }\n    getDateTimeString() {\n        const d = new Date();\n        return (d.getUTCFullYear() +\n            this.makeTwoDigits(d.getUTCMonth() + 1) +\n            this.makeTwoDigits(d.getUTCDate()) +\n            'T' +\n            this.makeTwoDigits(d.getUTCHours()) +\n            this.makeTwoDigits(d.getUTCMinutes()) +\n            this.makeTwoDigits(d.getUTCSeconds()) +\n            'Z');\n    }\n    getDateString(dateTimeString) {\n        return dateTimeString.substring(0, dateTimeString.indexOf('T'));\n    }\n    getSignatureKey(key, date, regionName, serviceName) {\n        const kDate = this.awsClient.util.crypto.hmac('AWS4' + key, date, 'buffer');\n        const kRegion = this.awsClient.util.crypto.hmac(kDate, regionName, 'buffer');\n        const kService = this.awsClient.util.crypto.hmac(kRegion, serviceName, 'buffer');\n        const kSigning = this.awsClient.util.crypto.hmac(kService, 'aws4_request', 'buffer');\n        return kSigning;\n    }\n    signURL(method, scheme, serviceName, hostname, path, payload, queryParams) {\n        const now = this.getDateTimeString();\n        const today = this.getDateString(now);\n        const algorithm = 'AWS4-HMAC-SHA256';\n        const region = this.chimeClient.config.region;\n        const signedHeaders = 'host';\n        const canonicalHeaders = 'host:' + hostname.toLowerCase() + '\\n';\n        const credentialScope = today + '/' + region + '/' + serviceName + '/' + 'aws4_request';\n        const credentials = this.chimeClient.config.credentials;\n        let params = new Map();\n        params.set('X-Amz-Algorithm', [algorithm]);\n        params.set('X-Amz-Credential', [\n            encodeURIComponent(credentials.accessKeyId + '/' + credentialScope),\n        ]);\n        params.set('X-Amz-Date', [now]);\n        params.set('X-Amz-Expires', ['10']);\n        params.set('X-Amz-SignedHeaders', ['host']);\n        if (credentials.sessionToken) {\n            params.set('X-Amz-Security-Token', [encodeURIComponent(credentials.sessionToken)]);\n        }\n        params.set(Versioning_1.default.X_AMZN_VERSION, [encodeURIComponent(Versioning_1.default.sdkVersion)]);\n        params.set(Versioning_1.default.X_AMZN_USER_AGENT, [\n            encodeURIComponent(Versioning_1.default.sdkUserAgentLowResolution),\n        ]);\n        queryParams === null || queryParams === void 0 ? void 0 : queryParams.forEach((values, key) => {\n            const encodedKey = encodeURIComponent(key);\n            values.sort().forEach((value) => {\n                if (!params.has(encodedKey)) {\n                    params.set(encodedKey, []);\n                }\n                params.get(encodedKey).push(encodeURIComponent(value));\n            });\n        });\n        let canonicalQuerystring = '';\n        params = new Map([...params.entries()].sort());\n        params.forEach((values, key) => {\n            values.forEach(value => {\n                if (canonicalQuerystring.length) {\n                    canonicalQuerystring += '&';\n                }\n                canonicalQuerystring += key + '=' + value;\n            });\n        });\n        const canonicalRequest = method +\n            '\\n' +\n            path +\n            '\\n' +\n            canonicalQuerystring +\n            '\\n' +\n            canonicalHeaders +\n            '\\n' +\n            signedHeaders +\n            '\\n' +\n            this.awsClient.util.crypto.sha256(payload, 'hex');\n        const hashedCanonicalRequest = this.awsClient.util.crypto.sha256(canonicalRequest, 'hex');\n        const stringToSign = 'AWS4-HMAC-SHA256\\n' +\n            now +\n            '\\n' +\n            today +\n            '/' +\n            region +\n            '/' +\n            serviceName +\n            '/aws4_request\\n' +\n            hashedCanonicalRequest;\n        const signingKey = this.getSignatureKey(credentials.secretAccessKey, today, region, serviceName);\n        const signature = this.awsClient.util.crypto.hmac(signingKey, stringToSign, 'hex');\n        const finalParams = canonicalQuerystring + '&X-Amz-Signature=' + signature;\n        return scheme + '://' + hostname + path + '?' + finalParams;\n    }\n}\nexports.default = DefaultSigV4;\n//# sourceMappingURL=DefaultSigV4.js.map"]},"metadata":{},"sourceType":"script"}