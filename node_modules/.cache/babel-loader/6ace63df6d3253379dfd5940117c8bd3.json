{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass DefaultDevicePixelRatioMonitor {\n  constructor(devicePixelRatioSource, logger) {\n    this.devicePixelRatioSource = devicePixelRatioSource;\n    this.observerQueue = new Set();\n\n    this.mediaQueryListener = () => {\n      this.observerQueue.forEach(tileObserver => {\n        tileObserver.devicePixelRatioChanged(this.devicePixelRatioSource.devicePixelRatio());\n      });\n    };\n\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const mediaQueryList = matchMedia(`(resolution: ${this.devicePixelRatioSource.devicePixelRatio()}dppx)`);\n\n    if (typeof mediaQueryList.addEventListener === 'function') {\n      mediaQueryList.addEventListener('change', this.mediaQueryListener);\n      this.mediaQueryList = mediaQueryList;\n    } else if (typeof mediaQueryList.addListener === 'function') {\n      mediaQueryList.addListener(this.mediaQueryListener);\n      this.mediaQueryList = mediaQueryList;\n    } else {\n      logger.warn('ignoring DefaultDevicePixelRatioMonitor');\n    }\n  }\n\n  destroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.mediaQueryList) {\n        if (typeof this.mediaQueryList.addEventListener === 'function') {\n          this.mediaQueryList.removeEventListener('change', this.mediaQueryListener);\n        } else {\n          this.mediaQueryList.removeListener(this.mediaQueryListener);\n        }\n      }\n\n      delete this.mediaQueryListener;\n      this.observerQueue.clear();\n    });\n  }\n\n  registerObserver(observer) {\n    this.observerQueue.add(observer);\n    observer.devicePixelRatioChanged(this.devicePixelRatioSource.devicePixelRatio());\n  }\n\n  removeObserver(observer) {\n    this.observerQueue.delete(observer);\n  }\n\n}\n\nexports.default = DefaultDevicePixelRatioMonitor;","map":{"version":3,"sources":["../../src/devicepixelratiomonitor/DefaultDevicePixelRatioMonitor.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,MAAqB,8BAArB,CAAmD;AAKjD,EAAA,WAAA,CAAoB,sBAApB,EAAoE,MAApE,EAAkF;AAA9D,SAAA,sBAAA,GAAA,sBAAA;AAHZ,SAAA,aAAA,GAAgB,IAAI,GAAJ,EAAhB;;AAkCR,SAAA,kBAAA,GAAqB,MAAW;AAC9B,WAAK,aAAL,CAAmB,OAAnB,CAA2B,YAAY,IAAG;AACxC,QAAA,YAAY,CAAC,uBAAb,CAAqC,KAAK,sBAAL,CAA4B,gBAA5B,EAArC;AACD,OAFD;AAGD,KAJD;;AA9BE,QAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC;AACD;;AAED,UAAM,cAAc,GAAG,UAAU,CAC/B,gBAAgB,KAAK,sBAAL,CAA4B,gBAA5B,EAA8C,OAD/B,CAAjC;;AAGA,QAAI,OAAO,cAAc,CAAC,gBAAtB,KAA2C,UAA/C,EAA2D;AACzD,MAAA,cAAc,CAAC,gBAAf,CAAgC,QAAhC,EAA0C,KAAK,kBAA/C;AACA,WAAK,cAAL,GAAsB,cAAtB;AACD,KAHD,MAGO,IAAI,OAAO,cAAc,CAAC,WAAtB,KAAsC,UAA1C,EAAsD;AAC3D,MAAA,cAAc,CAAC,WAAf,CAA2B,KAAK,kBAAhC;AACA,WAAK,cAAL,GAAsB,cAAtB;AACD,KAHM,MAGA;AACL,MAAA,MAAM,CAAC,IAAP,CAAY,yCAAZ;AACD;AACF;;AAEK,EAAA,OAAO,GAAA;;AACX,UAAI,KAAK,cAAT,EAAyB;AACvB,YAAI,OAAO,KAAK,cAAL,CAAoB,gBAA3B,KAAgD,UAApD,EAAgE;AAC9D,eAAK,cAAL,CAAoB,mBAApB,CAAwC,QAAxC,EAAkD,KAAK,kBAAvD;AACD,SAFD,MAEO;AACL,eAAK,cAAL,CAAoB,cAApB,CAAmC,KAAK,kBAAxC;AACD;AACF;;AACD,aAAO,KAAK,kBAAZ;AACA,WAAK,aAAL,CAAmB,KAAnB;AACD,K;AAAA;;AAQD,EAAA,gBAAgB,CAAC,QAAD,EAAmC;AACjD,SAAK,aAAL,CAAmB,GAAnB,CAAuB,QAAvB;AACA,IAAA,QAAQ,CAAC,uBAAT,CAAiC,KAAK,sBAAL,CAA4B,gBAA5B,EAAjC;AACD;;AAED,EAAA,cAAc,CAAC,QAAD,EAAmC;AAC/C,SAAK,aAAL,CAAmB,MAAnB,CAA0B,QAA1B;AACD;;AAjDgD;;AAAnD,OAAA,CAAA,OAAA,GAAA,8BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass DefaultDevicePixelRatioMonitor {\n    constructor(devicePixelRatioSource, logger) {\n        this.devicePixelRatioSource = devicePixelRatioSource;\n        this.observerQueue = new Set();\n        this.mediaQueryListener = () => {\n            this.observerQueue.forEach(tileObserver => {\n                tileObserver.devicePixelRatioChanged(this.devicePixelRatioSource.devicePixelRatio());\n            });\n        };\n        if (typeof window === 'undefined') {\n            return;\n        }\n        const mediaQueryList = matchMedia(`(resolution: ${this.devicePixelRatioSource.devicePixelRatio()}dppx)`);\n        if (typeof mediaQueryList.addEventListener === 'function') {\n            mediaQueryList.addEventListener('change', this.mediaQueryListener);\n            this.mediaQueryList = mediaQueryList;\n        }\n        else if (typeof mediaQueryList.addListener === 'function') {\n            mediaQueryList.addListener(this.mediaQueryListener);\n            this.mediaQueryList = mediaQueryList;\n        }\n        else {\n            logger.warn('ignoring DefaultDevicePixelRatioMonitor');\n        }\n    }\n    destroy() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.mediaQueryList) {\n                if (typeof this.mediaQueryList.addEventListener === 'function') {\n                    this.mediaQueryList.removeEventListener('change', this.mediaQueryListener);\n                }\n                else {\n                    this.mediaQueryList.removeListener(this.mediaQueryListener);\n                }\n            }\n            delete this.mediaQueryListener;\n            this.observerQueue.clear();\n        });\n    }\n    registerObserver(observer) {\n        this.observerQueue.add(observer);\n        observer.devicePixelRatioChanged(this.devicePixelRatioSource.devicePixelRatio());\n    }\n    removeObserver(observer) {\n        this.observerQueue.delete(observer);\n    }\n}\nexports.default = DefaultDevicePixelRatioMonitor;\n//# sourceMappingURL=DefaultDevicePixelRatioMonitor.js.map"]},"metadata":{},"sourceType":"script"}