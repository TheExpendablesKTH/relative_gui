{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst VideoTransformDevice_1 = require(\"../devicecontroller/VideoTransformDevice\");\n\nclass DefaultAudioVideoFacade {\n  constructor(audioVideoController, videoTileController, realtimeController, audioMixController, deviceController, contentShareController) {\n    this.audioVideoController = audioVideoController;\n    this.videoTileController = videoTileController;\n    this.realtimeController = realtimeController;\n    this.audioMixController = audioMixController;\n    this.deviceController = deviceController;\n    this.contentShareController = contentShareController;\n  }\n\n  addObserver(observer) {\n    this.audioVideoController.addObserver(observer);\n    this.trace('addObserver');\n  }\n\n  removeObserver(observer) {\n    this.audioVideoController.removeObserver(observer);\n    this.trace('removeObserver');\n  }\n\n  setAudioProfile(audioProfile) {\n    this.trace('setAudioProfile', audioProfile);\n    this.audioVideoController.setAudioProfile(audioProfile);\n  }\n\n  start() {\n    this.audioVideoController.start();\n    this.trace('start');\n  }\n\n  stop() {\n    this.audioVideoController.stop();\n    this.trace('stop');\n  }\n\n  getRTCPeerConnectionStats(selector) {\n    this.trace('getRTCPeerConnectionStats', selector ? selector.id : null);\n    return this.audioVideoController.getRTCPeerConnectionStats(selector);\n  }\n\n  bindAudioElement(element) {\n    const result = this.audioMixController.bindAudioElement(element);\n    this.trace('bindAudioElement', element.id, result);\n    return result;\n  }\n\n  unbindAudioElement() {\n    this.audioMixController.unbindAudioElement();\n    this.trace('unbindAudioElement');\n  }\n\n  bindVideoElement(tileId, videoElement) {\n    this.videoTileController.bindVideoElement(tileId, videoElement);\n    this.trace('bindVideoElement', {\n      tileId: tileId,\n      videoElementId: videoElement.id\n    });\n  }\n\n  unbindVideoElement(tileId) {\n    this.videoTileController.unbindVideoElement(tileId);\n    this.trace('unbindVideoElement', tileId);\n  }\n\n  startLocalVideoTile() {\n    const result = this.videoTileController.startLocalVideoTile();\n    this.trace('startLocalVideoTile', null, result);\n    return result;\n  }\n\n  stopLocalVideoTile() {\n    this.videoTileController.stopLocalVideoTile();\n    this.trace('stopLocalVideoTile');\n  }\n\n  hasStartedLocalVideoTile() {\n    const result = this.videoTileController.hasStartedLocalVideoTile();\n    this.trace('hasStartedLocalVideoTile', null, result);\n    return result;\n  }\n\n  removeLocalVideoTile() {\n    this.videoTileController.removeLocalVideoTile();\n    this.trace('removeLocalVideoTile');\n  }\n\n  getLocalVideoTile() {\n    const result = this.videoTileController.getLocalVideoTile();\n    this.trace('getLocalVideoTile');\n    return result;\n  }\n\n  pauseVideoTile(tileId) {\n    this.videoTileController.pauseVideoTile(tileId);\n    this.trace('pauseVideoTile', tileId);\n  }\n\n  unpauseVideoTile(tileId) {\n    this.videoTileController.unpauseVideoTile(tileId);\n    this.trace('unpauseVideoTile', tileId);\n  }\n\n  getVideoTile(tileId) {\n    const result = this.videoTileController.getVideoTile(tileId);\n    this.trace('getVideoTile', tileId);\n    return result;\n  }\n\n  getAllRemoteVideoTiles() {\n    const result = this.videoTileController.getAllRemoteVideoTiles();\n    this.trace('getAllRemoteVideoTiles');\n    return result;\n  }\n\n  getAllVideoTiles() {\n    const result = this.videoTileController.getAllVideoTiles();\n    this.trace('getAllVideoTiles');\n    return result;\n  }\n\n  addVideoTile() {\n    const result = this.videoTileController.addVideoTile();\n    this.trace('addVideoTile', null, result.state());\n    return result;\n  }\n\n  removeVideoTile(tileId) {\n    this.videoTileController.removeVideoTile(tileId);\n    this.trace('removeVideoTile', tileId);\n  }\n\n  removeVideoTilesByAttendeeId(attendeeId) {\n    const result = this.videoTileController.removeVideoTilesByAttendeeId(attendeeId);\n    this.trace('removeVideoTilesByAttendeeId', attendeeId, result);\n    return result;\n  }\n\n  removeAllVideoTiles() {\n    this.videoTileController.removeAllVideoTiles();\n    this.trace('removeAllVideoTiles');\n  }\n\n  captureVideoTile(tileId) {\n    const result = this.videoTileController.captureVideoTile(tileId);\n    this.trace('captureVideoTile', tileId);\n    return result;\n  }\n\n  realtimeSubscribeToAttendeeIdPresence(callback) {\n    this.realtimeController.realtimeSubscribeToAttendeeIdPresence(callback);\n    this.trace('realtimeSubscribeToAttendeeIdPresence');\n  }\n\n  realtimeUnsubscribeToAttendeeIdPresence(callback) {\n    this.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(callback);\n    this.trace('realtimeUnsubscribeToAttendeeIdPresence');\n  }\n\n  realtimeSetCanUnmuteLocalAudio(canUnmute) {\n    this.realtimeController.realtimeSetCanUnmuteLocalAudio(canUnmute);\n    this.trace('realtimeSetCanUnmuteLocalAudio', canUnmute);\n  }\n\n  realtimeSubscribeToSetCanUnmuteLocalAudio(callback) {\n    this.realtimeController.realtimeSubscribeToSetCanUnmuteLocalAudio(callback);\n    this.trace('realtimeSubscribeToSetCanUnmuteLocalAudio');\n  }\n\n  realtimeUnsubscribeToSetCanUnmuteLocalAudio(callback) {\n    this.realtimeController.realtimeUnsubscribeToSetCanUnmuteLocalAudio(callback);\n  }\n\n  realtimeCanUnmuteLocalAudio() {\n    const result = this.realtimeController.realtimeCanUnmuteLocalAudio();\n    this.trace('realtimeCanUnmuteLocalAudio', null, result);\n    return result;\n  }\n\n  realtimeMuteLocalAudio() {\n    this.realtimeController.realtimeMuteLocalAudio();\n    this.trace('realtimeMuteLocalAudio');\n  }\n\n  realtimeUnmuteLocalAudio() {\n    const result = this.realtimeController.realtimeUnmuteLocalAudio();\n    this.trace('realtimeUnmuteLocalAudio');\n    return result;\n  }\n\n  realtimeSubscribeToMuteAndUnmuteLocalAudio(callback) {\n    this.realtimeController.realtimeSubscribeToMuteAndUnmuteLocalAudio(callback);\n    this.trace('realtimeSubscribeToMuteAndUnmuteLocalAudio');\n  }\n\n  realtimeUnsubscribeToMuteAndUnmuteLocalAudio(callback) {\n    this.realtimeController.realtimeUnsubscribeToMuteAndUnmuteLocalAudio(callback);\n  }\n\n  realtimeIsLocalAudioMuted() {\n    const result = this.realtimeController.realtimeIsLocalAudioMuted();\n    this.trace('realtimeIsLocalAudioMuted');\n    return result;\n  }\n\n  realtimeSubscribeToVolumeIndicator(attendeeId, callback) {\n    this.realtimeController.realtimeSubscribeToVolumeIndicator(attendeeId, callback);\n    this.trace('realtimeSubscribeToVolumeIndicator', attendeeId);\n  }\n\n  realtimeUnsubscribeFromVolumeIndicator(attendeeId, callback) {\n    this.realtimeController.realtimeUnsubscribeFromVolumeIndicator(attendeeId, callback);\n    this.trace('realtimeUnsubscribeFromVolumeIndicator', attendeeId, callback);\n  }\n\n  realtimeSubscribeToLocalSignalStrengthChange(callback) {\n    this.realtimeController.realtimeSubscribeToLocalSignalStrengthChange(callback);\n    this.trace('realtimeSubscribeToLocalSignalStrengthChange');\n  }\n\n  realtimeUnsubscribeToLocalSignalStrengthChange(callback) {\n    this.realtimeController.realtimeUnsubscribeToLocalSignalStrengthChange(callback);\n    this.trace('realtimeUnsubscribeToLocalSignalStrengthChange');\n  }\n\n  realtimeSendDataMessage(topic, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data, lifetimeMs) {\n    this.realtimeController.realtimeSendDataMessage(topic, data, lifetimeMs);\n    this.trace('realtimeSendDataMessage');\n  }\n\n  realtimeSubscribeToReceiveDataMessage(topic, callback) {\n    this.realtimeController.realtimeSubscribeToReceiveDataMessage(topic, callback);\n    this.trace('realtimeSubscribeToReceiveDataMessage');\n  }\n\n  realtimeUnsubscribeFromReceiveDataMessage(topic) {\n    this.realtimeController.realtimeUnsubscribeFromReceiveDataMessage(topic);\n    this.trace('realtimeUnsubscribeFromReceiveDataMessage');\n  }\n\n  realtimeSubscribeToFatalError(callback) {\n    this.realtimeController.realtimeSubscribeToFatalError(callback);\n  }\n\n  realtimeUnsubscribeToFatalError(callback) {\n    this.realtimeController.realtimeUnsubscribeToFatalError(callback);\n  }\n\n  subscribeToActiveSpeakerDetector(policy, callback, scoresCallback, scoresCallbackIntervalMs) {\n    this.audioVideoController.activeSpeakerDetector.subscribe(policy, callback, scoresCallback, scoresCallbackIntervalMs);\n    this.trace('subscribeToActiveSpeakerDetector');\n  }\n\n  unsubscribeFromActiveSpeakerDetector(callback) {\n    this.audioVideoController.activeSpeakerDetector.unsubscribe(callback);\n    this.trace('unsubscribeFromActiveSpeakerDetector');\n  }\n\n  listAudioInputDevices() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.deviceController.listAudioInputDevices();\n      this.trace('listAudioInputDevices', null, result);\n      return result;\n    });\n  }\n\n  listVideoInputDevices() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.deviceController.listVideoInputDevices();\n      this.trace('listVideoInputDevices', null, result);\n      return result;\n    });\n  }\n\n  listAudioOutputDevices() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.deviceController.listAudioOutputDevices();\n      this.trace('listAudioOutputDevices', null, result);\n      return result;\n    });\n  }\n\n  chooseAudioInputDevice(device) {\n    this.trace('chooseAudioInputDevice', device);\n    return this.deviceController.chooseAudioInputDevice(device);\n  }\n\n  chooseVideoInputDevice(device) {\n    if (VideoTransformDevice_1.isVideoTransformDevice(device)) {\n      // Don't stringify the device to avoid failures when cyclic object references are present.\n      this.trace('chooseVideoInputDevice with transform device');\n    } else {\n      this.trace('chooseVideoInputDevice', device);\n    }\n\n    return this.deviceController.chooseVideoInputDevice(device);\n  }\n\n  chooseAudioOutputDevice(deviceId) {\n    const result = this.deviceController.chooseAudioOutputDevice(deviceId);\n    this.trace('chooseAudioOutputDevice', deviceId);\n    return result;\n  }\n\n  addDeviceChangeObserver(observer) {\n    this.deviceController.addDeviceChangeObserver(observer);\n    this.trace('addDeviceChangeObserver');\n  }\n\n  removeDeviceChangeObserver(observer) {\n    this.deviceController.removeDeviceChangeObserver(observer);\n    this.trace('removeDeviceChangeObserver');\n  }\n\n  createAnalyserNodeForAudioInput() {\n    const result = this.deviceController.createAnalyserNodeForAudioInput();\n    this.trace('createAnalyserNodeForAudioInput');\n    return result;\n  }\n\n  startVideoPreviewForVideoInput(element) {\n    this.deviceController.startVideoPreviewForVideoInput(element);\n    this.trace('startVideoPreviewForVideoInput', element.id);\n  }\n\n  stopVideoPreviewForVideoInput(element) {\n    this.deviceController.stopVideoPreviewForVideoInput(element);\n    this.trace('stopVideoPreviewForVideoInput', element.id);\n  }\n\n  setDeviceLabelTrigger(trigger) {\n    this.deviceController.setDeviceLabelTrigger(trigger);\n    this.trace('setDeviceLabelTrigger');\n  }\n\n  mixIntoAudioInput(stream) {\n    const result = this.deviceController.mixIntoAudioInput(stream);\n    this.trace('mixIntoAudioInput', stream.id);\n    return result;\n  }\n\n  chooseVideoInputQuality(width, height, frameRate, maxBandwidthKbps) {\n    this.deviceController.chooseVideoInputQuality(width, height, frameRate, maxBandwidthKbps);\n    this.trace('chooseVideoInputQuality', {\n      width: width,\n      height: height,\n      frameRate: frameRate,\n      maxBandwidthKbps: maxBandwidthKbps\n    });\n  }\n\n  getVideoInputQualitySettings() {\n    const result = this.deviceController.getVideoInputQualitySettings();\n    this.trace('getVideoInputQualitySettings');\n    return result;\n  }\n\n  setContentAudioProfile(audioProfile) {\n    this.trace('setContentAudioProfile', audioProfile);\n    this.contentShareController.setContentAudioProfile(audioProfile);\n  }\n\n  startContentShare(stream) {\n    const result = this.contentShareController.startContentShare(stream);\n    this.trace('startContentShare');\n    return result;\n  }\n\n  startContentShareFromScreenCapture(sourceId, frameRate) {\n    const result = this.contentShareController.startContentShareFromScreenCapture(sourceId, frameRate);\n    this.trace('startContentShareFromScreenCapture');\n    return result;\n  }\n\n  pauseContentShare() {\n    this.contentShareController.pauseContentShare();\n    this.trace('pauseContentShare');\n  }\n\n  unpauseContentShare() {\n    this.contentShareController.unpauseContentShare();\n    this.trace('unpauseContentShare');\n  }\n\n  stopContentShare() {\n    this.contentShareController.stopContentShare();\n    this.trace('stopContentShare');\n  }\n\n  addContentShareObserver(observer) {\n    this.contentShareController.addContentShareObserver(observer);\n    this.trace('addContentShareObserver');\n  }\n\n  removeContentShareObserver(observer) {\n    this.contentShareController.removeContentShareObserver(observer);\n    this.trace('removeContentShareObserver');\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  trace(name, input, output) {\n    const meetingId = this.audioVideoController.configuration.meetingId;\n    const attendeeId = this.audioVideoController.configuration.credentials.attendeeId;\n    let s = `API/DefaultAudioVideoFacade/${meetingId}/${attendeeId}/${name}`;\n\n    if (typeof input !== 'undefined') {\n      s += ` ${JSON.stringify(input)}`;\n    }\n\n    if (typeof output !== 'undefined') {\n      s += ` -> ${JSON.stringify(output)}`;\n    }\n\n    this.audioVideoController.logger.info(s);\n  }\n\n  getRemoteVideoSources() {\n    const result = this.audioVideoController.getRemoteVideoSources();\n    this.trace('getRemoteVideoSources', null, result);\n    return result;\n  }\n\n}\n\nexports.default = DefaultAudioVideoFacade;","map":{"version":3,"sources":["../../src/audiovideofacade/DefaultAudioVideoFacade.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst VideoTransformDevice_1 = require(\"../devicecontroller/VideoTransformDevice\");\nclass DefaultAudioVideoFacade {\n    constructor(audioVideoController, videoTileController, realtimeController, audioMixController, deviceController, contentShareController) {\n        this.audioVideoController = audioVideoController;\n        this.videoTileController = videoTileController;\n        this.realtimeController = realtimeController;\n        this.audioMixController = audioMixController;\n        this.deviceController = deviceController;\n        this.contentShareController = contentShareController;\n    }\n    addObserver(observer) {\n        this.audioVideoController.addObserver(observer);\n        this.trace('addObserver');\n    }\n    removeObserver(observer) {\n        this.audioVideoController.removeObserver(observer);\n        this.trace('removeObserver');\n    }\n    setAudioProfile(audioProfile) {\n        this.trace('setAudioProfile', audioProfile);\n        this.audioVideoController.setAudioProfile(audioProfile);\n    }\n    start() {\n        this.audioVideoController.start();\n        this.trace('start');\n    }\n    stop() {\n        this.audioVideoController.stop();\n        this.trace('stop');\n    }\n    getRTCPeerConnectionStats(selector) {\n        this.trace('getRTCPeerConnectionStats', selector ? selector.id : null);\n        return this.audioVideoController.getRTCPeerConnectionStats(selector);\n    }\n    bindAudioElement(element) {\n        const result = this.audioMixController.bindAudioElement(element);\n        this.trace('bindAudioElement', element.id, result);\n        return result;\n    }\n    unbindAudioElement() {\n        this.audioMixController.unbindAudioElement();\n        this.trace('unbindAudioElement');\n    }\n    bindVideoElement(tileId, videoElement) {\n        this.videoTileController.bindVideoElement(tileId, videoElement);\n        this.trace('bindVideoElement', { tileId: tileId, videoElementId: videoElement.id });\n    }\n    unbindVideoElement(tileId) {\n        this.videoTileController.unbindVideoElement(tileId);\n        this.trace('unbindVideoElement', tileId);\n    }\n    startLocalVideoTile() {\n        const result = this.videoTileController.startLocalVideoTile();\n        this.trace('startLocalVideoTile', null, result);\n        return result;\n    }\n    stopLocalVideoTile() {\n        this.videoTileController.stopLocalVideoTile();\n        this.trace('stopLocalVideoTile');\n    }\n    hasStartedLocalVideoTile() {\n        const result = this.videoTileController.hasStartedLocalVideoTile();\n        this.trace('hasStartedLocalVideoTile', null, result);\n        return result;\n    }\n    removeLocalVideoTile() {\n        this.videoTileController.removeLocalVideoTile();\n        this.trace('removeLocalVideoTile');\n    }\n    getLocalVideoTile() {\n        const result = this.videoTileController.getLocalVideoTile();\n        this.trace('getLocalVideoTile');\n        return result;\n    }\n    pauseVideoTile(tileId) {\n        this.videoTileController.pauseVideoTile(tileId);\n        this.trace('pauseVideoTile', tileId);\n    }\n    unpauseVideoTile(tileId) {\n        this.videoTileController.unpauseVideoTile(tileId);\n        this.trace('unpauseVideoTile', tileId);\n    }\n    getVideoTile(tileId) {\n        const result = this.videoTileController.getVideoTile(tileId);\n        this.trace('getVideoTile', tileId);\n        return result;\n    }\n    getAllRemoteVideoTiles() {\n        const result = this.videoTileController.getAllRemoteVideoTiles();\n        this.trace('getAllRemoteVideoTiles');\n        return result;\n    }\n    getAllVideoTiles() {\n        const result = this.videoTileController.getAllVideoTiles();\n        this.trace('getAllVideoTiles');\n        return result;\n    }\n    addVideoTile() {\n        const result = this.videoTileController.addVideoTile();\n        this.trace('addVideoTile', null, result.state());\n        return result;\n    }\n    removeVideoTile(tileId) {\n        this.videoTileController.removeVideoTile(tileId);\n        this.trace('removeVideoTile', tileId);\n    }\n    removeVideoTilesByAttendeeId(attendeeId) {\n        const result = this.videoTileController.removeVideoTilesByAttendeeId(attendeeId);\n        this.trace('removeVideoTilesByAttendeeId', attendeeId, result);\n        return result;\n    }\n    removeAllVideoTiles() {\n        this.videoTileController.removeAllVideoTiles();\n        this.trace('removeAllVideoTiles');\n    }\n    captureVideoTile(tileId) {\n        const result = this.videoTileController.captureVideoTile(tileId);\n        this.trace('captureVideoTile', tileId);\n        return result;\n    }\n    realtimeSubscribeToAttendeeIdPresence(callback) {\n        this.realtimeController.realtimeSubscribeToAttendeeIdPresence(callback);\n        this.trace('realtimeSubscribeToAttendeeIdPresence');\n    }\n    realtimeUnsubscribeToAttendeeIdPresence(callback) {\n        this.realtimeController.realtimeUnsubscribeToAttendeeIdPresence(callback);\n        this.trace('realtimeUnsubscribeToAttendeeIdPresence');\n    }\n    realtimeSetCanUnmuteLocalAudio(canUnmute) {\n        this.realtimeController.realtimeSetCanUnmuteLocalAudio(canUnmute);\n        this.trace('realtimeSetCanUnmuteLocalAudio', canUnmute);\n    }\n    realtimeSubscribeToSetCanUnmuteLocalAudio(callback) {\n        this.realtimeController.realtimeSubscribeToSetCanUnmuteLocalAudio(callback);\n        this.trace('realtimeSubscribeToSetCanUnmuteLocalAudio');\n    }\n    realtimeUnsubscribeToSetCanUnmuteLocalAudio(callback) {\n        this.realtimeController.realtimeUnsubscribeToSetCanUnmuteLocalAudio(callback);\n    }\n    realtimeCanUnmuteLocalAudio() {\n        const result = this.realtimeController.realtimeCanUnmuteLocalAudio();\n        this.trace('realtimeCanUnmuteLocalAudio', null, result);\n        return result;\n    }\n    realtimeMuteLocalAudio() {\n        this.realtimeController.realtimeMuteLocalAudio();\n        this.trace('realtimeMuteLocalAudio');\n    }\n    realtimeUnmuteLocalAudio() {\n        const result = this.realtimeController.realtimeUnmuteLocalAudio();\n        this.trace('realtimeUnmuteLocalAudio');\n        return result;\n    }\n    realtimeSubscribeToMuteAndUnmuteLocalAudio(callback) {\n        this.realtimeController.realtimeSubscribeToMuteAndUnmuteLocalAudio(callback);\n        this.trace('realtimeSubscribeToMuteAndUnmuteLocalAudio');\n    }\n    realtimeUnsubscribeToMuteAndUnmuteLocalAudio(callback) {\n        this.realtimeController.realtimeUnsubscribeToMuteAndUnmuteLocalAudio(callback);\n    }\n    realtimeIsLocalAudioMuted() {\n        const result = this.realtimeController.realtimeIsLocalAudioMuted();\n        this.trace('realtimeIsLocalAudioMuted');\n        return result;\n    }\n    realtimeSubscribeToVolumeIndicator(attendeeId, callback) {\n        this.realtimeController.realtimeSubscribeToVolumeIndicator(attendeeId, callback);\n        this.trace('realtimeSubscribeToVolumeIndicator', attendeeId);\n    }\n    realtimeUnsubscribeFromVolumeIndicator(attendeeId, callback) {\n        this.realtimeController.realtimeUnsubscribeFromVolumeIndicator(attendeeId, callback);\n        this.trace('realtimeUnsubscribeFromVolumeIndicator', attendeeId, callback);\n    }\n    realtimeSubscribeToLocalSignalStrengthChange(callback) {\n        this.realtimeController.realtimeSubscribeToLocalSignalStrengthChange(callback);\n        this.trace('realtimeSubscribeToLocalSignalStrengthChange');\n    }\n    realtimeUnsubscribeToLocalSignalStrengthChange(callback) {\n        this.realtimeController.realtimeUnsubscribeToLocalSignalStrengthChange(callback);\n        this.trace('realtimeUnsubscribeToLocalSignalStrengthChange');\n    }\n    realtimeSendDataMessage(topic, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data, lifetimeMs) {\n        this.realtimeController.realtimeSendDataMessage(topic, data, lifetimeMs);\n        this.trace('realtimeSendDataMessage');\n    }\n    realtimeSubscribeToReceiveDataMessage(topic, callback) {\n        this.realtimeController.realtimeSubscribeToReceiveDataMessage(topic, callback);\n        this.trace('realtimeSubscribeToReceiveDataMessage');\n    }\n    realtimeUnsubscribeFromReceiveDataMessage(topic) {\n        this.realtimeController.realtimeUnsubscribeFromReceiveDataMessage(topic);\n        this.trace('realtimeUnsubscribeFromReceiveDataMessage');\n    }\n    realtimeSubscribeToFatalError(callback) {\n        this.realtimeController.realtimeSubscribeToFatalError(callback);\n    }\n    realtimeUnsubscribeToFatalError(callback) {\n        this.realtimeController.realtimeUnsubscribeToFatalError(callback);\n    }\n    subscribeToActiveSpeakerDetector(policy, callback, scoresCallback, scoresCallbackIntervalMs) {\n        this.audioVideoController.activeSpeakerDetector.subscribe(policy, callback, scoresCallback, scoresCallbackIntervalMs);\n        this.trace('subscribeToActiveSpeakerDetector');\n    }\n    unsubscribeFromActiveSpeakerDetector(callback) {\n        this.audioVideoController.activeSpeakerDetector.unsubscribe(callback);\n        this.trace('unsubscribeFromActiveSpeakerDetector');\n    }\n    listAudioInputDevices() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.deviceController.listAudioInputDevices();\n            this.trace('listAudioInputDevices', null, result);\n            return result;\n        });\n    }\n    listVideoInputDevices() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.deviceController.listVideoInputDevices();\n            this.trace('listVideoInputDevices', null, result);\n            return result;\n        });\n    }\n    listAudioOutputDevices() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.deviceController.listAudioOutputDevices();\n            this.trace('listAudioOutputDevices', null, result);\n            return result;\n        });\n    }\n    chooseAudioInputDevice(device) {\n        this.trace('chooseAudioInputDevice', device);\n        return this.deviceController.chooseAudioInputDevice(device);\n    }\n    chooseVideoInputDevice(device) {\n        if (VideoTransformDevice_1.isVideoTransformDevice(device)) {\n            // Don't stringify the device to avoid failures when cyclic object references are present.\n            this.trace('chooseVideoInputDevice with transform device');\n        }\n        else {\n            this.trace('chooseVideoInputDevice', device);\n        }\n        return this.deviceController.chooseVideoInputDevice(device);\n    }\n    chooseAudioOutputDevice(deviceId) {\n        const result = this.deviceController.chooseAudioOutputDevice(deviceId);\n        this.trace('chooseAudioOutputDevice', deviceId);\n        return result;\n    }\n    addDeviceChangeObserver(observer) {\n        this.deviceController.addDeviceChangeObserver(observer);\n        this.trace('addDeviceChangeObserver');\n    }\n    removeDeviceChangeObserver(observer) {\n        this.deviceController.removeDeviceChangeObserver(observer);\n        this.trace('removeDeviceChangeObserver');\n    }\n    createAnalyserNodeForAudioInput() {\n        const result = this.deviceController.createAnalyserNodeForAudioInput();\n        this.trace('createAnalyserNodeForAudioInput');\n        return result;\n    }\n    startVideoPreviewForVideoInput(element) {\n        this.deviceController.startVideoPreviewForVideoInput(element);\n        this.trace('startVideoPreviewForVideoInput', element.id);\n    }\n    stopVideoPreviewForVideoInput(element) {\n        this.deviceController.stopVideoPreviewForVideoInput(element);\n        this.trace('stopVideoPreviewForVideoInput', element.id);\n    }\n    setDeviceLabelTrigger(trigger) {\n        this.deviceController.setDeviceLabelTrigger(trigger);\n        this.trace('setDeviceLabelTrigger');\n    }\n    mixIntoAudioInput(stream) {\n        const result = this.deviceController.mixIntoAudioInput(stream);\n        this.trace('mixIntoAudioInput', stream.id);\n        return result;\n    }\n    chooseVideoInputQuality(width, height, frameRate, maxBandwidthKbps) {\n        this.deviceController.chooseVideoInputQuality(width, height, frameRate, maxBandwidthKbps);\n        this.trace('chooseVideoInputQuality', {\n            width: width,\n            height: height,\n            frameRate: frameRate,\n            maxBandwidthKbps: maxBandwidthKbps,\n        });\n    }\n    getVideoInputQualitySettings() {\n        const result = this.deviceController.getVideoInputQualitySettings();\n        this.trace('getVideoInputQualitySettings');\n        return result;\n    }\n    setContentAudioProfile(audioProfile) {\n        this.trace('setContentAudioProfile', audioProfile);\n        this.contentShareController.setContentAudioProfile(audioProfile);\n    }\n    startContentShare(stream) {\n        const result = this.contentShareController.startContentShare(stream);\n        this.trace('startContentShare');\n        return result;\n    }\n    startContentShareFromScreenCapture(sourceId, frameRate) {\n        const result = this.contentShareController.startContentShareFromScreenCapture(sourceId, frameRate);\n        this.trace('startContentShareFromScreenCapture');\n        return result;\n    }\n    pauseContentShare() {\n        this.contentShareController.pauseContentShare();\n        this.trace('pauseContentShare');\n    }\n    unpauseContentShare() {\n        this.contentShareController.unpauseContentShare();\n        this.trace('unpauseContentShare');\n    }\n    stopContentShare() {\n        this.contentShareController.stopContentShare();\n        this.trace('stopContentShare');\n    }\n    addContentShareObserver(observer) {\n        this.contentShareController.addContentShareObserver(observer);\n        this.trace('addContentShareObserver');\n    }\n    removeContentShareObserver(observer) {\n        this.contentShareController.removeContentShareObserver(observer);\n        this.trace('removeContentShareObserver');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    trace(name, input, output) {\n        const meetingId = this.audioVideoController.configuration.meetingId;\n        const attendeeId = this.audioVideoController.configuration.credentials.attendeeId;\n        let s = `API/DefaultAudioVideoFacade/${meetingId}/${attendeeId}/${name}`;\n        if (typeof input !== 'undefined') {\n            s += ` ${JSON.stringify(input)}`;\n        }\n        if (typeof output !== 'undefined') {\n            s += ` -> ${JSON.stringify(output)}`;\n        }\n        this.audioVideoController.logger.info(s);\n    }\n    getRemoteVideoSources() {\n        const result = this.audioVideoController.getRemoteVideoSources();\n        this.trace('getRemoteVideoSources', null, result);\n        return result;\n    }\n}\nexports.default = DefaultAudioVideoFacade;\n//# sourceMappingURL=DefaultAudioVideoFacade.js.map"]},"metadata":{},"sourceType":"script"}