{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst DefaultBrowserBehavior_1 = require(\"../browserbehavior/DefaultBrowserBehavior\");\n\nconst DefaultDeviceController_1 = require(\"../devicecontroller/DefaultDeviceController\");\n\nclass ContentShareMediaStreamBroker {\n  constructor(logger) {\n    this.logger = logger;\n  }\n\n  get mediaStream() {\n    return this._mediaStream;\n  }\n\n  set mediaStream(mediaStream) {\n    this._mediaStream = mediaStream;\n  }\n\n  acquireAudioInputStream() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._mediaStream.getAudioTracks().length === 0) {\n        return DefaultDeviceController_1.default.synthesizeAudioDevice(0);\n      }\n\n      return this._mediaStream;\n    });\n  }\n\n  acquireVideoInputStream() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._mediaStream;\n    });\n  }\n\n  releaseMediaStream(_mediaStreamToRelease) {\n    this.logger.warn('release media stream called');\n    return;\n  }\n\n  acquireDisplayInputStream(streamConstraints) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (streamConstraints && streamConstraints.video && // @ts-ignore\n      streamConstraints.video.mandatory && // @ts-ignore\n      streamConstraints.video.mandatory.chromeMediaSource && // @ts-ignore\n      streamConstraints.video.mandatory.chromeMediaSourceId) {\n        return navigator.mediaDevices.getUserMedia(streamConstraints);\n      } // @ts-ignore https://github.com/microsoft/TypeScript/issues/31821\n\n\n      return navigator.mediaDevices.getDisplayMedia(streamConstraints);\n    });\n  }\n\n  bindToAudioVideoController(_audioVideoController) {\n    throw new Error('unsupported');\n  }\n\n  acquireScreenCaptureDisplayInputStream(sourceId, frameRate) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.acquireDisplayInputStream(this.screenCaptureDisplayMediaConstraints(sourceId, frameRate));\n    });\n  }\n\n  screenCaptureDisplayMediaConstraints(sourceId, frameRate) {\n    return {\n      audio: !sourceId && new DefaultBrowserBehavior_1.default().getDisplayMediaAudioCaptureSupport() ? true : false,\n      video: Object.assign(Object.assign({}, !sourceId && {\n        frameRate: {\n          max: frameRate ? frameRate : ContentShareMediaStreamBroker.defaultFrameRate\n        }\n      }), sourceId && {\n        mandatory: {\n          chromeMediaSource: 'desktop',\n          chromeMediaSourceId: sourceId,\n          maxFrameRate: frameRate ? frameRate : ContentShareMediaStreamBroker.defaultFrameRate\n        }\n      })\n    };\n  }\n\n  toggleMediaStream(enable) {\n    let changed = false;\n\n    if (this.mediaStream) {\n      for (let i = 0; i < this.mediaStream.getTracks().length; i++) {\n        if (this.mediaStream.getTracks()[i].enabled !== enable) {\n          this.mediaStream.getTracks()[i].enabled = enable;\n          changed = true;\n        }\n      }\n    }\n\n    return changed;\n  }\n\n  cleanup() {\n    if (this.mediaStream) {\n      for (let i = 0; i < this.mediaStream.getTracks().length; i++) {\n        const track = this.mediaStream.getTracks()[i];\n        track.stop();\n      }\n    }\n\n    this.mediaStream = null;\n  }\n\n}\n\nexports.default = ContentShareMediaStreamBroker;\nContentShareMediaStreamBroker.defaultFrameRate = 15;","map":{"version":3,"sources":["../../src/contentsharecontroller/ContentShareMediaStreamBroker.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst DefaultBrowserBehavior_1 = require(\"../browserbehavior/DefaultBrowserBehavior\");\nconst DefaultDeviceController_1 = require(\"../devicecontroller/DefaultDeviceController\");\nclass ContentShareMediaStreamBroker {\n    constructor(logger) {\n        this.logger = logger;\n    }\n    get mediaStream() {\n        return this._mediaStream;\n    }\n    set mediaStream(mediaStream) {\n        this._mediaStream = mediaStream;\n    }\n    acquireAudioInputStream() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._mediaStream.getAudioTracks().length === 0) {\n                return DefaultDeviceController_1.default.synthesizeAudioDevice(0);\n            }\n            return this._mediaStream;\n        });\n    }\n    acquireVideoInputStream() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._mediaStream;\n        });\n    }\n    releaseMediaStream(_mediaStreamToRelease) {\n        this.logger.warn('release media stream called');\n        return;\n    }\n    acquireDisplayInputStream(streamConstraints) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (streamConstraints &&\n                streamConstraints.video &&\n                // @ts-ignore\n                streamConstraints.video.mandatory &&\n                // @ts-ignore\n                streamConstraints.video.mandatory.chromeMediaSource &&\n                // @ts-ignore\n                streamConstraints.video.mandatory.chromeMediaSourceId) {\n                return navigator.mediaDevices.getUserMedia(streamConstraints);\n            }\n            // @ts-ignore https://github.com/microsoft/TypeScript/issues/31821\n            return navigator.mediaDevices.getDisplayMedia(streamConstraints);\n        });\n    }\n    bindToAudioVideoController(_audioVideoController) {\n        throw new Error('unsupported');\n    }\n    acquireScreenCaptureDisplayInputStream(sourceId, frameRate) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.acquireDisplayInputStream(this.screenCaptureDisplayMediaConstraints(sourceId, frameRate));\n        });\n    }\n    screenCaptureDisplayMediaConstraints(sourceId, frameRate) {\n        return {\n            audio: !sourceId && new DefaultBrowserBehavior_1.default().getDisplayMediaAudioCaptureSupport()\n                ? true\n                : false,\n            video: Object.assign(Object.assign({}, (!sourceId && {\n                frameRate: {\n                    max: frameRate ? frameRate : ContentShareMediaStreamBroker.defaultFrameRate,\n                },\n            })), (sourceId && {\n                mandatory: {\n                    chromeMediaSource: 'desktop',\n                    chromeMediaSourceId: sourceId,\n                    maxFrameRate: frameRate ? frameRate : ContentShareMediaStreamBroker.defaultFrameRate,\n                },\n            })),\n        };\n    }\n    toggleMediaStream(enable) {\n        let changed = false;\n        if (this.mediaStream) {\n            for (let i = 0; i < this.mediaStream.getTracks().length; i++) {\n                if (this.mediaStream.getTracks()[i].enabled !== enable) {\n                    this.mediaStream.getTracks()[i].enabled = enable;\n                    changed = true;\n                }\n            }\n        }\n        return changed;\n    }\n    cleanup() {\n        if (this.mediaStream) {\n            for (let i = 0; i < this.mediaStream.getTracks().length; i++) {\n                const track = this.mediaStream.getTracks()[i];\n                track.stop();\n            }\n        }\n        this.mediaStream = null;\n    }\n}\nexports.default = ContentShareMediaStreamBroker;\nContentShareMediaStreamBroker.defaultFrameRate = 15;\n//# sourceMappingURL=ContentShareMediaStreamBroker.js.map"]},"metadata":{},"sourceType":"script"}