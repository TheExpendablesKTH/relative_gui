{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadWorker = void 0;\n\nconst fetch_js_1 = require(\"./fetch.js\");\n\nconst WORKER_FETCH_OPTIONS = {\n  method: 'GET',\n  mode: 'cors',\n  credentials: 'omit',\n  redirect: 'follow',\n  referrerPolicy: 'no-referrer'\n};\n\nconst loadWorker = (workerURL, name, fetchBehavior, logger) => {\n  logger === null || logger === void 0 ? void 0 : logger.debug(`Loading ${name} worker from ${workerURL}.`);\n  let workerURLIsSameOrigin = false;\n\n  try {\n    workerURLIsSameOrigin = self.origin === new URL(workerURL).origin;\n  } catch (e) {\n    logger === null || logger === void 0 ? void 0 : logger.error('Could not compare origins.', e);\n  }\n\n  if (workerURLIsSameOrigin) {\n    const workerURLWithQuery = fetch_js_1.withQueryString(workerURL, fetchBehavior);\n    return Promise.resolve(new Worker(workerURLWithQuery, {\n      name\n    }));\n  }\n\n  return fetch_js_1.fetchWithBehavior(workerURL, WORKER_FETCH_OPTIONS, fetchBehavior).then(res => {\n    if (res.ok) {\n      return res.blob().then(blob => new Worker(window.URL.createObjectURL(blob)));\n    }\n\n    throw new Error('Fetch failed.');\n  });\n};\n\nexports.loadWorker = loadWorker;","map":{"version":3,"sources":["/Users/torarvill/Documents/Pip/relative_gui/relative_ui/node_modules/amazon-chime-sdk-js/libs/voicefocus/loader.js"],"names":["Object","defineProperty","exports","value","loadWorker","fetch_js_1","require","WORKER_FETCH_OPTIONS","method","mode","credentials","redirect","referrerPolicy","workerURL","name","fetchBehavior","logger","debug","workerURLIsSameOrigin","self","origin","URL","e","error","workerURLWithQuery","withQueryString","Promise","resolve","Worker","fetchWithBehavior","then","res","ok","blob","window","createObjectURL","Error"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMC,oBAAoB,GAAG;AACzBC,EAAAA,MAAM,EAAE,KADiB;AAEzBC,EAAAA,IAAI,EAAE,MAFmB;AAGzBC,EAAAA,WAAW,EAAE,MAHY;AAIzBC,EAAAA,QAAQ,EAAE,QAJe;AAKzBC,EAAAA,cAAc,EAAE;AALS,CAA7B;;AAOA,MAAMR,UAAU,GAAG,CAACS,SAAD,EAAYC,IAAZ,EAAkBC,aAAlB,EAAiCC,MAAjC,KAA4C;AAC3DA,EAAAA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACC,KAAP,CAAc,WAAUH,IAAK,gBAAeD,SAAU,GAAtD,CAAhD;AACA,MAAIK,qBAAqB,GAAG,KAA5B;;AACA,MAAI;AACAA,IAAAA,qBAAqB,GAAGC,IAAI,CAACC,MAAL,KAAiB,IAAIC,GAAJ,CAAQR,SAAR,CAAD,CAAqBO,MAA7D;AACH,GAFD,CAGA,OAAOE,CAAP,EAAU;AACNN,IAAAA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACO,KAAP,CAAa,4BAAb,EAA2CD,CAA3C,CAAhD;AACH;;AACD,MAAIJ,qBAAJ,EAA2B;AACvB,UAAMM,kBAAkB,GAAGnB,UAAU,CAACoB,eAAX,CAA2BZ,SAA3B,EAAsCE,aAAtC,CAA3B;AACA,WAAOW,OAAO,CAACC,OAAR,CAAgB,IAAIC,MAAJ,CAAWJ,kBAAX,EAA+B;AAAEV,MAAAA;AAAF,KAA/B,CAAhB,CAAP;AACH;;AACD,SAAOT,UAAU,CAACwB,iBAAX,CAA6BhB,SAA7B,EAAwCN,oBAAxC,EAA8DQ,aAA9D,EAA6Ee,IAA7E,CAAmFC,GAAD,IAAS;AAC9F,QAAIA,GAAG,CAACC,EAAR,EAAY;AACR,aAAOD,GAAG,CAACE,IAAJ,GACFH,IADE,CACIG,IAAD,IAAU,IAAIL,MAAJ,CAAWM,MAAM,CAACb,GAAP,CAAWc,eAAX,CAA2BF,IAA3B,CAAX,CADb,CAAP;AAEH;;AACD,UAAM,IAAIG,KAAJ,CAAU,eAAV,CAAN;AACH,GANM,CAAP;AAOH,CApBD;;AAqBAlC,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadWorker = void 0;\nconst fetch_js_1 = require(\"./fetch.js\");\nconst WORKER_FETCH_OPTIONS = {\n    method: 'GET',\n    mode: 'cors',\n    credentials: 'omit',\n    redirect: 'follow',\n    referrerPolicy: 'no-referrer',\n};\nconst loadWorker = (workerURL, name, fetchBehavior, logger) => {\n    logger === null || logger === void 0 ? void 0 : logger.debug(`Loading ${name} worker from ${workerURL}.`);\n    let workerURLIsSameOrigin = false;\n    try {\n        workerURLIsSameOrigin = self.origin === (new URL(workerURL)).origin;\n    }\n    catch (e) {\n        logger === null || logger === void 0 ? void 0 : logger.error('Could not compare origins.', e);\n    }\n    if (workerURLIsSameOrigin) {\n        const workerURLWithQuery = fetch_js_1.withQueryString(workerURL, fetchBehavior);\n        return Promise.resolve(new Worker(workerURLWithQuery, { name }));\n    }\n    return fetch_js_1.fetchWithBehavior(workerURL, WORKER_FETCH_OPTIONS, fetchBehavior).then((res) => {\n        if (res.ok) {\n            return res.blob()\n                .then((blob) => new Worker(window.URL.createObjectURL(blob)));\n        }\n        throw new Error('Fetch failed.');\n    });\n};\nexports.loadWorker = loadWorker;\n"]},"metadata":{},"sourceType":"script"}