{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst DefaultVideoCaptureAndEncodeParameter_1 = require(\"../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter\");\n/** NScaleVideoUplinkBandwidthPolicy implements capture and encode\n *  parameters that are nearly equivalent to those chosen by the\n *  traditional native clients, except for a modification to\n *  maxBandwidthKbps described below. */\n\n\nclass NScaleVideoUplinkBandwidthPolicy {\n  constructor(selfAttendeeId) {\n    this.selfAttendeeId = selfAttendeeId;\n    this.numParticipants = 0;\n    this.idealMaxBandwidthKbps = 1400;\n    this.hasBandwidthPriority = false;\n    this.optimalParameters = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, false);\n    this.parametersInEffect = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, false);\n  }\n\n  updateConnectionMetric(_metrics) {\n    return;\n  }\n\n  chooseMediaTrackConstraints() {\n    return {};\n  }\n\n  chooseEncodingParameters() {\n    return new Map();\n  }\n\n  updateIndex(videoIndex) {\n    // the +1 for self is assuming that we intend to send video, since\n    // the context here is VideoUplinkBandwidthPolicy\n    this.numParticipants = videoIndex.numberOfVideoPublishingParticipantsExcludingSelf(this.selfAttendeeId) + 1;\n    this.optimalParameters = new DefaultVideoCaptureAndEncodeParameter_1.default(this.captureWidth(), this.captureHeight(), this.captureFrameRate(), this.maxBandwidthKbps(), false);\n  }\n\n  wantsResubscribe() {\n    return !this.parametersInEffect.equal(this.optimalParameters);\n  }\n\n  chooseCaptureAndEncodeParameters() {\n    this.parametersInEffect = this.optimalParameters.clone();\n    return this.parametersInEffect.clone();\n  }\n\n  captureWidth() {\n    let width = 640;\n\n    if (this.numParticipants > 4) {\n      width = 320;\n    }\n\n    return width;\n  }\n\n  captureHeight() {\n    let height = 384;\n\n    if (this.numParticipants > 4) {\n      height = 192;\n    }\n\n    return height;\n  }\n\n  captureFrameRate() {\n    return 15;\n  }\n\n  maxBandwidthKbps() {\n    if (this.hasBandwidthPriority) {\n      return Math.trunc(this.idealMaxBandwidthKbps);\n    }\n\n    let rate = 0;\n\n    if (this.numParticipants <= 2) {\n      rate = this.idealMaxBandwidthKbps;\n    } else if (this.numParticipants <= 4) {\n      rate = this.idealMaxBandwidthKbps * 2 / 3;\n    } else {\n      rate = (544 / 11 + 14880 / (11 * this.numParticipants)) / 600 * this.idealMaxBandwidthKbps;\n    }\n\n    return Math.trunc(rate);\n  }\n\n  setIdealMaxBandwidthKbps(idealMaxBandwidthKbps) {\n    this.idealMaxBandwidthKbps = idealMaxBandwidthKbps;\n  }\n\n  setHasBandwidthPriority(hasBandwidthPriority) {\n    this.hasBandwidthPriority = hasBandwidthPriority;\n  }\n\n}\n\nexports.default = NScaleVideoUplinkBandwidthPolicy;","map":{"version":3,"sources":["../../src/videouplinkbandwidthpolicy/NScaleVideoUplinkBandwidthPolicy.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst DefaultVideoCaptureAndEncodeParameter_1 = require(\"../videocaptureandencodeparameter/DefaultVideoCaptureAndEncodeParameter\");\n/** NScaleVideoUplinkBandwidthPolicy implements capture and encode\n *  parameters that are nearly equivalent to those chosen by the\n *  traditional native clients, except for a modification to\n *  maxBandwidthKbps described below. */\nclass NScaleVideoUplinkBandwidthPolicy {\n    constructor(selfAttendeeId) {\n        this.selfAttendeeId = selfAttendeeId;\n        this.numParticipants = 0;\n        this.idealMaxBandwidthKbps = 1400;\n        this.hasBandwidthPriority = false;\n        this.optimalParameters = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, false);\n        this.parametersInEffect = new DefaultVideoCaptureAndEncodeParameter_1.default(0, 0, 0, 0, false);\n    }\n    updateConnectionMetric(_metrics) {\n        return;\n    }\n    chooseMediaTrackConstraints() {\n        return {};\n    }\n    chooseEncodingParameters() {\n        return new Map();\n    }\n    updateIndex(videoIndex) {\n        // the +1 for self is assuming that we intend to send video, since\n        // the context here is VideoUplinkBandwidthPolicy\n        this.numParticipants =\n            videoIndex.numberOfVideoPublishingParticipantsExcludingSelf(this.selfAttendeeId) + 1;\n        this.optimalParameters = new DefaultVideoCaptureAndEncodeParameter_1.default(this.captureWidth(), this.captureHeight(), this.captureFrameRate(), this.maxBandwidthKbps(), false);\n    }\n    wantsResubscribe() {\n        return !this.parametersInEffect.equal(this.optimalParameters);\n    }\n    chooseCaptureAndEncodeParameters() {\n        this.parametersInEffect = this.optimalParameters.clone();\n        return this.parametersInEffect.clone();\n    }\n    captureWidth() {\n        let width = 640;\n        if (this.numParticipants > 4) {\n            width = 320;\n        }\n        return width;\n    }\n    captureHeight() {\n        let height = 384;\n        if (this.numParticipants > 4) {\n            height = 192;\n        }\n        return height;\n    }\n    captureFrameRate() {\n        return 15;\n    }\n    maxBandwidthKbps() {\n        if (this.hasBandwidthPriority) {\n            return Math.trunc(this.idealMaxBandwidthKbps);\n        }\n        let rate = 0;\n        if (this.numParticipants <= 2) {\n            rate = this.idealMaxBandwidthKbps;\n        }\n        else if (this.numParticipants <= 4) {\n            rate = (this.idealMaxBandwidthKbps * 2) / 3;\n        }\n        else {\n            rate = ((544 / 11 + 14880 / (11 * this.numParticipants)) / 600) * this.idealMaxBandwidthKbps;\n        }\n        return Math.trunc(rate);\n    }\n    setIdealMaxBandwidthKbps(idealMaxBandwidthKbps) {\n        this.idealMaxBandwidthKbps = idealMaxBandwidthKbps;\n    }\n    setHasBandwidthPriority(hasBandwidthPriority) {\n        this.hasBandwidthPriority = hasBandwidthPriority;\n    }\n}\nexports.default = NScaleVideoUplinkBandwidthPolicy;\n//# sourceMappingURL=NScaleVideoUplinkBandwidthPolicy.js.map"]},"metadata":{},"sourceType":"script"}