{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BaseTask_1 = require(\"./BaseTask\");\n/**\n * [[ReceiveAudioInputTask]] acquires an audio input.\n */\n\n\nclass ReceiveAudioInputTask extends BaseTask_1.default {\n  constructor(context) {\n    super(context.logger);\n    this.context = context;\n    this.taskName = 'ReceiveAudioInputTask';\n  }\n\n  run() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.context.activeAudioInput) {\n        this.context.logger.info(`an active audio input exists`);\n        return;\n      }\n\n      let audioInput = null;\n\n      try {\n        audioInput = yield this.context.mediaStreamBroker.acquireAudioInputStream();\n      } catch (error) {\n        this.context.logger.warn('could not acquire audio input from current device');\n      }\n\n      if (audioInput) {\n        this.context.activeAudioInput = audioInput;\n        this.context.realtimeController.realtimeSetLocalAudioInput(audioInput);\n      } else {\n        this.context.logger.warn('an audio input is not available');\n      }\n    });\n  }\n\n}\n\nexports.default = ReceiveAudioInputTask;","map":{"version":3,"sources":["../../src/task/ReceiveAudioInputTask.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;AAEG;;;AACH,MAAqB,qBAArB,SAAmD,UAAA,CAAA,OAAnD,CAA2D;AAGzD,EAAA,WAAA,CAAoB,OAApB,EAAsD;AACpD,UAAM,OAAO,CAAC,MAAd;AADkB,SAAA,OAAA,GAAA,OAAA;AAFV,SAAA,QAAA,GAAW,uBAAX;AAIT;;AAEK,EAAA,GAAG,GAAA;;AACP,UAAI,KAAK,OAAL,CAAa,gBAAjB,EAAmC;AACjC,aAAK,OAAL,CAAa,MAAb,CAAoB,IAApB,CAAyB,8BAAzB;AACA;AACD;;AACD,UAAI,UAAU,GAAuB,IAArC;;AACA,UAAI;AACF,QAAA,UAAU,GAAG,MAAM,KAAK,OAAL,CAAa,iBAAb,CAA+B,uBAA/B,EAAnB;AACD,OAFD,CAEE,OAAO,KAAP,EAAc;AACd,aAAK,OAAL,CAAa,MAAb,CAAoB,IAApB,CAAyB,mDAAzB;AACD;;AAED,UAAI,UAAJ,EAAgB;AACd,aAAK,OAAL,CAAa,gBAAb,GAAgC,UAAhC;AACA,aAAK,OAAL,CAAa,kBAAb,CAAgC,0BAAhC,CAA2D,UAA3D;AACD,OAHD,MAGO;AACL,aAAK,OAAL,CAAa,MAAb,CAAoB,IAApB,CAAyB,iCAAzB;AACD;AACF,K;AAAA;;AAzBwD;;AAA3D,OAAA,CAAA,OAAA,GAAA,qBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BaseTask_1 = require(\"./BaseTask\");\n/**\n * [[ReceiveAudioInputTask]] acquires an audio input.\n */\nclass ReceiveAudioInputTask extends BaseTask_1.default {\n    constructor(context) {\n        super(context.logger);\n        this.context = context;\n        this.taskName = 'ReceiveAudioInputTask';\n    }\n    run() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.context.activeAudioInput) {\n                this.context.logger.info(`an active audio input exists`);\n                return;\n            }\n            let audioInput = null;\n            try {\n                audioInput = yield this.context.mediaStreamBroker.acquireAudioInputStream();\n            }\n            catch (error) {\n                this.context.logger.warn('could not acquire audio input from current device');\n            }\n            if (audioInput) {\n                this.context.activeAudioInput = audioInput;\n                this.context.realtimeController.realtimeSetLocalAudioInput(audioInput);\n            }\n            else {\n                this.context.logger.warn('an audio input is not available');\n            }\n        });\n    }\n}\nexports.default = ReceiveAudioInputTask;\n//# sourceMappingURL=ReceiveAudioInputTask.js.map"]},"metadata":{},"sourceType":"script"}