{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Maybe_1 = require(\"../maybe/Maybe\");\n\nconst MeetingSessionConfiguration_1 = require(\"../meetingsession/MeetingSessionConfiguration\");\n\nconst MeetingSessionCredentials_1 = require(\"../meetingsession/MeetingSessionCredentials\");\n\nconst DefaultModality_1 = require(\"../modality/DefaultModality\");\n\nconst AsyncScheduler_1 = require(\"../scheduler/AsyncScheduler\");\n\nconst ContentShareConstants_1 = require(\"./ContentShareConstants\");\n\nclass DefaultContentShareController {\n  constructor(mediaStreamBroker, contentAudioVideo, attendeeAudioVideo) {\n    this.mediaStreamBroker = mediaStreamBroker;\n    this.contentAudioVideo = contentAudioVideo;\n    this.attendeeAudioVideo = attendeeAudioVideo;\n    this.observerQueue = new Set();\n    this.destroyed = false;\n    this.contentAudioVideo.addObserver(this);\n    this.setupContentShareEvents();\n  }\n\n  static createContentShareMeetingSessionConfigure(configuration) {\n    const contentShareConfiguration = new MeetingSessionConfiguration_1.default();\n    contentShareConfiguration.meetingId = configuration.meetingId;\n    contentShareConfiguration.externalMeetingId = configuration.externalMeetingId;\n    contentShareConfiguration.urls = configuration.urls;\n    contentShareConfiguration.credentials = new MeetingSessionCredentials_1.default();\n    contentShareConfiguration.credentials.attendeeId = configuration.credentials.attendeeId + ContentShareConstants_1.default.Modality;\n    contentShareConfiguration.credentials.externalUserId = configuration.credentials.externalUserId;\n    contentShareConfiguration.credentials.joinToken = configuration.credentials.joinToken + ContentShareConstants_1.default.Modality;\n    return contentShareConfiguration;\n  }\n\n  setContentAudioProfile(audioProfile) {\n    this.contentAudioVideo.setAudioProfile(audioProfile);\n  }\n\n  startContentShare(stream) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!stream) {\n        return;\n      }\n\n      this.mediaStreamBroker.mediaStream = stream;\n\n      for (let i = 0; i < this.mediaStreamBroker.mediaStream.getTracks().length; i++) {\n        this.mediaStreamBroker.mediaStream.getTracks()[i].addEventListener('ended', () => {\n          this.stopContentShare();\n        });\n      }\n\n      this.contentAudioVideo.start();\n\n      if (this.mediaStreamBroker.mediaStream.getVideoTracks().length > 0) {\n        this.contentAudioVideo.videoTileController.startLocalVideoTile();\n      }\n    });\n  }\n\n  startContentShareFromScreenCapture(sourceId, frameRate) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const mediaStream = yield this.mediaStreamBroker.acquireScreenCaptureDisplayInputStream(sourceId, frameRate);\n      yield this.startContentShare(mediaStream);\n      return mediaStream;\n    });\n  }\n\n  pauseContentShare() {\n    if (this.mediaStreamBroker.toggleMediaStream(false)) {\n      this.forEachContentShareObserver(observer => {\n        Maybe_1.default.of(observer.contentShareDidPause).map(f => f.call(observer));\n      });\n    }\n  }\n\n  unpauseContentShare() {\n    if (this.mediaStreamBroker.toggleMediaStream(true)) {\n      this.forEachContentShareObserver(observer => {\n        Maybe_1.default.of(observer.contentShareDidUnpause).map(f => f.call(observer));\n      });\n    }\n  }\n\n  destroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Idempotency.\n\n      /* istanbul ignore if */\n      if (!this.contentAudioVideo) {\n        return;\n      }\n\n      this.destroyed = true;\n      this.contentAudioVideo.removeObserver(this);\n      this.stopContentShare();\n      this.observerQueue.clear();\n      this.contentAudioVideo = undefined;\n      this.attendeeAudioVideo = undefined;\n      this.mediaStreamBroker = undefined;\n    });\n  }\n\n  stopContentShare() {\n    this.contentAudioVideo.stop();\n    this.mediaStreamBroker.cleanup();\n  }\n\n  addContentShareObserver(observer) {\n    this.observerQueue.add(observer);\n  }\n\n  removeContentShareObserver(observer) {\n    this.observerQueue.delete(observer);\n  }\n\n  forEachContentShareObserver(observerFunc) {\n    for (const observer of this.observerQueue) {\n      AsyncScheduler_1.default.nextTick(() => {\n        if (this.observerQueue.has(observer)) {\n          observerFunc(observer);\n        }\n      });\n    }\n  }\n\n  audioVideoDidStop(_sessionStatus) {\n    // If the content attendee got dropped or could not connect, stopContentShare will not be called\n    // so make sure to clean up the media stream.\n    this.mediaStreamBroker.cleanup();\n\n    if (this.contentShareTile) {\n      this.attendeeAudioVideo.videoTileController.removeVideoTile(this.contentShareTile.id());\n      this.contentShareTile = null;\n    }\n\n    this.forEachContentShareObserver(observer => {\n      Maybe_1.default.of(observer.contentShareDidStop).map(f => f.call(observer));\n    });\n  }\n\n  setupContentShareEvents() {\n    // We use realtimeSubscribeToAttendeeIdPresence instead of audioVideoDidStart because audioVideoDidStart fires\n    // before the capacity check in Tincan while when realtimeSubscribeToAttendeeIdPresence fires, we know the\n    // content attendee has been able to pass the capacity check and join the call so we can start the local\n    // content share video\n    this.attendeeAudioVideo.realtimeController.realtimeSubscribeToAttendeeIdPresence((attendeeId, present, _externalUserId, _dropped) => {\n      const isContentAttendee = new DefaultModality_1.default(attendeeId).hasModality(DefaultModality_1.default.MODALITY_CONTENT);\n      const isSelfAttendee = new DefaultModality_1.default(attendeeId).base() === this.attendeeAudioVideo.configuration.credentials.attendeeId;\n\n      if (!isContentAttendee || !isSelfAttendee || !present || this.contentShareTile) {\n        return;\n      }\n\n      const stream = this.mediaStreamBroker.mediaStream;\n\n      if (stream.getVideoTracks().length > 0) {\n        this.contentShareTile = this.attendeeAudioVideo.videoTileController.addVideoTile();\n        const track = stream.getVideoTracks()[0];\n        let width, height;\n\n        if (track.getSettings) {\n          const cap = track.getSettings();\n          width = cap.width;\n          height = cap.height;\n        } else {\n          const cap = track.getCapabilities();\n          width = cap.width;\n          height = cap.height;\n        }\n\n        this.contentShareTile.bindVideoStream(this.contentAudioVideo.configuration.credentials.attendeeId, false, stream, width, height, null, this.contentAudioVideo.configuration.credentials.externalUserId);\n      }\n\n      this.forEachContentShareObserver(observer => {\n        Maybe_1.default.of(observer.contentShareDidStart).map(f => f.call(observer));\n      });\n    });\n  }\n\n}\n\nexports.default = DefaultContentShareController;","map":{"version":3,"sources":["../../src/contentsharecontroller/DefaultContentShareController.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Maybe_1 = require(\"../maybe/Maybe\");\nconst MeetingSessionConfiguration_1 = require(\"../meetingsession/MeetingSessionConfiguration\");\nconst MeetingSessionCredentials_1 = require(\"../meetingsession/MeetingSessionCredentials\");\nconst DefaultModality_1 = require(\"../modality/DefaultModality\");\nconst AsyncScheduler_1 = require(\"../scheduler/AsyncScheduler\");\nconst ContentShareConstants_1 = require(\"./ContentShareConstants\");\nclass DefaultContentShareController {\n    constructor(mediaStreamBroker, contentAudioVideo, attendeeAudioVideo) {\n        this.mediaStreamBroker = mediaStreamBroker;\n        this.contentAudioVideo = contentAudioVideo;\n        this.attendeeAudioVideo = attendeeAudioVideo;\n        this.observerQueue = new Set();\n        this.destroyed = false;\n        this.contentAudioVideo.addObserver(this);\n        this.setupContentShareEvents();\n    }\n    static createContentShareMeetingSessionConfigure(configuration) {\n        const contentShareConfiguration = new MeetingSessionConfiguration_1.default();\n        contentShareConfiguration.meetingId = configuration.meetingId;\n        contentShareConfiguration.externalMeetingId = configuration.externalMeetingId;\n        contentShareConfiguration.urls = configuration.urls;\n        contentShareConfiguration.credentials = new MeetingSessionCredentials_1.default();\n        contentShareConfiguration.credentials.attendeeId =\n            configuration.credentials.attendeeId + ContentShareConstants_1.default.Modality;\n        contentShareConfiguration.credentials.externalUserId = configuration.credentials.externalUserId;\n        contentShareConfiguration.credentials.joinToken =\n            configuration.credentials.joinToken + ContentShareConstants_1.default.Modality;\n        return contentShareConfiguration;\n    }\n    setContentAudioProfile(audioProfile) {\n        this.contentAudioVideo.setAudioProfile(audioProfile);\n    }\n    startContentShare(stream) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!stream) {\n                return;\n            }\n            this.mediaStreamBroker.mediaStream = stream;\n            for (let i = 0; i < this.mediaStreamBroker.mediaStream.getTracks().length; i++) {\n                this.mediaStreamBroker.mediaStream.getTracks()[i].addEventListener('ended', () => {\n                    this.stopContentShare();\n                });\n            }\n            this.contentAudioVideo.start();\n            if (this.mediaStreamBroker.mediaStream.getVideoTracks().length > 0) {\n                this.contentAudioVideo.videoTileController.startLocalVideoTile();\n            }\n        });\n    }\n    startContentShareFromScreenCapture(sourceId, frameRate) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mediaStream = yield this.mediaStreamBroker.acquireScreenCaptureDisplayInputStream(sourceId, frameRate);\n            yield this.startContentShare(mediaStream);\n            return mediaStream;\n        });\n    }\n    pauseContentShare() {\n        if (this.mediaStreamBroker.toggleMediaStream(false)) {\n            this.forEachContentShareObserver(observer => {\n                Maybe_1.default.of(observer.contentShareDidPause).map(f => f.call(observer));\n            });\n        }\n    }\n    unpauseContentShare() {\n        if (this.mediaStreamBroker.toggleMediaStream(true)) {\n            this.forEachContentShareObserver(observer => {\n                Maybe_1.default.of(observer.contentShareDidUnpause).map(f => f.call(observer));\n            });\n        }\n    }\n    destroy() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Idempotency.\n            /* istanbul ignore if */\n            if (!this.contentAudioVideo) {\n                return;\n            }\n            this.destroyed = true;\n            this.contentAudioVideo.removeObserver(this);\n            this.stopContentShare();\n            this.observerQueue.clear();\n            this.contentAudioVideo = undefined;\n            this.attendeeAudioVideo = undefined;\n            this.mediaStreamBroker = undefined;\n        });\n    }\n    stopContentShare() {\n        this.contentAudioVideo.stop();\n        this.mediaStreamBroker.cleanup();\n    }\n    addContentShareObserver(observer) {\n        this.observerQueue.add(observer);\n    }\n    removeContentShareObserver(observer) {\n        this.observerQueue.delete(observer);\n    }\n    forEachContentShareObserver(observerFunc) {\n        for (const observer of this.observerQueue) {\n            AsyncScheduler_1.default.nextTick(() => {\n                if (this.observerQueue.has(observer)) {\n                    observerFunc(observer);\n                }\n            });\n        }\n    }\n    audioVideoDidStop(_sessionStatus) {\n        // If the content attendee got dropped or could not connect, stopContentShare will not be called\n        // so make sure to clean up the media stream.\n        this.mediaStreamBroker.cleanup();\n        if (this.contentShareTile) {\n            this.attendeeAudioVideo.videoTileController.removeVideoTile(this.contentShareTile.id());\n            this.contentShareTile = null;\n        }\n        this.forEachContentShareObserver(observer => {\n            Maybe_1.default.of(observer.contentShareDidStop).map(f => f.call(observer));\n        });\n    }\n    setupContentShareEvents() {\n        // We use realtimeSubscribeToAttendeeIdPresence instead of audioVideoDidStart because audioVideoDidStart fires\n        // before the capacity check in Tincan while when realtimeSubscribeToAttendeeIdPresence fires, we know the\n        // content attendee has been able to pass the capacity check and join the call so we can start the local\n        // content share video\n        this.attendeeAudioVideo.realtimeController.realtimeSubscribeToAttendeeIdPresence((attendeeId, present, _externalUserId, _dropped) => {\n            const isContentAttendee = new DefaultModality_1.default(attendeeId).hasModality(DefaultModality_1.default.MODALITY_CONTENT);\n            const isSelfAttendee = new DefaultModality_1.default(attendeeId).base() ===\n                this.attendeeAudioVideo.configuration.credentials.attendeeId;\n            if (!isContentAttendee || !isSelfAttendee || !present || this.contentShareTile) {\n                return;\n            }\n            const stream = this.mediaStreamBroker.mediaStream;\n            if (stream.getVideoTracks().length > 0) {\n                this.contentShareTile = this.attendeeAudioVideo.videoTileController.addVideoTile();\n                const track = stream.getVideoTracks()[0];\n                let width, height;\n                if (track.getSettings) {\n                    const cap = track.getSettings();\n                    width = cap.width;\n                    height = cap.height;\n                }\n                else {\n                    const cap = track.getCapabilities();\n                    width = cap.width;\n                    height = cap.height;\n                }\n                this.contentShareTile.bindVideoStream(this.contentAudioVideo.configuration.credentials.attendeeId, false, stream, width, height, null, this.contentAudioVideo.configuration.credentials.externalUserId);\n            }\n            this.forEachContentShareObserver(observer => {\n                Maybe_1.default.of(observer.contentShareDidStart).map(f => f.call(observer));\n            });\n        });\n    }\n}\nexports.default = DefaultContentShareController;\n//# sourceMappingURL=DefaultContentShareController.js.map"]},"metadata":{},"sourceType":"script"}