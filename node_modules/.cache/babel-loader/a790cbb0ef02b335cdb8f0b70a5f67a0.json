{"ast":null,"code":"\"use strict\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass DefaultActiveSpeakerPolicy {\n  /** Creates active speaker policy with speakerWeight, cutoffThreshold, silenceThreshold, and takeoverRate.\n   *\n   * @param speakerWeight\n   * The number used to calculate new active speaker score for current attendee\n   * ```js\n   * Formula:\n   * updatedCurrentAttendeeScore = currentAttendeeExistingScore * speakerWeight + currentReceivedVolume * (1 - speakerWeight)\n   * ```\n   *\n   * @param cutoffThreshold\n   * The threshold number compared with updated active speaker score.\n   * If the updated active speaker score is less than this threshold value,\n   * the updated score is returned as 0, else the updated score is returned.\n   *\n   * @param silenceThreshold\n   * The threshold number compared with current received volume.\n   * While calculating the new active speaker score, if the current received\n   * volume is less than this threshold value, the current received volume is considered as 0,\n   * else 1.\n   *\n   * @param takeoverRate\n   * The number used to calculate other attendee's active speaker score, other than the current attendee.\n   * ```js\n   * Formula:\n   *  updatedOtherAttendeeActiveSpeakerScore = Math.max(\n   *    existingOtherAttendeeActiveSpeakerScore - takeoverRate * currentReceivedVolume,\n   *    0\n   *  );\n   * ```\n   */\n  constructor(speakerWeight = 0.9, cutoffThreshold = 0.01, silenceThreshold = 0.2, takeoverRate = 0.2) {\n    this.speakerWeight = speakerWeight;\n    this.cutoffThreshold = cutoffThreshold;\n    this.silenceThreshold = silenceThreshold;\n    this.takeoverRate = takeoverRate;\n    /**\n     * The map of attendeeIds to their active speaker score values\n     */\n\n    this.volumes = {};\n  }\n\n  calculateScore(attendeeId, volume, muted) {\n    if (muted || volume === null) {\n      volume = 0;\n    }\n\n    if (!this.volumes.hasOwnProperty(attendeeId)) {\n      this.volumes[attendeeId] = 0;\n    }\n\n    if (volume > this.silenceThreshold) {\n      volume = 1.0;\n    } else {\n      volume = 0.0;\n    }\n\n    const score = this.volumes[attendeeId] * this.speakerWeight + volume * (1 - this.speakerWeight);\n    this.volumes[attendeeId] = score;\n\n    for (const otherAttendeeId in this.volumes) {\n      if (otherAttendeeId !== attendeeId) {\n        this.volumes[otherAttendeeId] = Math.max(this.volumes[otherAttendeeId] - this.takeoverRate * volume, 0);\n      }\n    }\n\n    if (score < this.cutoffThreshold) {\n      return 0;\n    }\n\n    return score;\n  }\n\n  prioritizeVideoSendBandwidthForActiveSpeaker() {\n    return true;\n  }\n\n}\n\nexports.default = DefaultActiveSpeakerPolicy;","map":{"version":3,"sources":["../../src/activespeakerpolicy/DefaultActiveSpeakerPolicy.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAIA,MAAqB,0BAArB,CAA+C;AAM7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BG;AACH,EAAA,WAAA,CACU,aAAA,GAAwB,GADlC,EAEU,eAAA,GAA0B,IAFpC,EAGU,gBAAA,GAAmB,GAH7B,EAIU,YAAA,GAAe,GAJzB,EAI4B;AAHlB,SAAA,aAAA,GAAA,aAAA;AACA,SAAA,eAAA,GAAA,eAAA;AACA,SAAA,gBAAA,GAAA,gBAAA;AACA,SAAA,YAAA,GAAA,YAAA;AAvCV;;AAEG;;AACK,SAAA,OAAA,GAA4C,EAA5C;AAqCJ;;AAEJ,EAAA,cAAc,CAAC,UAAD,EAAqB,MAArB,EAA4C,KAA5C,EAAiE;AAC7E,QAAI,KAAK,IAAI,MAAM,KAAK,IAAxB,EAA8B;AAC5B,MAAA,MAAM,GAAG,CAAT;AACD;;AACD,QAAI,CAAC,KAAK,OAAL,CAAa,cAAb,CAA4B,UAA5B,CAAL,EAA8C;AAC5C,WAAK,OAAL,CAAa,UAAb,IAA2B,CAA3B;AACD;;AACD,QAAI,MAAM,GAAG,KAAK,gBAAlB,EAAoC;AAClC,MAAA,MAAM,GAAG,GAAT;AACD,KAFD,MAEO;AACL,MAAA,MAAM,GAAG,GAAT;AACD;;AACD,UAAM,KAAK,GAAG,KAAK,OAAL,CAAa,UAAb,IAA2B,KAAK,aAAhC,GAAgD,MAAM,IAAI,IAAI,KAAK,aAAb,CAApE;AACA,SAAK,OAAL,CAAa,UAAb,IAA2B,KAA3B;;AACA,SAAK,MAAM,eAAX,IAA8B,KAAK,OAAnC,EAA4C;AAC1C,UAAI,eAAe,KAAK,UAAxB,EAAoC;AAClC,aAAK,OAAL,CAAa,eAAb,IAAgC,IAAI,CAAC,GAAL,CAC9B,KAAK,OAAL,CAAa,eAAb,IAAgC,KAAK,YAAL,GAAoB,MADtB,EAE9B,CAF8B,CAAhC;AAID;AACF;;AACD,QAAI,KAAK,GAAG,KAAK,eAAjB,EAAkC;AAChC,aAAO,CAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAED,EAAA,4CAA4C,GAAA;AAC1C,WAAO,IAAP;AACD;;AAzE4C;;AAA/C,OAAA,CAAA,OAAA,GAAA,0BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass DefaultActiveSpeakerPolicy {\n    /** Creates active speaker policy with speakerWeight, cutoffThreshold, silenceThreshold, and takeoverRate.\n     *\n     * @param speakerWeight\n     * The number used to calculate new active speaker score for current attendee\n     * ```js\n     * Formula:\n     * updatedCurrentAttendeeScore = currentAttendeeExistingScore * speakerWeight + currentReceivedVolume * (1 - speakerWeight)\n     * ```\n     *\n     * @param cutoffThreshold\n     * The threshold number compared with updated active speaker score.\n     * If the updated active speaker score is less than this threshold value,\n     * the updated score is returned as 0, else the updated score is returned.\n     *\n     * @param silenceThreshold\n     * The threshold number compared with current received volume.\n     * While calculating the new active speaker score, if the current received\n     * volume is less than this threshold value, the current received volume is considered as 0,\n     * else 1.\n     *\n     * @param takeoverRate\n     * The number used to calculate other attendee's active speaker score, other than the current attendee.\n     * ```js\n     * Formula:\n     *  updatedOtherAttendeeActiveSpeakerScore = Math.max(\n     *    existingOtherAttendeeActiveSpeakerScore - takeoverRate * currentReceivedVolume,\n     *    0\n     *  );\n     * ```\n     */\n    constructor(speakerWeight = 0.9, cutoffThreshold = 0.01, silenceThreshold = 0.2, takeoverRate = 0.2) {\n        this.speakerWeight = speakerWeight;\n        this.cutoffThreshold = cutoffThreshold;\n        this.silenceThreshold = silenceThreshold;\n        this.takeoverRate = takeoverRate;\n        /**\n         * The map of attendeeIds to their active speaker score values\n         */\n        this.volumes = {};\n    }\n    calculateScore(attendeeId, volume, muted) {\n        if (muted || volume === null) {\n            volume = 0;\n        }\n        if (!this.volumes.hasOwnProperty(attendeeId)) {\n            this.volumes[attendeeId] = 0;\n        }\n        if (volume > this.silenceThreshold) {\n            volume = 1.0;\n        }\n        else {\n            volume = 0.0;\n        }\n        const score = this.volumes[attendeeId] * this.speakerWeight + volume * (1 - this.speakerWeight);\n        this.volumes[attendeeId] = score;\n        for (const otherAttendeeId in this.volumes) {\n            if (otherAttendeeId !== attendeeId) {\n                this.volumes[otherAttendeeId] = Math.max(this.volumes[otherAttendeeId] - this.takeoverRate * volume, 0);\n            }\n        }\n        if (score < this.cutoffThreshold) {\n            return 0;\n        }\n        return score;\n    }\n    prioritizeVideoSendBandwidthForActiveSpeaker() {\n        return true;\n    }\n}\nexports.default = DefaultActiveSpeakerPolicy;\n//# sourceMappingURL=DefaultActiveSpeakerPolicy.js.map"]},"metadata":{},"sourceType":"script"}